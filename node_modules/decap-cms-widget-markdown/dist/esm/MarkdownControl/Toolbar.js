"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _react2 = require("@emotion/react");
var _immutable = require("immutable");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _ToolbarButton = _interopRequireDefault(require("./ToolbarButton"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const ToolbarContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e11cox783",
  label: "ToolbarContainer"
})("background-color:", _decapCmsUiDefault.colors.textFieldBorder, ";border-top-right-radius:", _decapCmsUiDefault.lengths.borderRadius, ";position:relative;display:flex;justify-content:space-between;align-items:center;padding:11px 14px;min-height:58px;transition:background-color ", _decapCmsUiDefault.transitions.main, ",color ", _decapCmsUiDefault.transitions.main, ";color:", _decapCmsUiDefault.colors.text, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NYXJrZG93bkNvbnRyb2wvVG9vbGJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQm1DIiwiZmlsZSI6Ii4uLy4uLy4uL3NyYy9NYXJrZG93bkNvbnRyb2wvVG9vbGJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IExpc3QgfSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0IHtcbiAgVG9nZ2xlLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBEcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzLFxuICB0cmFuc2l0aW9ucyxcbiAgbGVuZ3Rocyxcbn0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5pbXBvcnQgVG9vbGJhckJ1dHRvbiBmcm9tICcuL1Rvb2xiYXJCdXR0b24nO1xuXG5jb25zdCBUb29sYmFyQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6ICR7bGVuZ3Rocy5ib3JkZXJSYWRpdXN9O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogMTFweCAxNHB4O1xuICBtaW4taGVpZ2h0OiA1OHB4O1xuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yICR7dHJhbnNpdGlvbnMubWFpbn0sIGNvbG9yICR7dHJhbnNpdGlvbnMubWFpbn07XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbmA7XG5cbmNvbnN0IFRvb2xiYXJEcm9wZG93bldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbmA7XG5cbmNvbnN0IFRvb2xiYXJUb2dnbGUgPSBzdHlsZWQuZGl2YFxuICBmbGV4LXNocmluazogMDtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBtYXJnaW46IDAgMTBweDtcbmA7XG5cbmNvbnN0IFN0eWxlZFRvZ2dsZSA9IFRvb2xiYXJUb2dnbGUud2l0aENvbXBvbmVudChUb2dnbGUpO1xuXG5jb25zdCBUb29sYmFyVG9nZ2xlTGFiZWwgPSBzdHlsZWQuc3BhbmBcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICBtaW4td2lkdGg6ICR7cHJvcHMgPT4gKHByb3BzLm9mZlBvc2l0aW9uID8gJzYycHgnIDogJzcwcHgnKX07XG5cbiAgJHtwcm9wcyA9PlxuICAgIHByb3BzLmlzQWN0aXZlICYmXG4gICAgY3NzYFxuICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICAgIGB9O1xuYDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9vbGJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgYnV0dG9uczogSW1tdXRhYmxlUHJvcFR5cGVzLmxpc3QsXG4gICAgZWRpdG9yQ29tcG9uZW50czogSW1tdXRhYmxlUHJvcFR5cGVzLmxpc3QsXG4gICAgb25Ub2dnbGVNb2RlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHJhd01vZGU6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzU2hvd01vZGVUb2dnbGU6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgcGx1Z2luczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBvblN1Ym1pdDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25BZGRBc3NldDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZ2V0QXNzZXQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBvbk1hcmtDbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25CbG9ja0NsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkxpbmtDbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzTWFyazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzSW5saW5lOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNCbG9jazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBpc1Zpc2libGUgPSBidXR0b24gPT4ge1xuICAgIGNvbnN0IHsgYnV0dG9ucyB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gIUxpc3QuaXNMaXN0KGJ1dHRvbnMpIHx8IGJ1dHRvbnMuaW5jbHVkZXMoYnV0dG9uKTtcbiAgfTtcblxuICBoYW5kbGVCbG9ja0NsaWNrID0gKGV2ZW50LCB0eXBlKSA9PiB7XG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICB0aGlzLnByb3BzLm9uQmxvY2tDbGljayh0eXBlKTtcbiAgfTtcblxuICBoYW5kbGVNYXJrQ2xpY2sgPSAoZXZlbnQsIHR5cGUpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMucHJvcHMub25NYXJrQ2xpY2sodHlwZSk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIG9uTGlua0NsaWNrLFxuICAgICAgb25Ub2dnbGVNb2RlLFxuICAgICAgcmF3TW9kZSxcbiAgICAgIGlzU2hvd01vZGVUb2dnbGUsXG4gICAgICBwbHVnaW5zLFxuICAgICAgZGlzYWJsZWQsXG4gICAgICBvblN1Ym1pdCxcbiAgICAgIGhhc01hcmsgPSAoKSA9PiB7fSxcbiAgICAgIGhhc0lubGluZSA9ICgpID0+IHt9LFxuICAgICAgaGFzQmxvY2sgPSAoKSA9PiB7fSxcbiAgICAgIGhhc1F1b3RlID0gKCkgPT4ge30sXG4gICAgICBoYXNMaXN0SXRlbXMgPSAoKSA9PiB7fSxcbiAgICAgIGVkaXRvckNvbXBvbmVudHMsXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGlzVmlzaWJsZSA9IHRoaXMuaXNWaXNpYmxlO1xuICAgIGNvbnN0IHNob3dFZGl0b3JDb21wb25lbnRzID0gIWVkaXRvckNvbXBvbmVudHMgfHwgZWRpdG9yQ29tcG9uZW50cy5zaXplID49IDE7XG5cbiAgICBmdW5jdGlvbiBzaG93UGx1Z2luKHsgaWQgfSkge1xuICAgICAgcmV0dXJuIGVkaXRvckNvbXBvbmVudHMgPyBlZGl0b3JDb21wb25lbnRzLmluY2x1ZGVzKGlkKSA6IHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgcGx1Z2luc0xpc3QgPSBwbHVnaW5zID8gcGx1Z2lucy50b0xpc3QoKS5maWx0ZXIoc2hvd1BsdWdpbikgOiBMaXN0KCk7XG5cbiAgICBjb25zdCBoZWFkaW5nT3B0aW9ucyA9IHtcbiAgICAgICdoZWFkaW5nLW9uZSc6IHQoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLmhlYWRpbmdPcHRpb25zLmhlYWRpbmdPbmUnKSxcbiAgICAgICdoZWFkaW5nLXR3byc6IHQoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLmhlYWRpbmdPcHRpb25zLmhlYWRpbmdUd28nKSxcbiAgICAgICdoZWFkaW5nLXRocmVlJzogdCgnZWRpdG9yLmVkaXRvcldpZGdldHMuaGVhZGluZ09wdGlvbnMuaGVhZGluZ1RocmVlJyksXG4gICAgICAnaGVhZGluZy1mb3VyJzogdCgnZWRpdG9yLmVkaXRvcldpZGdldHMuaGVhZGluZ09wdGlvbnMuaGVhZGluZ0ZvdXInKSxcbiAgICAgICdoZWFkaW5nLWZpdmUnOiB0KCdlZGl0b3IuZWRpdG9yV2lkZ2V0cy5oZWFkaW5nT3B0aW9ucy5oZWFkaW5nRml2ZScpLFxuICAgICAgJ2hlYWRpbmctc2l4JzogdCgnZWRpdG9yLmVkaXRvcldpZGdldHMuaGVhZGluZ09wdGlvbnMuaGVhZGluZ1NpeCcpLFxuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRvb2xiYXJDb250YWluZXI+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAge2lzVmlzaWJsZSgnYm9sZCcpICYmIChcbiAgICAgICAgICAgIDxUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9XCJib2xkXCJcbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLm1hcmtkb3duLmJvbGQnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImJvbGRcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZU1hcmtDbGlja31cbiAgICAgICAgICAgICAgaXNBY3RpdmU9e2hhc01hcmsoJ2JvbGQnKX1cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAgIHtpc1Zpc2libGUoJ2l0YWxpYycpICYmIChcbiAgICAgICAgICAgIDxUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9XCJpdGFsaWNcIlxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvcldpZGdldHMubWFya2Rvd24uaXRhbGljJyl9XG4gICAgICAgICAgICAgIGljb249XCJpdGFsaWNcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZU1hcmtDbGlja31cbiAgICAgICAgICAgICAgaXNBY3RpdmU9e2hhc01hcmsoJ2l0YWxpYycpfVxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgICAge2lzVmlzaWJsZSgnY29kZScpICYmIChcbiAgICAgICAgICAgIDxUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9XCJjb2RlXCJcbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLm1hcmtkb3duLmNvZGUnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImNvZGVcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZU1hcmtDbGlja31cbiAgICAgICAgICAgICAgaXNBY3RpdmU9e2hhc01hcmsoJ2NvZGUnKX1cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAgIHtpc1Zpc2libGUoJ2xpbmsnKSAmJiAoXG4gICAgICAgICAgICA8VG9vbGJhckJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPVwibGlua1wiXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yV2lkZ2V0cy5tYXJrZG93bi5saW5rJyl9XG4gICAgICAgICAgICAgIGljb249XCJsaW5rXCJcbiAgICAgICAgICAgICAgb25DbGljaz17b25MaW5rQ2xpY2t9XG4gICAgICAgICAgICAgIGlzQWN0aXZlPXtoYXNJbmxpbmUoJ2xpbmsnKX1cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAgIHsvKiBTaG93IGRyb3Bkb3duIGlmIGF0IGxlYXN0IG9uZSBoZWFkaW5nIGlzIG5vdCBoaWRkZW4gKi99XG4gICAgICAgICAge09iamVjdC5rZXlzKGhlYWRpbmdPcHRpb25zKS5zb21lKGlzVmlzaWJsZSkgJiYgKFxuICAgICAgICAgICAgPFRvb2xiYXJEcm9wZG93bldyYXBwZXI+XG4gICAgICAgICAgICAgIDxEcm9wZG93blxuICAgICAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCJtYXgtY29udGVudFwiXG4gICAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiMzZweFwiXG4gICAgICAgICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImhlYWRpbmdzXCJcbiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvcldpZGdldHMubWFya2Rvd24uaGVhZGluZ3MnKX1cbiAgICAgICAgICAgICAgICAgICAgICBpY29uPVwiaE9wdGlvbnNcIlxuICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZT17IWRpc2FibGVkICYmIE9iamVjdC5rZXlzKGhlYWRpbmdPcHRpb25zKS5zb21lKGhhc0Jsb2NrKX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvRHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHshZGlzYWJsZWQgJiZcbiAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGhlYWRpbmdPcHRpb25zKS5tYXAoXG4gICAgICAgICAgICAgICAgICAgIChvcHRpb25LZXksIGlkeCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICBpc1Zpc2libGUob3B0aW9uS2V5KSAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17aWR4fVxuICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17aGVhZGluZ09wdGlvbnNbb3B0aW9uS2V5XX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtoYXNCbG9jayhvcHRpb25LZXkpID8gJ2FjdGl2ZScgOiAnJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVCbG9ja0NsaWNrKG51bGwsIG9wdGlvbktleSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd25XcmFwcGVyPlxuICAgICAgICAgICl9XG4gICAgICAgICAge2lzVmlzaWJsZSgncXVvdGUnKSAmJiAoXG4gICAgICAgICAgICA8VG9vbGJhckJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPVwicXVvdGVcIlxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvcldpZGdldHMubWFya2Rvd24ucXVvdGUnKX1cbiAgICAgICAgICAgICAgaWNvbj1cInF1b3RlXCJcbiAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVCbG9ja0NsaWNrfVxuICAgICAgICAgICAgICBpc0FjdGl2ZT17aGFzUXVvdGUoJ3F1b3RlJyl9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7aXNWaXNpYmxlKCdidWxsZXRlZC1saXN0JykgJiYgKFxuICAgICAgICAgICAgPFRvb2xiYXJCdXR0b25cbiAgICAgICAgICAgICAgdHlwZT1cImJ1bGxldGVkLWxpc3RcIlxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvcldpZGdldHMubWFya2Rvd24uYnVsbGV0ZWRMaXN0Jyl9XG4gICAgICAgICAgICAgIGljb249XCJsaXN0LWJ1bGxldGVkXCJcbiAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVCbG9ja0NsaWNrfVxuICAgICAgICAgICAgICBpc0FjdGl2ZT17aGFzTGlzdEl0ZW1zKCdidWxsZXRlZC1saXN0Jyl9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7aXNWaXNpYmxlKCdudW1iZXJlZC1saXN0JykgJiYgKFxuICAgICAgICAgICAgPFRvb2xiYXJCdXR0b25cbiAgICAgICAgICAgICAgdHlwZT1cIm51bWJlcmVkLWxpc3RcIlxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvcldpZGdldHMubWFya2Rvd24ubnVtYmVyZWRMaXN0Jyl9XG4gICAgICAgICAgICAgIGljb249XCJsaXN0LW51bWJlcmVkXCJcbiAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVCbG9ja0NsaWNrfVxuICAgICAgICAgICAgICBpc0FjdGl2ZT17aGFzTGlzdEl0ZW1zKCdudW1iZXJlZC1saXN0Jyl9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7c2hvd0VkaXRvckNvbXBvbmVudHMgJiYgKFxuICAgICAgICAgICAgPFRvb2xiYXJEcm9wZG93bldyYXBwZXI+XG4gICAgICAgICAgICAgIDxEcm9wZG93blxuICAgICAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjM2cHhcIlxuICAgICAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCJtYXgtY29udGVudFwiXG4gICAgICAgICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLm1hcmtkb3duLmFkZENvbXBvbmVudCcpfVxuICAgICAgICAgICAgICAgICAgICAgIGljb249XCJhZGQtd2l0aFwiXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVDb21wb25lbnRzTWVudVRvZ2dsZX1cbiAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8L0Ryb3Bkb3duQnV0dG9uPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7cGx1Z2luc0xpc3QubWFwKChwbHVnaW4sIGlkeCkgPT4gKFxuICAgICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbSBrZXk9e2lkeH0gbGFiZWw9e3BsdWdpbi5sYWJlbH0gb25DbGljaz17KCkgPT4gb25TdWJtaXQocGx1Z2luKX0gLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgPC9Ecm9wZG93bj5cbiAgICAgICAgICAgIDwvVG9vbGJhckRyb3Bkb3duV3JhcHBlcj5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAge2lzU2hvd01vZGVUb2dnbGUgJiYgKFxuICAgICAgICAgIDxUb29sYmFyVG9nZ2xlPlxuICAgICAgICAgICAgPFRvb2xiYXJUb2dnbGVMYWJlbCBpc0FjdGl2ZT17IXJhd01vZGV9IG9mZlBvc2l0aW9uPlxuICAgICAgICAgICAgICB7dCgnZWRpdG9yLmVkaXRvcldpZGdldHMubWFya2Rvd24ucmljaFRleHQnKX1cbiAgICAgICAgICAgIDwvVG9vbGJhclRvZ2dsZUxhYmVsPlxuICAgICAgICAgICAgPFN0eWxlZFRvZ2dsZSBhY3RpdmU9e3Jhd01vZGV9IG9uQ2hhbmdlPXtvblRvZ2dsZU1vZGV9IC8+XG4gICAgICAgICAgICA8VG9vbGJhclRvZ2dsZUxhYmVsIGlzQWN0aXZlPXtyYXdNb2RlfT5cbiAgICAgICAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLm1hcmtkb3duLm1hcmtkb3duJyl9XG4gICAgICAgICAgICA8L1Rvb2xiYXJUb2dnbGVMYWJlbD5cbiAgICAgICAgICA8L1Rvb2xiYXJUb2dnbGU+XG4gICAgICAgICl9XG4gICAgICA8L1Rvb2xiYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuIl19 */"));
const ToolbarDropdownWrapper = /*#__PURE__*/(0, _base.default)("div", {
  target: "e11cox782",
  label: "ToolbarDropdownWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "11ffxfj",
  styles: "display:inline-block;position:relative"
} : {
  name: "11ffxfj",
  styles: "display:inline-block;position:relative",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarToggle = /*#__PURE__*/(0, _base.default)("div", {
  target: "e11cox781",
  label: "ToolbarToggle"
})(process.env.NODE_ENV === "production" ? {
  name: "1qi6e7n",
  styles: "flex-shrink:0;display:flex;align-items:center;font-size:14px;margin:0 10px"
} : {
  name: "1qi6e7n",
  styles: "flex-shrink:0;display:flex;align-items:center;font-size:14px;margin:0 10px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledToggle = ToolbarToggle.withComponent(_decapCmsUiDefault.Toggle, {
  target: "e11cox784",
  label: "StyledToggle"
});
const ToolbarToggleLabel = /*#__PURE__*/(0, _base.default)("span", {
  target: "e11cox780",
  label: "ToolbarToggleLabel"
})("display:inline-block;text-align:center;white-space:nowrap;line-height:20px;min-width:", props => props.offPosition ? '62px' : '70px', ";", props => props.isActive && /*#__PURE__*/(0, _react2.css)("font-weight:600;color:", _decapCmsUiDefault.colors.active, ";;label:ToolbarToggleLabel;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NYXJrZG93bkNvbnRyb2wvVG9vbGJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1RE8iLCJmaWxlIjoiLi4vLi4vLi4vc3JjL01hcmtkb3duQ29udHJvbC9Ub29sYmFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgTGlzdCB9IGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQge1xuICBUb2dnbGUsXG4gIERyb3Bkb3duLFxuICBEcm9wZG93bkl0ZW0sXG4gIERyb3Bkb3duQnV0dG9uLFxuICBjb2xvcnMsXG4gIHRyYW5zaXRpb25zLFxuICBsZW5ndGhzLFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCBUb29sYmFyQnV0dG9uIGZyb20gJy4vVG9vbGJhckJ1dHRvbic7XG5cbmNvbnN0IFRvb2xiYXJDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogJHtsZW5ndGhzLmJvcmRlclJhZGl1c307XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiAxMXB4IDE0cHg7XG4gIG1pbi1oZWlnaHQ6IDU4cHg7XG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgJHt0cmFuc2l0aW9ucy5tYWlufSwgY29sb3IgJHt0cmFuc2l0aW9ucy5tYWlufTtcbiAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuYDtcblxuY29uc3QgVG9vbGJhckRyb3Bkb3duV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYDtcblxuY29uc3QgVG9vbGJhclRvZ2dsZSA9IHN0eWxlZC5kaXZgXG4gIGZsZXgtc2hyaW5rOiAwO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBmb250LXNpemU6IDE0cHg7XG4gIG1hcmdpbjogMCAxMHB4O1xuYDtcblxuY29uc3QgU3R5bGVkVG9nZ2xlID0gVG9vbGJhclRvZ2dsZS53aXRoQ29tcG9uZW50KFRvZ2dsZSk7XG5cbmNvbnN0IFRvb2xiYXJUb2dnbGVMYWJlbCA9IHN0eWxlZC5zcGFuYFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gIG1pbi13aWR0aDogJHtwcm9wcyA9PiAocHJvcHMub2ZmUG9zaXRpb24gPyAnNjJweCcgOiAnNzBweCcpfTtcblxuICAke3Byb3BzID0+XG4gICAgcHJvcHMuaXNBY3RpdmUgJiZcbiAgICBjc3NgXG4gICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgYH07XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb29sYmFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBidXR0b25zOiBJbW11dGFibGVQcm9wVHlwZXMubGlzdCxcbiAgICBlZGl0b3JDb21wb25lbnRzOiBJbW11dGFibGVQcm9wVHlwZXMubGlzdCxcbiAgICBvblRvZ2dsZU1vZGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgcmF3TW9kZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNTaG93TW9kZVRvZ2dsZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBwbHVnaW5zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIG9uU3VibWl0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkFkZEFzc2V0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBnZXRBc3NldDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uTWFya0NsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkJsb2NrQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uTGlua0NsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNNYXJrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNJbmxpbmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhc0Jsb2NrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGlzVmlzaWJsZSA9IGJ1dHRvbiA9PiB7XG4gICAgY29uc3QgeyBidXR0b25zIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAhTGlzdC5pc0xpc3QoYnV0dG9ucykgfHwgYnV0dG9ucy5pbmNsdWRlcyhidXR0b24pO1xuICB9O1xuXG4gIGhhbmRsZUJsb2NrQ2xpY2sgPSAoZXZlbnQsIHR5cGUpID0+IHtcbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIHRoaXMucHJvcHMub25CbG9ja0NsaWNrKHR5cGUpO1xuICB9O1xuXG4gIGhhbmRsZU1hcmtDbGljayA9IChldmVudCwgdHlwZSkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5wcm9wcy5vbk1hcmtDbGljayh0eXBlKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgb25MaW5rQ2xpY2ssXG4gICAgICBvblRvZ2dsZU1vZGUsXG4gICAgICByYXdNb2RlLFxuICAgICAgaXNTaG93TW9kZVRvZ2dsZSxcbiAgICAgIHBsdWdpbnMsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIG9uU3VibWl0LFxuICAgICAgaGFzTWFyayA9ICgpID0+IHt9LFxuICAgICAgaGFzSW5saW5lID0gKCkgPT4ge30sXG4gICAgICBoYXNCbG9jayA9ICgpID0+IHt9LFxuICAgICAgaGFzUXVvdGUgPSAoKSA9PiB7fSxcbiAgICAgIGhhc0xpc3RJdGVtcyA9ICgpID0+IHt9LFxuICAgICAgZWRpdG9yQ29tcG9uZW50cyxcbiAgICAgIHQsXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgaXNWaXNpYmxlID0gdGhpcy5pc1Zpc2libGU7XG4gICAgY29uc3Qgc2hvd0VkaXRvckNvbXBvbmVudHMgPSAhZWRpdG9yQ29tcG9uZW50cyB8fCBlZGl0b3JDb21wb25lbnRzLnNpemUgPj0gMTtcblxuICAgIGZ1bmN0aW9uIHNob3dQbHVnaW4oeyBpZCB9KSB7XG4gICAgICByZXR1cm4gZWRpdG9yQ29tcG9uZW50cyA/IGVkaXRvckNvbXBvbmVudHMuaW5jbHVkZXMoaWQpIDogdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBwbHVnaW5zTGlzdCA9IHBsdWdpbnMgPyBwbHVnaW5zLnRvTGlzdCgpLmZpbHRlcihzaG93UGx1Z2luKSA6IExpc3QoKTtcblxuICAgIGNvbnN0IGhlYWRpbmdPcHRpb25zID0ge1xuICAgICAgJ2hlYWRpbmctb25lJzogdCgnZWRpdG9yLmVkaXRvcldpZGdldHMuaGVhZGluZ09wdGlvbnMuaGVhZGluZ09uZScpLFxuICAgICAgJ2hlYWRpbmctdHdvJzogdCgnZWRpdG9yLmVkaXRvcldpZGdldHMuaGVhZGluZ09wdGlvbnMuaGVhZGluZ1R3bycpLFxuICAgICAgJ2hlYWRpbmctdGhyZWUnOiB0KCdlZGl0b3IuZWRpdG9yV2lkZ2V0cy5oZWFkaW5nT3B0aW9ucy5oZWFkaW5nVGhyZWUnKSxcbiAgICAgICdoZWFkaW5nLWZvdXInOiB0KCdlZGl0b3IuZWRpdG9yV2lkZ2V0cy5oZWFkaW5nT3B0aW9ucy5oZWFkaW5nRm91cicpLFxuICAgICAgJ2hlYWRpbmctZml2ZSc6IHQoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLmhlYWRpbmdPcHRpb25zLmhlYWRpbmdGaXZlJyksXG4gICAgICAnaGVhZGluZy1zaXgnOiB0KCdlZGl0b3IuZWRpdG9yV2lkZ2V0cy5oZWFkaW5nT3B0aW9ucy5oZWFkaW5nU2l4JyksXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8VG9vbGJhckNvbnRhaW5lcj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICB7aXNWaXNpYmxlKCdib2xkJykgJiYgKFxuICAgICAgICAgICAgPFRvb2xiYXJCdXR0b25cbiAgICAgICAgICAgICAgdHlwZT1cImJvbGRcIlxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvcldpZGdldHMubWFya2Rvd24uYm9sZCcpfVxuICAgICAgICAgICAgICBpY29uPVwiYm9sZFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlTWFya0NsaWNrfVxuICAgICAgICAgICAgICBpc0FjdGl2ZT17aGFzTWFyaygnYm9sZCcpfVxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgICAge2lzVmlzaWJsZSgnaXRhbGljJykgJiYgKFxuICAgICAgICAgICAgPFRvb2xiYXJCdXR0b25cbiAgICAgICAgICAgICAgdHlwZT1cIml0YWxpY1wiXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yV2lkZ2V0cy5tYXJrZG93bi5pdGFsaWMnKX1cbiAgICAgICAgICAgICAgaWNvbj1cIml0YWxpY1wiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlTWFya0NsaWNrfVxuICAgICAgICAgICAgICBpc0FjdGl2ZT17aGFzTWFyaygnaXRhbGljJyl9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7aXNWaXNpYmxlKCdjb2RlJykgJiYgKFxuICAgICAgICAgICAgPFRvb2xiYXJCdXR0b25cbiAgICAgICAgICAgICAgdHlwZT1cImNvZGVcIlxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvcldpZGdldHMubWFya2Rvd24uY29kZScpfVxuICAgICAgICAgICAgICBpY29uPVwiY29kZVwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlTWFya0NsaWNrfVxuICAgICAgICAgICAgICBpc0FjdGl2ZT17aGFzTWFyaygnY29kZScpfVxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgICAge2lzVmlzaWJsZSgnbGluaycpICYmIChcbiAgICAgICAgICAgIDxUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9XCJsaW5rXCJcbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLm1hcmtkb3duLmxpbmsnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImxpbmtcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXtvbkxpbmtDbGlja31cbiAgICAgICAgICAgICAgaXNBY3RpdmU9e2hhc0lubGluZSgnbGluaycpfVxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgICAgey8qIFNob3cgZHJvcGRvd24gaWYgYXQgbGVhc3Qgb25lIGhlYWRpbmcgaXMgbm90IGhpZGRlbiAqL31cbiAgICAgICAgICB7T2JqZWN0LmtleXMoaGVhZGluZ09wdGlvbnMpLnNvbWUoaXNWaXNpYmxlKSAmJiAoXG4gICAgICAgICAgICA8VG9vbGJhckRyb3Bkb3duV3JhcHBlcj5cbiAgICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIm1heC1jb250ZW50XCJcbiAgICAgICAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCIzNnB4XCJcbiAgICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPFRvb2xiYXJCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiaGVhZGluZ3NcIlxuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yV2lkZ2V0cy5tYXJrZG93bi5oZWFkaW5ncycpfVxuICAgICAgICAgICAgICAgICAgICAgIGljb249XCJoT3B0aW9uc1wiXG4gICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlPXshZGlzYWJsZWQgJiYgT2JqZWN0LmtleXMoaGVhZGluZ09wdGlvbnMpLnNvbWUoaGFzQmxvY2spfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPC9Ecm9wZG93bkJ1dHRvbj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgeyFkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoaGVhZGluZ09wdGlvbnMpLm1hcChcbiAgICAgICAgICAgICAgICAgICAgKG9wdGlvbktleSwgaWR4KSA9PlxuICAgICAgICAgICAgICAgICAgICAgIGlzVmlzaWJsZShvcHRpb25LZXkpICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpZHh9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtoZWFkaW5nT3B0aW9uc1tvcHRpb25LZXldfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2hhc0Jsb2NrKG9wdGlvbktleSkgPyAnYWN0aXZlJyA6ICcnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLmhhbmRsZUJsb2NrQ2xpY2sobnVsbCwgb3B0aW9uS2V5KX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bldyYXBwZXI+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7aXNWaXNpYmxlKCdxdW90ZScpICYmIChcbiAgICAgICAgICAgIDxUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9XCJxdW90ZVwiXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yV2lkZ2V0cy5tYXJrZG93bi5xdW90ZScpfVxuICAgICAgICAgICAgICBpY29uPVwicXVvdGVcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUJsb2NrQ2xpY2t9XG4gICAgICAgICAgICAgIGlzQWN0aXZlPXtoYXNRdW90ZSgncXVvdGUnKX1cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAgIHtpc1Zpc2libGUoJ2J1bGxldGVkLWxpc3QnKSAmJiAoXG4gICAgICAgICAgICA8VG9vbGJhckJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPVwiYnVsbGV0ZWQtbGlzdFwiXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yV2lkZ2V0cy5tYXJrZG93bi5idWxsZXRlZExpc3QnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImxpc3QtYnVsbGV0ZWRcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUJsb2NrQ2xpY2t9XG4gICAgICAgICAgICAgIGlzQWN0aXZlPXtoYXNMaXN0SXRlbXMoJ2J1bGxldGVkLWxpc3QnKX1cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAgIHtpc1Zpc2libGUoJ251bWJlcmVkLWxpc3QnKSAmJiAoXG4gICAgICAgICAgICA8VG9vbGJhckJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyZWQtbGlzdFwiXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yV2lkZ2V0cy5tYXJrZG93bi5udW1iZXJlZExpc3QnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImxpc3QtbnVtYmVyZWRcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUJsb2NrQ2xpY2t9XG4gICAgICAgICAgICAgIGlzQWN0aXZlPXtoYXNMaXN0SXRlbXMoJ251bWJlcmVkLWxpc3QnKX1cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAgIHtzaG93RWRpdG9yQ29tcG9uZW50cyAmJiAoXG4gICAgICAgICAgICA8VG9vbGJhckRyb3Bkb3duV3JhcHBlcj5cbiAgICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiMzZweFwiXG4gICAgICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIm1heC1jb250ZW50XCJcbiAgICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPFRvb2xiYXJCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvcldpZGdldHMubWFya2Rvd24uYWRkQ29tcG9uZW50Jyl9XG4gICAgICAgICAgICAgICAgICAgICAgaWNvbj1cImFkZC13aXRoXCJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNvbXBvbmVudHNNZW51VG9nZ2xlfVxuICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvRHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtwbHVnaW5zTGlzdC5tYXAoKHBsdWdpbiwgaWR4KSA9PiAoXG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtIGtleT17aWR4fSBsYWJlbD17cGx1Z2luLmxhYmVsfSBvbkNsaWNrPXsoKSA9PiBvblN1Ym1pdChwbHVnaW4pfSAvPlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd25XcmFwcGVyPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7aXNTaG93TW9kZVRvZ2dsZSAmJiAoXG4gICAgICAgICAgPFRvb2xiYXJUb2dnbGU+XG4gICAgICAgICAgICA8VG9vbGJhclRvZ2dsZUxhYmVsIGlzQWN0aXZlPXshcmF3TW9kZX0gb2ZmUG9zaXRpb24+XG4gICAgICAgICAgICAgIHt0KCdlZGl0b3IuZWRpdG9yV2lkZ2V0cy5tYXJrZG93bi5yaWNoVGV4dCcpfVxuICAgICAgICAgICAgPC9Ub29sYmFyVG9nZ2xlTGFiZWw+XG4gICAgICAgICAgICA8U3R5bGVkVG9nZ2xlIGFjdGl2ZT17cmF3TW9kZX0gb25DaGFuZ2U9e29uVG9nZ2xlTW9kZX0gLz5cbiAgICAgICAgICAgIDxUb29sYmFyVG9nZ2xlTGFiZWwgaXNBY3RpdmU9e3Jhd01vZGV9PlxuICAgICAgICAgICAgICB7dCgnZWRpdG9yLmVkaXRvcldpZGdldHMubWFya2Rvd24ubWFya2Rvd24nKX1cbiAgICAgICAgICAgIDwvVG9vbGJhclRvZ2dsZUxhYmVsPlxuICAgICAgICAgIDwvVG9vbGJhclRvZ2dsZT5cbiAgICAgICAgKX1cbiAgICAgIDwvVG9vbGJhckNvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG4iXX0= */")), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
class Toolbar extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "isVisible", button => {
      const {
        buttons
      } = this.props;
      return !_immutable.List.isList(buttons) || buttons.includes(button);
    });
    _defineProperty(this, "handleBlockClick", (event, type) => {
      if (event) {
        event.preventDefault();
      }
      this.props.onBlockClick(type);
    });
    _defineProperty(this, "handleMarkClick", (event, type) => {
      event.preventDefault();
      this.props.onMarkClick(type);
    });
  }
  render() {
    const {
      onLinkClick,
      onToggleMode,
      rawMode,
      isShowModeToggle,
      plugins,
      disabled,
      onSubmit,
      hasMark = () => {},
      hasInline = () => {},
      hasBlock = () => {},
      hasQuote = () => {},
      hasListItems = () => {},
      editorComponents,
      t
    } = this.props;
    const isVisible = this.isVisible;
    const showEditorComponents = !editorComponents || editorComponents.size >= 1;
    function showPlugin({
      id
    }) {
      return editorComponents ? editorComponents.includes(id) : true;
    }
    const pluginsList = plugins ? plugins.toList().filter(showPlugin) : (0, _immutable.List)();
    const headingOptions = {
      'heading-one': t('editor.editorWidgets.headingOptions.headingOne'),
      'heading-two': t('editor.editorWidgets.headingOptions.headingTwo'),
      'heading-three': t('editor.editorWidgets.headingOptions.headingThree'),
      'heading-four': t('editor.editorWidgets.headingOptions.headingFour'),
      'heading-five': t('editor.editorWidgets.headingOptions.headingFive'),
      'heading-six': t('editor.editorWidgets.headingOptions.headingSix')
    };
    return (0, _react2.jsx)(ToolbarContainer, null, (0, _react2.jsx)("div", null, isVisible('bold') && (0, _react2.jsx)(_ToolbarButton.default, {
      type: "bold",
      label: t('editor.editorWidgets.markdown.bold'),
      icon: "bold",
      onClick: this.handleMarkClick,
      isActive: hasMark('bold'),
      disabled: disabled
    }), isVisible('italic') && (0, _react2.jsx)(_ToolbarButton.default, {
      type: "italic",
      label: t('editor.editorWidgets.markdown.italic'),
      icon: "italic",
      onClick: this.handleMarkClick,
      isActive: hasMark('italic'),
      disabled: disabled
    }), isVisible('code') && (0, _react2.jsx)(_ToolbarButton.default, {
      type: "code",
      label: t('editor.editorWidgets.markdown.code'),
      icon: "code",
      onClick: this.handleMarkClick,
      isActive: hasMark('code'),
      disabled: disabled
    }), isVisible('link') && (0, _react2.jsx)(_ToolbarButton.default, {
      type: "link",
      label: t('editor.editorWidgets.markdown.link'),
      icon: "link",
      onClick: onLinkClick,
      isActive: hasInline('link'),
      disabled: disabled
    }), Object.keys(headingOptions).some(isVisible) && (0, _react2.jsx)(ToolbarDropdownWrapper, null, (0, _react2.jsx)(_decapCmsUiDefault.Dropdown, {
      dropdownWidth: "max-content",
      dropdownTopOverlap: "36px",
      renderButton: () => (0, _react2.jsx)(_decapCmsUiDefault.DropdownButton, null, (0, _react2.jsx)(_ToolbarButton.default, {
        type: "headings",
        label: t('editor.editorWidgets.markdown.headings'),
        icon: "hOptions",
        disabled: disabled,
        isActive: !disabled && Object.keys(headingOptions).some(hasBlock)
      }))
    }, !disabled && Object.keys(headingOptions).map((optionKey, idx) => isVisible(optionKey) && (0, _react2.jsx)(_decapCmsUiDefault.DropdownItem, {
      key: idx,
      label: headingOptions[optionKey],
      className: hasBlock(optionKey) ? 'active' : '',
      onClick: () => this.handleBlockClick(null, optionKey)
    })))), isVisible('quote') && (0, _react2.jsx)(_ToolbarButton.default, {
      type: "quote",
      label: t('editor.editorWidgets.markdown.quote'),
      icon: "quote",
      onClick: this.handleBlockClick,
      isActive: hasQuote('quote'),
      disabled: disabled
    }), isVisible('bulleted-list') && (0, _react2.jsx)(_ToolbarButton.default, {
      type: "bulleted-list",
      label: t('editor.editorWidgets.markdown.bulletedList'),
      icon: "list-bulleted",
      onClick: this.handleBlockClick,
      isActive: hasListItems('bulleted-list'),
      disabled: disabled
    }), isVisible('numbered-list') && (0, _react2.jsx)(_ToolbarButton.default, {
      type: "numbered-list",
      label: t('editor.editorWidgets.markdown.numberedList'),
      icon: "list-numbered",
      onClick: this.handleBlockClick,
      isActive: hasListItems('numbered-list'),
      disabled: disabled
    }), showEditorComponents && (0, _react2.jsx)(ToolbarDropdownWrapper, null, (0, _react2.jsx)(_decapCmsUiDefault.Dropdown, {
      dropdownTopOverlap: "36px",
      dropdownWidth: "max-content",
      renderButton: () => (0, _react2.jsx)(_decapCmsUiDefault.DropdownButton, null, (0, _react2.jsx)(_ToolbarButton.default, {
        label: t('editor.editorWidgets.markdown.addComponent'),
        icon: "add-with",
        onClick: this.handleComponentsMenuToggle,
        disabled: disabled
      }))
    }, pluginsList.map((plugin, idx) => (0, _react2.jsx)(_decapCmsUiDefault.DropdownItem, {
      key: idx,
      label: plugin.label,
      onClick: () => onSubmit(plugin)
    }))))), isShowModeToggle && (0, _react2.jsx)(ToolbarToggle, null, (0, _react2.jsx)(ToolbarToggleLabel, {
      isActive: !rawMode,
      offPosition: true
    }, t('editor.editorWidgets.markdown.richText')), (0, _react2.jsx)(StyledToggle, {
      active: rawMode,
      onChange: onToggleMode
    }), (0, _react2.jsx)(ToolbarToggleLabel, {
      isActive: rawMode
    }, t('editor.editorWidgets.markdown.markdown'))));
  }
}
exports.default = Toolbar;
_defineProperty(Toolbar, "propTypes", {
  buttons: _reactImmutableProptypes.default.list,
  editorComponents: _reactImmutableProptypes.default.list,
  onToggleMode: _propTypes.default.func.isRequired,
  rawMode: _propTypes.default.bool,
  isShowModeToggle: _propTypes.default.bool.isRequired,
  plugins: _reactImmutableProptypes.default.map,
  onSubmit: _propTypes.default.func,
  onAddAsset: _propTypes.default.func,
  getAsset: _propTypes.default.func,
  disabled: _propTypes.default.bool,
  onMarkClick: _propTypes.default.func,
  onBlockClick: _propTypes.default.func,
  onLinkClick: _propTypes.default.func,
  hasMark: _propTypes.default.func,
  hasInline: _propTypes.default.func,
  hasBlock: _propTypes.default.func,
  t: _propTypes.default.func.isRequired
});