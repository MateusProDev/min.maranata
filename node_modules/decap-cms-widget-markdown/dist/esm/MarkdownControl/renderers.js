"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Element = Element;
exports.Leaf = Leaf;
exports.renderInline__DEPRECATED = renderInline__DEPRECATED;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@emotion/react");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _slateReact = require("slate-react");
var _VoidBlock = _interopRequireDefault(require("./components/VoidBlock"));
var _Shortcode = _interopRequireDefault(require("./components/Shortcode"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; } /* eslint-disable react/display-name */
const bottomMargin = '16px';
const headerStyles = `
  font-weight: 700;
  line-height: 1;
`;
const StyledH1 = /*#__PURE__*/(0, _base.default)("h1", {
  target: "evlbpgx13",
  label: "StyledH1"
})(headerStyles, ";font-size:32px;margin-top:16px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH2 = /*#__PURE__*/(0, _base.default)("h2", {
  target: "evlbpgx12",
  label: "StyledH2"
})(headerStyles, ";font-size:24px;margin-top:12px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NYXJrZG93bkNvbnRyb2wvcmVuZGVyZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVCMEIiLCJmaWxlIjoiLi4vLi4vLi4vc3JjL01hcmtkb3duQ29udHJvbC9yZW5kZXJlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9kaXNwbGF5LW5hbWUgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjb2xvcnMsIGxlbmd0aHMgfSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RlZCB9IGZyb20gJ3NsYXRlLXJlYWN0JztcblxuaW1wb3J0IFZvaWRCbG9jayBmcm9tICcuL2NvbXBvbmVudHMvVm9pZEJsb2NrJztcbmltcG9ydCBTaG9ydGNvZGUgZnJvbSAnLi9jb21wb25lbnRzL1Nob3J0Y29kZSc7XG5cbmNvbnN0IGJvdHRvbU1hcmdpbiA9ICcxNnB4JztcblxuY29uc3QgaGVhZGVyU3R5bGVzID0gYFxuICBmb250LXdlaWdodDogNzAwO1xuICBsaW5lLWhlaWdodDogMTtcbmA7XG5cbmNvbnN0IFN0eWxlZEgxID0gc3R5bGVkLmgxYFxuICAke2hlYWRlclN0eWxlc307XG4gIGZvbnQtc2l6ZTogMzJweDtcbiAgbWFyZ2luLXRvcDogMTZweDtcbmA7XG5cbmNvbnN0IFN0eWxlZEgyID0gc3R5bGVkLmgyYFxuICAke2hlYWRlclN0eWxlc307XG4gIGZvbnQtc2l6ZTogMjRweDtcbiAgbWFyZ2luLXRvcDogMTJweDtcbmA7XG5cbmNvbnN0IFN0eWxlZEgzID0gc3R5bGVkLmgzYFxuICAke2hlYWRlclN0eWxlc307XG4gIGZvbnQtc2l6ZTogMjBweDtcbmA7XG5cbmNvbnN0IFN0eWxlZEg0ID0gc3R5bGVkLmg0YFxuICAke2hlYWRlclN0eWxlc307XG4gIGZvbnQtc2l6ZTogMThweDtcbiAgbWFyZ2luLXRvcDogOHB4O1xuYDtcblxuY29uc3QgU3R5bGVkSDUgPSBzdHlsZWQuaDVgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBtYXJnaW4tdG9wOiA4cHg7XG5gO1xuXG5jb25zdCBTdHlsZWRINiA9IFN0eWxlZEg1LndpdGhDb21wb25lbnQoJ2g2Jyk7XG5cbmNvbnN0IFN0eWxlZFAgPSBzdHlsZWQucGBcbiAgbWFyZ2luLWJvdHRvbTogJHtib3R0b21NYXJnaW59O1xuYDtcblxuY29uc3QgU3R5bGVkQmxvY2tRdW90ZSA9IHN0eWxlZC5ibG9ja3F1b3RlYFxuICBwYWRkaW5nLWxlZnQ6IDE2cHg7XG4gIGJvcmRlci1sZWZ0OiAzcHggc29saWQgJHtjb2xvcnMuYmFja2dyb3VuZH07XG4gIG1hcmdpbi1sZWZ0OiAwO1xuICBtYXJnaW4tcmlnaHQ6IDA7XG4gIG1hcmdpbi1ib3R0b206ICR7Ym90dG9tTWFyZ2lufTtcbmA7XG5cbmNvbnN0IFN0eWxlZENvZGUgPSBzdHlsZWQuY29kZWBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuYmFja2dyb3VuZH07XG4gIGJvcmRlci1yYWRpdXM6ICR7bGVuZ3Rocy5ib3JkZXJSYWRpdXN9O1xuICBwYWRkaW5nOiAwIDJweDtcbiAgZm9udC1zaXplOiA4NSU7XG5gO1xuXG5jb25zdCBTdHlsZWRVbCA9IHN0eWxlZC51bGBcbiAgbWFyZ2luLWJvdHRvbTogJHtib3R0b21NYXJnaW59O1xuICBwYWRkaW5nLWxlZnQ6IDMwcHg7XG5gO1xuXG5jb25zdCBTdHlsZWRPbCA9IFN0eWxlZFVsLndpdGhDb21wb25lbnQoJ29sJyk7XG5cbmNvbnN0IFN0eWxlZExpID0gc3R5bGVkLmxpYFxuICAmID4gcDpmaXJzdC1vZi10eXBlIHtcbiAgICBtYXJnaW4tdG9wOiA4cHg7XG4gIH1cblxuICAmID4gcDpsYXN0LW9mLXR5cGUge1xuICAgIG1hcmdpbi1ib3R0b206IDhweDtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkQSA9IHN0eWxlZC5hYFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgZm9udC1zaXplOiBpbmhlcml0O1xuYDtcblxuY29uc3QgU3R5bGVkSHIgPSBzdHlsZWQuaHJgXG4gIGJvcmRlcjogMXB4IHNvbGlkO1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuYDtcblxuY29uc3QgU3R5bGVkVGFibGUgPSBzdHlsZWQudGFibGVgXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG5gO1xuXG5jb25zdCBTdHlsZWRUZCA9IHN0eWxlZC50ZGBcbiAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XG4gIHBhZGRpbmc6IDhweDtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbmA7XG5cbi8qKlxuICogU2xhdGUgdXNlcyBSZWFjdCBjb21wb25lbnRzIHRvIHJlbmRlciBlYWNoIHR5cGUgb2Ygbm9kZSB0aGF0IGl0IHJlY2VpdmVzLlxuICogVGhpcyBpcyB0aGUgY2xvc2VzdCB0aGluZyBTbGF0ZSBoYXMgdG8gYSBzY2hlbWEgZGVmaW5pdGlvbi4gVGhlIHR5cGVzIGFyZSBzZXRcbiAqIGJ5IHVzIHdoZW4gd2UgbWFudWFsbHkgZGVzZXJpYWxpemUgZnJvbSBSZW1hcmsncyBNREFTVCB0byBTbGF0ZSdzIEFTVC5cbiAqL1xuXG4vKipcbiAqIE1hcmsgQ29tcG9uZW50c1xuICovXG5mdW5jdGlvbiBCb2xkKHByb3BzKSB7XG4gIHJldHVybiA8c3Ryb25nPntwcm9wcy5jaGlsZHJlbn08L3N0cm9uZz47XG59XG5cbmZ1bmN0aW9uIEl0YWxpYyhwcm9wcykge1xuICByZXR1cm4gPGVtPntwcm9wcy5jaGlsZHJlbn08L2VtPjtcbn1cblxuZnVuY3Rpb24gU3RyaWtldGhyb3VnaChwcm9wcykge1xuICByZXR1cm4gPHM+e3Byb3BzLmNoaWxkcmVufTwvcz47XG59XG5cbmZ1bmN0aW9uIENvZGUocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRDb2RlPntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZENvZGU+O1xufVxuXG4vKipcbiAqIE5vZGUgQ29tcG9uZW50c1xuICovXG5mdW5jdGlvbiBQYXJhZ3JhcGgocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRQIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRQPjtcbn1cblxuZnVuY3Rpb24gTGlzdEl0ZW0ocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRMaSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkTGk+O1xufVxuXG5mdW5jdGlvbiBRdW90ZShwcm9wcykge1xuICByZXR1cm4gPFN0eWxlZEJsb2NrUXVvdGUgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEJsb2NrUXVvdGU+O1xufVxuXG5mdW5jdGlvbiBIZWFkaW5nT25lKHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkSDEgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEgxPjtcbn1cblxuZnVuY3Rpb24gSGVhZGluZ1R3byhwcm9wcykge1xuICByZXR1cm4gPFN0eWxlZEgyIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRIMj47XG59XG5cbmZ1bmN0aW9uIEhlYWRpbmdUaHJlZShwcm9wcykge1xuICByZXR1cm4gPFN0eWxlZEgzIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRIMz47XG59XG5cbmZ1bmN0aW9uIEhlYWRpbmdGb3VyKHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkSDQgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEg0Pjtcbn1cblxuZnVuY3Rpb24gSGVhZGluZ0ZpdmUocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRINSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkSDU+O1xufVxuXG5mdW5jdGlvbiBIZWFkaW5nU2l4KHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkSDYgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEg2Pjtcbn1cblxuZnVuY3Rpb24gVGFibGUocHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkVGFibGU+XG4gICAgICA8dGJvZHkgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L3Rib2R5PlxuICAgIDwvU3R5bGVkVGFibGU+XG4gICk7XG59XG5cbmZ1bmN0aW9uIFRhYmxlUm93KHByb3BzKSB7XG4gIHJldHVybiA8dHIgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L3RyPjtcbn1cblxuZnVuY3Rpb24gVGFibGVDZWxsKHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkVGQgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZFRkPjtcbn1cblxuZnVuY3Rpb24gVGhlbWF0aWNCcmVhayhwcm9wcykge1xuICBjb25zdCBpc1NlbGVjdGVkID0gdXNlU2VsZWN0ZWQoKTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgIDxkaXYgY29udGVudEVkaXRhYmxlPXtmYWxzZX0+XG4gICAgICAgIDxTdHlsZWRIclxuICAgICAgICAgIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfVxuICAgICAgICAgIGNzcz17XG4gICAgICAgICAgICBpc1NlbGVjdGVkICYmXG4gICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDJweCAke2NvbG9ycy5hY3RpdmV9O1xuICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICAgICAgICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICAgICAgICAgICAgYFxuICAgICAgICAgIH1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5mdW5jdGlvbiBCcmVhayhwcm9wcykge1xuICByZXR1cm4gPGJyIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfSAvPjtcbn1cblxuZnVuY3Rpb24gQnVsbGV0ZWRMaXN0KHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkVWwgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZFVsPjtcbn1cblxuZnVuY3Rpb24gTnVtYmVyZWRMaXN0KHByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPFN0eWxlZE9sIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfSBzdGFydD17MX0+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9TdHlsZWRPbD5cbiAgKTtcbn1cblxuZnVuY3Rpb24gTGluayhwcm9wcykge1xuICBjb25zdCB1cmwgPSBwcm9wcy51cmw7XG4gIGNvbnN0IHRpdGxlID0gcHJvcHMudGl0bGUgfHwgdXJsO1xuXG4gIHJldHVybiAoXG4gICAgPFN0eWxlZEEgaHJlZj17dXJsfSB0aXRsZT17dGl0bGV9IHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICA8L1N0eWxlZEE+XG4gICk7XG59XG5cbmZ1bmN0aW9uIEltYWdlKHByb3BzKSB7XG4gIGNvbnN0IHsgdXJsLCB0aXRsZSwgYWx0IH0gPSBwcm9wcy5lbGVtZW50LmRhdGE7XG4gIGNvbnN0IGlzU2VsZWN0ZWQgPSB1c2VTZWxlY3RlZCgpO1xuICByZXR1cm4gKFxuICAgIDxzcGFuIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgIDxpbWdcbiAgICAgICAgc3JjPXt1cmx9XG4gICAgICAgIHRpdGxlPXt0aXRsZX1cbiAgICAgICAgYWx0PXthbHR9XG4gICAgICAgIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfVxuICAgICAgICBjc3M9e1xuICAgICAgICAgIGlzU2VsZWN0ZWQgJiZcbiAgICAgICAgICBjc3NgXG4gICAgICAgICAgICBib3gtc2hhZG93OiAwIDAgMCAycHggJHtjb2xvcnMuYWN0aXZlfTtcbiAgICAgICAgICBgXG4gICAgICAgIH1cbiAgICAgIC8+XG4gICAgPC9zcGFuPlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGVhZih7IGF0dHJpYnV0ZXMsIGNoaWxkcmVuLCBsZWFmIH0pIHtcbiAgaWYgKGxlYWYuYm9sZCkge1xuICAgIGNoaWxkcmVuID0gPEJvbGQ+e2NoaWxkcmVufTwvQm9sZD47XG4gIH1cblxuICBpZiAobGVhZi5pdGFsaWMpIHtcbiAgICBjaGlsZHJlbiA9IDxJdGFsaWM+e2NoaWxkcmVufTwvSXRhbGljPjtcbiAgfVxuXG4gIGlmIChsZWFmLmRlbGV0ZSkge1xuICAgIGNoaWxkcmVuID0gPFN0cmlrZXRocm91Z2g+e2NoaWxkcmVufTwvU3RyaWtldGhyb3VnaD47XG4gIH1cblxuICBpZiAobGVhZi5jb2RlKSB7XG4gICAgY2hpbGRyZW4gPSA8Q29kZT57Y2hpbGRyZW59PC9Db2RlPjtcbiAgfVxuXG4gIC8vIGlmIChsZWFmLmJyZWFrKSB7XG4gIC8vICAgY2hpbGRyZW4gPSA8QnJlYWsgLz47XG4gIC8vIH1cblxuICByZXR1cm4gPHNwYW4gey4uLmF0dHJpYnV0ZXN9PntjaGlsZHJlbn08L3NwYW4+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVySW5saW5lX19ERVBSRUNBVEVEKCkge1xuICByZXR1cm4gcHJvcHMgPT4ge1xuICAgIHN3aXRjaCAocHJvcHMubm9kZS50eXBlKSB7XG4gICAgICBjYXNlICdsaW5rJzpcbiAgICAgICAgcmV0dXJuIDxMaW5rIHsuLi5wcm9wc30gLz47XG4gICAgICBjYXNlICdpbWFnZSc6XG4gICAgICAgIHJldHVybiA8SW1hZ2Ugey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgJ2JyZWFrJzpcbiAgICAgICAgcmV0dXJuIDxCcmVhayB7Li4ucHJvcHN9IC8+O1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVsZW1lbnQocHJvcHMpIHtcbiAgY29uc3QgeyBjaGlsZHJlbiwgZWxlbWVudCwgY2xhc3NOYW1lV3JhcHBlciwgY29kZUJsb2NrQ29tcG9uZW50IH0gPSBwcm9wcztcbiAgY29uc3Qgc3R5bGUgPSB7IHRleHRBbGlnbjogZWxlbWVudC5hbGlnbiB9O1xuXG4gIHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG4gICAgY2FzZSAnYnVsbGV0ZWQtbGlzdCc6XG4gICAgICByZXR1cm4gPEJ1bGxldGVkTGlzdD57Y2hpbGRyZW59PC9CdWxsZXRlZExpc3Q+O1xuICAgIGNhc2UgJ3F1b3RlJzpcbiAgICAgIHJldHVybiA8UXVvdGU+e2NoaWxkcmVufTwvUXVvdGU+O1xuICAgIGNhc2UgJ2hlYWRpbmctb25lJzpcbiAgICAgIHJldHVybiA8SGVhZGluZ09uZT57Y2hpbGRyZW59PC9IZWFkaW5nT25lPjtcbiAgICBjYXNlICdoZWFkaW5nLXR3byc6XG4gICAgICByZXR1cm4gPEhlYWRpbmdUd28+e2NoaWxkcmVufTwvSGVhZGluZ1R3bz47XG4gICAgY2FzZSAnaGVhZGluZy10aHJlZSc6XG4gICAgICByZXR1cm4gPEhlYWRpbmdUaHJlZT57Y2hpbGRyZW59PC9IZWFkaW5nVGhyZWU+O1xuICAgIGNhc2UgJ2hlYWRpbmctZm91cic6XG4gICAgICByZXR1cm4gPEhlYWRpbmdGb3VyPntjaGlsZHJlbn08L0hlYWRpbmdGb3VyPjtcbiAgICBjYXNlICdoZWFkaW5nLWZpdmUnOlxuICAgICAgcmV0dXJuIDxIZWFkaW5nRml2ZT57Y2hpbGRyZW59PC9IZWFkaW5nRml2ZT47XG4gICAgY2FzZSAnaGVhZGluZy1zaXgnOlxuICAgICAgcmV0dXJuIDxIZWFkaW5nU2l4PntjaGlsZHJlbn08L0hlYWRpbmdTaXg+O1xuICAgIGNhc2UgJ2xpc3QtaXRlbSc6XG4gICAgICByZXR1cm4gPExpc3RJdGVtPntjaGlsZHJlbn08L0xpc3RJdGVtPjtcbiAgICBjYXNlICdudW1iZXJlZC1saXN0JzpcbiAgICAgIHJldHVybiA8TnVtYmVyZWRMaXN0PntjaGlsZHJlbn08L051bWJlcmVkTGlzdD47XG4gICAgY2FzZSAndGFibGUnOlxuICAgICAgcmV0dXJuIDxUYWJsZSB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ3RhYmxlLXJvdyc6XG4gICAgICByZXR1cm4gPFRhYmxlUm93IHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAndGFibGUtY2VsbCc6XG4gICAgICByZXR1cm4gPFRhYmxlQ2VsbCB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ3RoZW1hdGljLWJyZWFrJzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxWb2lkQmxvY2sgey4uLnByb3BzfT5cbiAgICAgICAgICA8VGhlbWF0aWNCcmVhayB7Li4ucHJvcHN9IC8+XG4gICAgICAgIDwvVm9pZEJsb2NrPlxuICAgICAgKTtcbiAgICBjYXNlICdsaW5rJzpcbiAgICAgIHJldHVybiA8TGluayB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ2ltYWdlJzpcbiAgICAgIHJldHVybiA8SW1hZ2Ugey4uLnByb3BzfSAvPjtcbiAgICBjYXNlICdicmVhayc6XG4gICAgICByZXR1cm4gPEJyZWFrIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAnc2hvcnRjb2RlJzpcbiAgICAgIGlmIChlbGVtZW50LmlkID09PSAnY29kZS1ibG9jaycgJiYgY29kZUJsb2NrQ29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPFZvaWRCbG9jayB7Li4ucHJvcHN9PlxuICAgICAgICAgICAgPFNob3J0Y29kZSBjbGFzc05hbWVXcmFwcGVyPXtjbGFzc05hbWVXcmFwcGVyfSB0eXBlT3ZlcmxvYWQ9XCJjb2RlLWJsb2NrXCIgey4uLnByb3BzfSAvPlxuICAgICAgICAgIDwvVm9pZEJsb2NrPlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFZvaWRCbG9jayB7Li4ucHJvcHN9PlxuICAgICAgICAgIDxTaG9ydGNvZGUgey4uLnByb3BzfT57Y2hpbGRyZW59PC9TaG9ydGNvZGU+XG4gICAgICAgIDwvVm9pZEJsb2NrPlxuICAgICAgKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIDxQYXJhZ3JhcGggc3R5bGU9e3N0eWxlfT57Y2hpbGRyZW59PC9QYXJhZ3JhcGg+O1xuICB9XG59XG4iXX0= */"));
const StyledH3 = /*#__PURE__*/(0, _base.default)("h3", {
  target: "evlbpgx11",
  label: "StyledH3"
})(headerStyles, ";font-size:20px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH4 = /*#__PURE__*/(0, _base.default)("h4", {
  target: "evlbpgx10",
  label: "StyledH4"
})(headerStyles, ";font-size:18px;margin-top:8px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH5 = /*#__PURE__*/(0, _base.default)("h5", {
  target: "evlbpgx9",
  label: "StyledH5"
})(headerStyles, ";font-size:16px;margin-top:8px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH6 = StyledH5.withComponent('h6', {
  target: "evlbpgx14",
  label: "StyledH6"
});
const StyledP = /*#__PURE__*/(0, _base.default)("p", {
  target: "evlbpgx8",
  label: "StyledP"
})("margin-bottom:", bottomMargin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledBlockQuote = /*#__PURE__*/(0, _base.default)("blockquote", {
  target: "evlbpgx7",
  label: "StyledBlockQuote"
})("padding-left:16px;border-left:3px solid ", _decapCmsUiDefault.colors.background, ";margin-left:0;margin-right:0;margin-bottom:", bottomMargin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NYXJrZG93bkNvbnRyb2wvcmVuZGVyZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9EMEMiLCJmaWxlIjoiLi4vLi4vLi4vc3JjL01hcmtkb3duQ29udHJvbC9yZW5kZXJlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9kaXNwbGF5LW5hbWUgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjb2xvcnMsIGxlbmd0aHMgfSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RlZCB9IGZyb20gJ3NsYXRlLXJlYWN0JztcblxuaW1wb3J0IFZvaWRCbG9jayBmcm9tICcuL2NvbXBvbmVudHMvVm9pZEJsb2NrJztcbmltcG9ydCBTaG9ydGNvZGUgZnJvbSAnLi9jb21wb25lbnRzL1Nob3J0Y29kZSc7XG5cbmNvbnN0IGJvdHRvbU1hcmdpbiA9ICcxNnB4JztcblxuY29uc3QgaGVhZGVyU3R5bGVzID0gYFxuICBmb250LXdlaWdodDogNzAwO1xuICBsaW5lLWhlaWdodDogMTtcbmA7XG5cbmNvbnN0IFN0eWxlZEgxID0gc3R5bGVkLmgxYFxuICAke2hlYWRlclN0eWxlc307XG4gIGZvbnQtc2l6ZTogMzJweDtcbiAgbWFyZ2luLXRvcDogMTZweDtcbmA7XG5cbmNvbnN0IFN0eWxlZEgyID0gc3R5bGVkLmgyYFxuICAke2hlYWRlclN0eWxlc307XG4gIGZvbnQtc2l6ZTogMjRweDtcbiAgbWFyZ2luLXRvcDogMTJweDtcbmA7XG5cbmNvbnN0IFN0eWxlZEgzID0gc3R5bGVkLmgzYFxuICAke2hlYWRlclN0eWxlc307XG4gIGZvbnQtc2l6ZTogMjBweDtcbmA7XG5cbmNvbnN0IFN0eWxlZEg0ID0gc3R5bGVkLmg0YFxuICAke2hlYWRlclN0eWxlc307XG4gIGZvbnQtc2l6ZTogMThweDtcbiAgbWFyZ2luLXRvcDogOHB4O1xuYDtcblxuY29uc3QgU3R5bGVkSDUgPSBzdHlsZWQuaDVgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBtYXJnaW4tdG9wOiA4cHg7XG5gO1xuXG5jb25zdCBTdHlsZWRINiA9IFN0eWxlZEg1LndpdGhDb21wb25lbnQoJ2g2Jyk7XG5cbmNvbnN0IFN0eWxlZFAgPSBzdHlsZWQucGBcbiAgbWFyZ2luLWJvdHRvbTogJHtib3R0b21NYXJnaW59O1xuYDtcblxuY29uc3QgU3R5bGVkQmxvY2tRdW90ZSA9IHN0eWxlZC5ibG9ja3F1b3RlYFxuICBwYWRkaW5nLWxlZnQ6IDE2cHg7XG4gIGJvcmRlci1sZWZ0OiAzcHggc29saWQgJHtjb2xvcnMuYmFja2dyb3VuZH07XG4gIG1hcmdpbi1sZWZ0OiAwO1xuICBtYXJnaW4tcmlnaHQ6IDA7XG4gIG1hcmdpbi1ib3R0b206ICR7Ym90dG9tTWFyZ2lufTtcbmA7XG5cbmNvbnN0IFN0eWxlZENvZGUgPSBzdHlsZWQuY29kZWBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuYmFja2dyb3VuZH07XG4gIGJvcmRlci1yYWRpdXM6ICR7bGVuZ3Rocy5ib3JkZXJSYWRpdXN9O1xuICBwYWRkaW5nOiAwIDJweDtcbiAgZm9udC1zaXplOiA4NSU7XG5gO1xuXG5jb25zdCBTdHlsZWRVbCA9IHN0eWxlZC51bGBcbiAgbWFyZ2luLWJvdHRvbTogJHtib3R0b21NYXJnaW59O1xuICBwYWRkaW5nLWxlZnQ6IDMwcHg7XG5gO1xuXG5jb25zdCBTdHlsZWRPbCA9IFN0eWxlZFVsLndpdGhDb21wb25lbnQoJ29sJyk7XG5cbmNvbnN0IFN0eWxlZExpID0gc3R5bGVkLmxpYFxuICAmID4gcDpmaXJzdC1vZi10eXBlIHtcbiAgICBtYXJnaW4tdG9wOiA4cHg7XG4gIH1cblxuICAmID4gcDpsYXN0LW9mLXR5cGUge1xuICAgIG1hcmdpbi1ib3R0b206IDhweDtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkQSA9IHN0eWxlZC5hYFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgZm9udC1zaXplOiBpbmhlcml0O1xuYDtcblxuY29uc3QgU3R5bGVkSHIgPSBzdHlsZWQuaHJgXG4gIGJvcmRlcjogMXB4IHNvbGlkO1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuYDtcblxuY29uc3QgU3R5bGVkVGFibGUgPSBzdHlsZWQudGFibGVgXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG5gO1xuXG5jb25zdCBTdHlsZWRUZCA9IHN0eWxlZC50ZGBcbiAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XG4gIHBhZGRpbmc6IDhweDtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbmA7XG5cbi8qKlxuICogU2xhdGUgdXNlcyBSZWFjdCBjb21wb25lbnRzIHRvIHJlbmRlciBlYWNoIHR5cGUgb2Ygbm9kZSB0aGF0IGl0IHJlY2VpdmVzLlxuICogVGhpcyBpcyB0aGUgY2xvc2VzdCB0aGluZyBTbGF0ZSBoYXMgdG8gYSBzY2hlbWEgZGVmaW5pdGlvbi4gVGhlIHR5cGVzIGFyZSBzZXRcbiAqIGJ5IHVzIHdoZW4gd2UgbWFudWFsbHkgZGVzZXJpYWxpemUgZnJvbSBSZW1hcmsncyBNREFTVCB0byBTbGF0ZSdzIEFTVC5cbiAqL1xuXG4vKipcbiAqIE1hcmsgQ29tcG9uZW50c1xuICovXG5mdW5jdGlvbiBCb2xkKHByb3BzKSB7XG4gIHJldHVybiA8c3Ryb25nPntwcm9wcy5jaGlsZHJlbn08L3N0cm9uZz47XG59XG5cbmZ1bmN0aW9uIEl0YWxpYyhwcm9wcykge1xuICByZXR1cm4gPGVtPntwcm9wcy5jaGlsZHJlbn08L2VtPjtcbn1cblxuZnVuY3Rpb24gU3RyaWtldGhyb3VnaChwcm9wcykge1xuICByZXR1cm4gPHM+e3Byb3BzLmNoaWxkcmVufTwvcz47XG59XG5cbmZ1bmN0aW9uIENvZGUocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRDb2RlPntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZENvZGU+O1xufVxuXG4vKipcbiAqIE5vZGUgQ29tcG9uZW50c1xuICovXG5mdW5jdGlvbiBQYXJhZ3JhcGgocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRQIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRQPjtcbn1cblxuZnVuY3Rpb24gTGlzdEl0ZW0ocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRMaSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkTGk+O1xufVxuXG5mdW5jdGlvbiBRdW90ZShwcm9wcykge1xuICByZXR1cm4gPFN0eWxlZEJsb2NrUXVvdGUgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEJsb2NrUXVvdGU+O1xufVxuXG5mdW5jdGlvbiBIZWFkaW5nT25lKHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkSDEgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEgxPjtcbn1cblxuZnVuY3Rpb24gSGVhZGluZ1R3byhwcm9wcykge1xuICByZXR1cm4gPFN0eWxlZEgyIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRIMj47XG59XG5cbmZ1bmN0aW9uIEhlYWRpbmdUaHJlZShwcm9wcykge1xuICByZXR1cm4gPFN0eWxlZEgzIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRIMz47XG59XG5cbmZ1bmN0aW9uIEhlYWRpbmdGb3VyKHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkSDQgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEg0Pjtcbn1cblxuZnVuY3Rpb24gSGVhZGluZ0ZpdmUocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRINSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkSDU+O1xufVxuXG5mdW5jdGlvbiBIZWFkaW5nU2l4KHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkSDYgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEg2Pjtcbn1cblxuZnVuY3Rpb24gVGFibGUocHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkVGFibGU+XG4gICAgICA8dGJvZHkgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L3Rib2R5PlxuICAgIDwvU3R5bGVkVGFibGU+XG4gICk7XG59XG5cbmZ1bmN0aW9uIFRhYmxlUm93KHByb3BzKSB7XG4gIHJldHVybiA8dHIgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L3RyPjtcbn1cblxuZnVuY3Rpb24gVGFibGVDZWxsKHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkVGQgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZFRkPjtcbn1cblxuZnVuY3Rpb24gVGhlbWF0aWNCcmVhayhwcm9wcykge1xuICBjb25zdCBpc1NlbGVjdGVkID0gdXNlU2VsZWN0ZWQoKTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgIDxkaXYgY29udGVudEVkaXRhYmxlPXtmYWxzZX0+XG4gICAgICAgIDxTdHlsZWRIclxuICAgICAgICAgIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfVxuICAgICAgICAgIGNzcz17XG4gICAgICAgICAgICBpc1NlbGVjdGVkICYmXG4gICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDJweCAke2NvbG9ycy5hY3RpdmV9O1xuICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICAgICAgICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICAgICAgICAgICAgYFxuICAgICAgICAgIH1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5mdW5jdGlvbiBCcmVhayhwcm9wcykge1xuICByZXR1cm4gPGJyIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfSAvPjtcbn1cblxuZnVuY3Rpb24gQnVsbGV0ZWRMaXN0KHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkVWwgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZFVsPjtcbn1cblxuZnVuY3Rpb24gTnVtYmVyZWRMaXN0KHByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPFN0eWxlZE9sIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfSBzdGFydD17MX0+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9TdHlsZWRPbD5cbiAgKTtcbn1cblxuZnVuY3Rpb24gTGluayhwcm9wcykge1xuICBjb25zdCB1cmwgPSBwcm9wcy51cmw7XG4gIGNvbnN0IHRpdGxlID0gcHJvcHMudGl0bGUgfHwgdXJsO1xuXG4gIHJldHVybiAoXG4gICAgPFN0eWxlZEEgaHJlZj17dXJsfSB0aXRsZT17dGl0bGV9IHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICA8L1N0eWxlZEE+XG4gICk7XG59XG5cbmZ1bmN0aW9uIEltYWdlKHByb3BzKSB7XG4gIGNvbnN0IHsgdXJsLCB0aXRsZSwgYWx0IH0gPSBwcm9wcy5lbGVtZW50LmRhdGE7XG4gIGNvbnN0IGlzU2VsZWN0ZWQgPSB1c2VTZWxlY3RlZCgpO1xuICByZXR1cm4gKFxuICAgIDxzcGFuIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgIDxpbWdcbiAgICAgICAgc3JjPXt1cmx9XG4gICAgICAgIHRpdGxlPXt0aXRsZX1cbiAgICAgICAgYWx0PXthbHR9XG4gICAgICAgIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfVxuICAgICAgICBjc3M9e1xuICAgICAgICAgIGlzU2VsZWN0ZWQgJiZcbiAgICAgICAgICBjc3NgXG4gICAgICAgICAgICBib3gtc2hhZG93OiAwIDAgMCAycHggJHtjb2xvcnMuYWN0aXZlfTtcbiAgICAgICAgICBgXG4gICAgICAgIH1cbiAgICAgIC8+XG4gICAgPC9zcGFuPlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGVhZih7IGF0dHJpYnV0ZXMsIGNoaWxkcmVuLCBsZWFmIH0pIHtcbiAgaWYgKGxlYWYuYm9sZCkge1xuICAgIGNoaWxkcmVuID0gPEJvbGQ+e2NoaWxkcmVufTwvQm9sZD47XG4gIH1cblxuICBpZiAobGVhZi5pdGFsaWMpIHtcbiAgICBjaGlsZHJlbiA9IDxJdGFsaWM+e2NoaWxkcmVufTwvSXRhbGljPjtcbiAgfVxuXG4gIGlmIChsZWFmLmRlbGV0ZSkge1xuICAgIGNoaWxkcmVuID0gPFN0cmlrZXRocm91Z2g+e2NoaWxkcmVufTwvU3RyaWtldGhyb3VnaD47XG4gIH1cblxuICBpZiAobGVhZi5jb2RlKSB7XG4gICAgY2hpbGRyZW4gPSA8Q29kZT57Y2hpbGRyZW59PC9Db2RlPjtcbiAgfVxuXG4gIC8vIGlmIChsZWFmLmJyZWFrKSB7XG4gIC8vICAgY2hpbGRyZW4gPSA8QnJlYWsgLz47XG4gIC8vIH1cblxuICByZXR1cm4gPHNwYW4gey4uLmF0dHJpYnV0ZXN9PntjaGlsZHJlbn08L3NwYW4+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVySW5saW5lX19ERVBSRUNBVEVEKCkge1xuICByZXR1cm4gcHJvcHMgPT4ge1xuICAgIHN3aXRjaCAocHJvcHMubm9kZS50eXBlKSB7XG4gICAgICBjYXNlICdsaW5rJzpcbiAgICAgICAgcmV0dXJuIDxMaW5rIHsuLi5wcm9wc30gLz47XG4gICAgICBjYXNlICdpbWFnZSc6XG4gICAgICAgIHJldHVybiA8SW1hZ2Ugey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgJ2JyZWFrJzpcbiAgICAgICAgcmV0dXJuIDxCcmVhayB7Li4ucHJvcHN9IC8+O1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVsZW1lbnQocHJvcHMpIHtcbiAgY29uc3QgeyBjaGlsZHJlbiwgZWxlbWVudCwgY2xhc3NOYW1lV3JhcHBlciwgY29kZUJsb2NrQ29tcG9uZW50IH0gPSBwcm9wcztcbiAgY29uc3Qgc3R5bGUgPSB7IHRleHRBbGlnbjogZWxlbWVudC5hbGlnbiB9O1xuXG4gIHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG4gICAgY2FzZSAnYnVsbGV0ZWQtbGlzdCc6XG4gICAgICByZXR1cm4gPEJ1bGxldGVkTGlzdD57Y2hpbGRyZW59PC9CdWxsZXRlZExpc3Q+O1xuICAgIGNhc2UgJ3F1b3RlJzpcbiAgICAgIHJldHVybiA8UXVvdGU+e2NoaWxkcmVufTwvUXVvdGU+O1xuICAgIGNhc2UgJ2hlYWRpbmctb25lJzpcbiAgICAgIHJldHVybiA8SGVhZGluZ09uZT57Y2hpbGRyZW59PC9IZWFkaW5nT25lPjtcbiAgICBjYXNlICdoZWFkaW5nLXR3byc6XG4gICAgICByZXR1cm4gPEhlYWRpbmdUd28+e2NoaWxkcmVufTwvSGVhZGluZ1R3bz47XG4gICAgY2FzZSAnaGVhZGluZy10aHJlZSc6XG4gICAgICByZXR1cm4gPEhlYWRpbmdUaHJlZT57Y2hpbGRyZW59PC9IZWFkaW5nVGhyZWU+O1xuICAgIGNhc2UgJ2hlYWRpbmctZm91cic6XG4gICAgICByZXR1cm4gPEhlYWRpbmdGb3VyPntjaGlsZHJlbn08L0hlYWRpbmdGb3VyPjtcbiAgICBjYXNlICdoZWFkaW5nLWZpdmUnOlxuICAgICAgcmV0dXJuIDxIZWFkaW5nRml2ZT57Y2hpbGRyZW59PC9IZWFkaW5nRml2ZT47XG4gICAgY2FzZSAnaGVhZGluZy1zaXgnOlxuICAgICAgcmV0dXJuIDxIZWFkaW5nU2l4PntjaGlsZHJlbn08L0hlYWRpbmdTaXg+O1xuICAgIGNhc2UgJ2xpc3QtaXRlbSc6XG4gICAgICByZXR1cm4gPExpc3RJdGVtPntjaGlsZHJlbn08L0xpc3RJdGVtPjtcbiAgICBjYXNlICdudW1iZXJlZC1saXN0JzpcbiAgICAgIHJldHVybiA8TnVtYmVyZWRMaXN0PntjaGlsZHJlbn08L051bWJlcmVkTGlzdD47XG4gICAgY2FzZSAndGFibGUnOlxuICAgICAgcmV0dXJuIDxUYWJsZSB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ3RhYmxlLXJvdyc6XG4gICAgICByZXR1cm4gPFRhYmxlUm93IHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAndGFibGUtY2VsbCc6XG4gICAgICByZXR1cm4gPFRhYmxlQ2VsbCB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ3RoZW1hdGljLWJyZWFrJzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxWb2lkQmxvY2sgey4uLnByb3BzfT5cbiAgICAgICAgICA8VGhlbWF0aWNCcmVhayB7Li4ucHJvcHN9IC8+XG4gICAgICAgIDwvVm9pZEJsb2NrPlxuICAgICAgKTtcbiAgICBjYXNlICdsaW5rJzpcbiAgICAgIHJldHVybiA8TGluayB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ2ltYWdlJzpcbiAgICAgIHJldHVybiA8SW1hZ2Ugey4uLnByb3BzfSAvPjtcbiAgICBjYXNlICdicmVhayc6XG4gICAgICByZXR1cm4gPEJyZWFrIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAnc2hvcnRjb2RlJzpcbiAgICAgIGlmIChlbGVtZW50LmlkID09PSAnY29kZS1ibG9jaycgJiYgY29kZUJsb2NrQ29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPFZvaWRCbG9jayB7Li4ucHJvcHN9PlxuICAgICAgICAgICAgPFNob3J0Y29kZSBjbGFzc05hbWVXcmFwcGVyPXtjbGFzc05hbWVXcmFwcGVyfSB0eXBlT3ZlcmxvYWQ9XCJjb2RlLWJsb2NrXCIgey4uLnByb3BzfSAvPlxuICAgICAgICAgIDwvVm9pZEJsb2NrPlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFZvaWRCbG9jayB7Li4ucHJvcHN9PlxuICAgICAgICAgIDxTaG9ydGNvZGUgey4uLnByb3BzfT57Y2hpbGRyZW59PC9TaG9ydGNvZGU+XG4gICAgICAgIDwvVm9pZEJsb2NrPlxuICAgICAgKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIDxQYXJhZ3JhcGggc3R5bGU9e3N0eWxlfT57Y2hpbGRyZW59PC9QYXJhZ3JhcGg+O1xuICB9XG59XG4iXX0= */"));
const StyledCode = /*#__PURE__*/(0, _base.default)("code", {
  target: "evlbpgx6",
  label: "StyledCode"
})("background-color:", _decapCmsUiDefault.colors.background, ";border-radius:", _decapCmsUiDefault.lengths.borderRadius, ";padding:0 2px;font-size:85%;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledUl = /*#__PURE__*/(0, _base.default)("ul", {
  target: "evlbpgx5",
  label: "StyledUl"
})("margin-bottom:", bottomMargin, ";padding-left:30px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledOl = StyledUl.withComponent('ol', {
  target: "evlbpgx15",
  label: "StyledOl"
});
const StyledLi = /*#__PURE__*/(0, _base.default)("li", {
  target: "evlbpgx4",
  label: "StyledLi"
})(process.env.NODE_ENV === "production" ? {
  name: "1smjpj0",
  styles: "&>p:first-of-type{margin-top:8px;}&>p:last-of-type{margin-bottom:8px;}"
} : {
  name: "1smjpj0",
  styles: "&>p:first-of-type{margin-top:8px;}&>p:last-of-type{margin-bottom:8px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledA = /*#__PURE__*/(0, _base.default)("a", {
  target: "evlbpgx3",
  label: "StyledA"
})(process.env.NODE_ENV === "production" ? {
  name: "11z7vuy",
  styles: "text-decoration:underline;font-size:inherit"
} : {
  name: "11z7vuy",
  styles: "text-decoration:underline;font-size:inherit",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledHr = /*#__PURE__*/(0, _base.default)("hr", {
  target: "evlbpgx2",
  label: "StyledHr"
})(process.env.NODE_ENV === "production" ? {
  name: "1y2p2hw",
  styles: "border:1px solid;margin-bottom:16px"
} : {
  name: "1y2p2hw",
  styles: "border:1px solid;margin-bottom:16px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledTable = /*#__PURE__*/(0, _base.default)("table", {
  target: "evlbpgx1",
  label: "StyledTable"
})(process.env.NODE_ENV === "production" ? {
  name: "tkxk5i",
  styles: "border-collapse:collapse"
} : {
  name: "tkxk5i",
  styles: "border-collapse:collapse",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledTd = /*#__PURE__*/(0, _base.default)("td", {
  target: "evlbpgx0",
  label: "StyledTd"
})(process.env.NODE_ENV === "production" ? {
  name: "zsehaa",
  styles: "border:2px solid black;padding:8px;text-align:left"
} : {
  name: "zsehaa",
  styles: "border:2px solid black;padding:8px;text-align:left",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

/**
 * Slate uses React components to render each type of node that it receives.
 * This is the closest thing Slate has to a schema definition. The types are set
 * by us when we manually deserialize from Remark's MDAST to Slate's AST.
 */

/**
 * Mark Components
 */
function Bold(props) {
  return (0, _react2.jsx)("strong", null, props.children);
}
function Italic(props) {
  return (0, _react2.jsx)("em", null, props.children);
}
function Strikethrough(props) {
  return (0, _react2.jsx)("s", null, props.children);
}
function Code(props) {
  return (0, _react2.jsx)(StyledCode, null, props.children);
}

/**
 * Node Components
 */
function Paragraph(props) {
  return (0, _react2.jsx)(StyledP, props.attributes, props.children);
}
function ListItem(props) {
  return (0, _react2.jsx)(StyledLi, props.attributes, props.children);
}
function Quote(props) {
  return (0, _react2.jsx)(StyledBlockQuote, props.attributes, props.children);
}
function HeadingOne(props) {
  return (0, _react2.jsx)(StyledH1, props.attributes, props.children);
}
function HeadingTwo(props) {
  return (0, _react2.jsx)(StyledH2, props.attributes, props.children);
}
function HeadingThree(props) {
  return (0, _react2.jsx)(StyledH3, props.attributes, props.children);
}
function HeadingFour(props) {
  return (0, _react2.jsx)(StyledH4, props.attributes, props.children);
}
function HeadingFive(props) {
  return (0, _react2.jsx)(StyledH5, props.attributes, props.children);
}
function HeadingSix(props) {
  return (0, _react2.jsx)(StyledH6, props.attributes, props.children);
}
function Table(props) {
  return (0, _react2.jsx)(StyledTable, null, (0, _react2.jsx)("tbody", props.attributes, props.children));
}
function TableRow(props) {
  return (0, _react2.jsx)("tr", props.attributes, props.children);
}
function TableCell(props) {
  return (0, _react2.jsx)(StyledTd, props.attributes, props.children);
}
function ThematicBreak(props) {
  const isSelected = (0, _slateReact.useSelected)();
  return (0, _react2.jsx)("div", props.attributes, props.children, (0, _react2.jsx)("div", {
    contentEditable: false
  }, (0, _react2.jsx)(StyledHr, _extends({}, props.attributes, {
    css: isSelected && /*#__PURE__*/(0, _react2.css)("box-shadow:0 0 0 2px ", _decapCmsUiDefault.colors.active, ";border-radius:8px;color:", _decapCmsUiDefault.colors.active, ";;label:ThematicBreak;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }))));
}
function Break(props) {
  return (0, _react2.jsx)("br", props.attributes);
}
function BulletedList(props) {
  return (0, _react2.jsx)(StyledUl, props.attributes, props.children);
}
function NumberedList(props) {
  return (0, _react2.jsx)(StyledOl, _extends({}, props.attributes, {
    start: 1
  }), props.children);
}
function Link(props) {
  const url = props.url;
  const title = props.title || url;
  return (0, _react2.jsx)(StyledA, _extends({
    href: url,
    title: title
  }, props.attributes), props.children);
}
function Image(props) {
  const {
    url,
    title,
    alt
  } = props.element.data;
  const isSelected = (0, _slateReact.useSelected)();
  return (0, _react2.jsx)("span", props.attributes, props.children, (0, _react2.jsx)("img", _extends({
    src: url,
    title: title,
    alt: alt
  }, props.attributes, {
    css: isSelected && /*#__PURE__*/(0, _react2.css)("box-shadow:0 0 0 2px ", _decapCmsUiDefault.colors.active, ";;label:Image;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  })));
}
function Leaf({
  attributes,
  children,
  leaf
}) {
  if (leaf.bold) {
    children = (0, _react2.jsx)(Bold, null, children);
  }
  if (leaf.italic) {
    children = (0, _react2.jsx)(Italic, null, children);
  }
  if (leaf.delete) {
    children = (0, _react2.jsx)(Strikethrough, null, children);
  }
  if (leaf.code) {
    children = (0, _react2.jsx)(Code, null, children);
  }

  // if (leaf.break) {
  //   children = <Break />;
  // }

  return (0, _react2.jsx)("span", attributes, children);
}
function renderInline__DEPRECATED() {
  return props => {
    switch (props.node.type) {
      case 'link':
        return (0, _react2.jsx)(Link, props);
      case 'image':
        return (0, _react2.jsx)(Image, props);
      case 'break':
        return (0, _react2.jsx)(Break, props);
    }
  };
}
function Element(props) {
  const {
    children,
    element,
    classNameWrapper,
    codeBlockComponent
  } = props;
  const style = {
    textAlign: element.align
  };
  switch (element.type) {
    case 'bulleted-list':
      return (0, _react2.jsx)(BulletedList, null, children);
    case 'quote':
      return (0, _react2.jsx)(Quote, null, children);
    case 'heading-one':
      return (0, _react2.jsx)(HeadingOne, null, children);
    case 'heading-two':
      return (0, _react2.jsx)(HeadingTwo, null, children);
    case 'heading-three':
      return (0, _react2.jsx)(HeadingThree, null, children);
    case 'heading-four':
      return (0, _react2.jsx)(HeadingFour, null, children);
    case 'heading-five':
      return (0, _react2.jsx)(HeadingFive, null, children);
    case 'heading-six':
      return (0, _react2.jsx)(HeadingSix, null, children);
    case 'list-item':
      return (0, _react2.jsx)(ListItem, null, children);
    case 'numbered-list':
      return (0, _react2.jsx)(NumberedList, null, children);
    case 'table':
      return (0, _react2.jsx)(Table, props);
    case 'table-row':
      return (0, _react2.jsx)(TableRow, props);
    case 'table-cell':
      return (0, _react2.jsx)(TableCell, props);
    case 'thematic-break':
      return (0, _react2.jsx)(_VoidBlock.default, props, (0, _react2.jsx)(ThematicBreak, props));
    case 'link':
      return (0, _react2.jsx)(Link, props);
    case 'image':
      return (0, _react2.jsx)(Image, props);
    case 'break':
      return (0, _react2.jsx)(Break, props);
    case 'shortcode':
      if (element.id === 'code-block' && codeBlockComponent) {
        return (0, _react2.jsx)(_VoidBlock.default, props, (0, _react2.jsx)(_Shortcode.default, _extends({
          classNameWrapper: classNameWrapper,
          typeOverload: "code-block"
        }, props)));
      }
      return (0, _react2.jsx)(_VoidBlock.default, props, (0, _react2.jsx)(_Shortcode.default, props, children));
    default:
      return (0, _react2.jsx)(Paragraph, {
        style: style
      }, children);
  }
}