"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withFileControl;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _once2 = _interopRequireDefault(require("lodash/once"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _react2 = require("@emotion/react");
var _immutable = require("immutable");
var _uuid = require("uuid");
var _commonTags = require("common-tags");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _decapCmsLibUtil = require("decap-cms-lib-util");
var _arrayMove = require("array-move");
var _core = require("@dnd-kit/core");
var _sortable = require("@dnd-kit/sortable");
var _utilities = require("@dnd-kit/utilities");
var _modifiers = require("@dnd-kit/modifiers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const MAX_DISPLAY_LENGTH = 50;
const ImageWrapper = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1hax4ql7",
  label: "ImageWrapper"
})("flex-basis:155px;width:155px;height:100px;margin-right:20px;margin-bottom:20px;border:", _decapCmsUiDefault.borders.textField, ";border-radius:", _decapCmsUiDefault.lengths.borderRadius, ";overflow:hidden;", _decapCmsUiDefault.effects.checkerboard, ";", _decapCmsUiDefault.shadows.inset, ";cursor:", props => props.sortable ? 'pointer' : 'auto', ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SortableImageButtonsWrapper = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1hax4ql6",
  label: "SortableImageButtonsWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "1ekgmip",
  styles: "display:flex;justify-content:center;column-gap:10px;margin-right:20px;margin-top:-10px;margin-bottom:10px"
} : {
  name: "1ekgmip",
  styles: "display:flex;justify-content:center;column-gap:10px;margin-right:20px;margin-top:-10px;margin-bottom:10px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledImage = /*#__PURE__*/(0, _base.default)("img", {
  target: "e1hax4ql5",
  label: "StyledImage"
})(process.env.NODE_ENV === "production" ? {
  name: "ukfjzf",
  styles: "width:100%;height:100%;object-fit:contain"
} : {
  name: "ukfjzf",
  styles: "width:100%;height:100%;object-fit:contain",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
function Image(props) {
  return (0, _react2.jsx)(StyledImage, _extends({
    role: "presentation"
  }, props));
}
function SortableImageButtons({
  onRemove,
  onReplace
}) {
  return (0, _react2.jsx)(SortableImageButtonsWrapper, null, (0, _react2.jsx)(_decapCmsUiDefault.IconButton, {
    size: "small",
    type: "media",
    onClick: onReplace
  }), (0, _react2.jsx)(_decapCmsUiDefault.IconButton, {
    size: "small",
    type: "close",
    onClick: onRemove
  }));
}
function SortableImage(props) {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition
  } = (0, _sortable.useSortable)({
    id: props.id
  });
  const style = {
    transform: _utilities.CSS.Transform.toString(transform),
    transition
  };
  const {
    itemValue,
    getAsset,
    field,
    onRemove,
    onReplace
  } = props;
  return (0, _react2.jsx)("div", _extends({
    ref: setNodeRef,
    style: style
  }, attributes, listeners), (0, _react2.jsx)(ImageWrapper, {
    sortable: true
  }, (0, _react2.jsx)(Image, {
    src: getAsset(itemValue, field) || ''
  })), (0, _react2.jsx)(SortableImageButtons, {
    item: itemValue,
    onRemove: onRemove,
    onReplace: onReplace
  }));
}
var _ref = process.env.NODE_ENV === "production" ? {
  name: "a42x49-SortableMultiImageWrapper",
  styles: "display:flex;flex-wrap:wrap;label:SortableMultiImageWrapper;"
} : {
  name: "a42x49-SortableMultiImageWrapper",
  styles: "display:flex;flex-wrap:wrap;label:SortableMultiImageWrapper;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
function SortableMultiImageWrapper({
  items,
  getAsset,
  field,
  onSortEnd,
  onRemoveOne,
  onReplaceOne
}) {
  const activationConstraint = {
    distance: 4
  };
  const sensors = (0, _core.useSensors)((0, _core.useSensor)(_core.MouseSensor, {
    activationConstraint
  }), (0, _core.useSensor)(_core.TouchSensor, {
    activationConstraint
  }));
  function handleSortEnd({
    active,
    over
  }) {
    onSortEnd({
      oldIndex: items.findIndex(item => item.id === active.id),
      newIndex: items.findIndex(item => item.id === over.id)
    });
  }
  return (0, _react2.jsx)("div", {
    // eslint-disable-next-line react/no-unknown-property
    css: _ref
  }, (0, _react2.jsx)(_core.DndContext, {
    modifiers: [_modifiers.restrictToParentElement],
    collisionDetection: _core.closestCenter,
    sensors: sensors,
    onDragEnd: handleSortEnd
  }, (0, _react2.jsx)(_sortable.SortableContext, {
    items: items
  }, items.map((item, index) => (0, _react2.jsx)(SortableImage, {
    key: item.id,
    id: item.id,
    index: index,
    itemValue: item.value,
    getAsset: getAsset,
    field: field,
    onRemove: onRemoveOne(index),
    onReplace: onReplaceOne(index)
  })))));
}
const FileLink = /*#__PURE__*/(0, _base.default)("a", {
  target: "e1hax4ql4",
  label: "FileLink"
})(process.env.NODE_ENV === "production" ? {
  name: "7mbjrw",
  styles: "margin-bottom:20px;font-weight:normal;color:inherit;&:hover,&:active,&:focus{text-decoration:underline;}"
} : {
  name: "7mbjrw",
  styles: "margin-bottom:20px;font-weight:normal;color:inherit;&:hover,&:active,&:focus{text-decoration:underline;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const FileLinks = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1hax4ql3",
  label: "FileLinks"
})(process.env.NODE_ENV === "production" ? {
  name: "cn3xcj",
  styles: "margin-bottom:12px"
} : {
  name: "cn3xcj",
  styles: "margin-bottom:12px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const FileLinkList = /*#__PURE__*/(0, _base.default)("ul", {
  target: "e1hax4ql2",
  label: "FileLinkList"
})(process.env.NODE_ENV === "production" ? {
  name: "ffhm6p",
  styles: "list-style-type:none"
} : {
  name: "ffhm6p",
  styles: "list-style-type:none",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93aXRoRmlsZUNvbnRyb2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNEs4QiIsImZpbGUiOiIuLi8uLi9zcmMvd2l0aEZpbGVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgTWFwLCBMaXN0IH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IG9uY2UgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgdjQgYXMgdXVpZCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IHsgb25lTGluZSB9IGZyb20gJ2NvbW1vbi10YWdzJztcbmltcG9ydCB7XG4gIGxlbmd0aHMsXG4gIGNvbXBvbmVudHMsXG4gIGJ1dHRvbnMsXG4gIGJvcmRlcnMsXG4gIGVmZmVjdHMsXG4gIHNoYWRvd3MsXG4gIEljb25CdXR0b24sXG59IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IGJhc2VuYW1lIH0gZnJvbSAnZGVjYXAtY21zLWxpYi11dGlsJztcbmltcG9ydCB7IGFycmF5TW92ZUltbXV0YWJsZSBhcyBhcnJheU1vdmUgfSBmcm9tICdhcnJheS1tb3ZlJztcbmltcG9ydCB7XG4gIERuZENvbnRleHQsXG4gIE1vdXNlU2Vuc29yLFxuICBUb3VjaFNlbnNvcixcbiAgY2xvc2VzdENlbnRlcixcbiAgdXNlU2Vuc29yLFxuICB1c2VTZW5zb3JzLFxufSBmcm9tICdAZG5kLWtpdC9jb3JlJztcbmltcG9ydCB7IFNvcnRhYmxlQ29udGV4dCwgdXNlU29ydGFibGUgfSBmcm9tICdAZG5kLWtpdC9zb3J0YWJsZSc7XG5pbXBvcnQgeyBDU1MgfSBmcm9tICdAZG5kLWtpdC91dGlsaXRpZXMnO1xuaW1wb3J0IHsgcmVzdHJpY3RUb1BhcmVudEVsZW1lbnQgfSBmcm9tICdAZG5kLWtpdC9tb2RpZmllcnMnO1xuXG5jb25zdCBNQVhfRElTUExBWV9MRU5HVEggPSA1MDtcblxuY29uc3QgSW1hZ2VXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgZmxleC1iYXNpczogMTU1cHg7XG4gIHdpZHRoOiAxNTVweDtcbiAgaGVpZ2h0OiAxMDBweDtcbiAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBib3JkZXI6ICR7Ym9yZGVycy50ZXh0RmllbGR9O1xuICBib3JkZXItcmFkaXVzOiAke2xlbmd0aHMuYm9yZGVyUmFkaXVzfTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgJHtlZmZlY3RzLmNoZWNrZXJib2FyZH07XG4gICR7c2hhZG93cy5pbnNldH07XG4gIGN1cnNvcjogJHtwcm9wcyA9PiAocHJvcHMuc29ydGFibGUgPyAncG9pbnRlcicgOiAnYXV0bycpfTtcbmA7XG5cbmNvbnN0IFNvcnRhYmxlSW1hZ2VCdXR0b25zV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBjb2x1bW4tZ2FwOiAxMHB4O1xuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG4gIG1hcmdpbi10b3A6IC0xMHB4O1xuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuYDtcblxuY29uc3QgU3R5bGVkSW1hZ2UgPSBzdHlsZWQuaW1nYFxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBvYmplY3QtZml0OiBjb250YWluO1xuYDtcblxuZnVuY3Rpb24gSW1hZ2UocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRJbWFnZSByb2xlPVwicHJlc2VudGF0aW9uXCIgey4uLnByb3BzfSAvPjtcbn1cblxuZnVuY3Rpb24gU29ydGFibGVJbWFnZUJ1dHRvbnMoeyBvblJlbW92ZSwgb25SZXBsYWNlIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8U29ydGFibGVJbWFnZUJ1dHRvbnNXcmFwcGVyPlxuICAgICAgPEljb25CdXR0b24gc2l6ZT1cInNtYWxsXCIgdHlwZT1cIm1lZGlhXCIgb25DbGljaz17b25SZXBsYWNlfT48L0ljb25CdXR0b24+XG4gICAgICA8SWNvbkJ1dHRvbiBzaXplPVwic21hbGxcIiB0eXBlPVwiY2xvc2VcIiBvbkNsaWNrPXtvblJlbW92ZX0+PC9JY29uQnV0dG9uPlxuICAgIDwvU29ydGFibGVJbWFnZUJ1dHRvbnNXcmFwcGVyPlxuICApO1xufVxuXG5mdW5jdGlvbiBTb3J0YWJsZUltYWdlKHByb3BzKSB7XG4gIGNvbnN0IHsgYXR0cmlidXRlcywgbGlzdGVuZXJzLCBzZXROb2RlUmVmLCB0cmFuc2Zvcm0sIHRyYW5zaXRpb24gfSA9IHVzZVNvcnRhYmxlKHtcbiAgICBpZDogcHJvcHMuaWQsXG4gIH0pO1xuXG4gIGNvbnN0IHN0eWxlID0ge1xuICAgIHRyYW5zZm9ybTogQ1NTLlRyYW5zZm9ybS50b1N0cmluZyh0cmFuc2Zvcm0pLFxuICAgIHRyYW5zaXRpb24sXG4gIH07XG5cbiAgY29uc3QgeyBpdGVtVmFsdWUsIGdldEFzc2V0LCBmaWVsZCwgb25SZW1vdmUsIG9uUmVwbGFjZSB9ID0gcHJvcHM7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHJlZj17c2V0Tm9kZVJlZn0gc3R5bGU9e3N0eWxlfSB7Li4uYXR0cmlidXRlc30gey4uLmxpc3RlbmVyc30+XG4gICAgICA8SW1hZ2VXcmFwcGVyIHNvcnRhYmxlPlxuICAgICAgICA8SW1hZ2Ugc3JjPXtnZXRBc3NldChpdGVtVmFsdWUsIGZpZWxkKSB8fCAnJ30gLz5cbiAgICAgIDwvSW1hZ2VXcmFwcGVyPlxuICAgICAgPFNvcnRhYmxlSW1hZ2VCdXR0b25zXG4gICAgICAgIGl0ZW09e2l0ZW1WYWx1ZX1cbiAgICAgICAgb25SZW1vdmU9e29uUmVtb3ZlfVxuICAgICAgICBvblJlcGxhY2U9e29uUmVwbGFjZX1cbiAgICAgID48L1NvcnRhYmxlSW1hZ2VCdXR0b25zPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5mdW5jdGlvbiBTb3J0YWJsZU11bHRpSW1hZ2VXcmFwcGVyKHtcbiAgaXRlbXMsXG4gIGdldEFzc2V0LFxuICBmaWVsZCxcbiAgb25Tb3J0RW5kLFxuICBvblJlbW92ZU9uZSxcbiAgb25SZXBsYWNlT25lLFxufSkge1xuICBjb25zdCBhY3RpdmF0aW9uQ29uc3RyYWludCA9IHsgZGlzdGFuY2U6IDQgfTtcbiAgY29uc3Qgc2Vuc29ycyA9IHVzZVNlbnNvcnMoXG4gICAgdXNlU2Vuc29yKE1vdXNlU2Vuc29yLCB7IGFjdGl2YXRpb25Db25zdHJhaW50IH0pLFxuICAgIHVzZVNlbnNvcihUb3VjaFNlbnNvciwgeyBhY3RpdmF0aW9uQ29uc3RyYWludCB9KSxcbiAgKTtcblxuICBmdW5jdGlvbiBoYW5kbGVTb3J0RW5kKHsgYWN0aXZlLCBvdmVyIH0pIHtcbiAgICBvblNvcnRFbmQoe1xuICAgICAgb2xkSW5kZXg6IGl0ZW1zLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uaWQgPT09IGFjdGl2ZS5pZCksXG4gICAgICBuZXdJbmRleDogaXRlbXMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5pZCA9PT0gb3Zlci5pZCksXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby11bmtub3duLXByb3BlcnR5XG4gICAgICBjc3M9e2Nzc2BcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC13cmFwOiB3cmFwO1xuICAgICAgYH1cbiAgICA+XG4gICAgICA8RG5kQ29udGV4dFxuICAgICAgICBtb2RpZmllcnM9e1tyZXN0cmljdFRvUGFyZW50RWxlbWVudF19XG4gICAgICAgIGNvbGxpc2lvbkRldGVjdGlvbj17Y2xvc2VzdENlbnRlcn1cbiAgICAgICAgc2Vuc29ycz17c2Vuc29yc31cbiAgICAgICAgb25EcmFnRW5kPXtoYW5kbGVTb3J0RW5kfVxuICAgICAgPlxuICAgICAgICA8U29ydGFibGVDb250ZXh0IGl0ZW1zPXtpdGVtc30+XG4gICAgICAgICAge2l0ZW1zLm1hcCgoaXRlbSwgaW5kZXgpID0+IChcbiAgICAgICAgICAgIDxTb3J0YWJsZUltYWdlXG4gICAgICAgICAgICAgIGtleT17aXRlbS5pZH1cbiAgICAgICAgICAgICAgaWQ9e2l0ZW0uaWR9XG4gICAgICAgICAgICAgIGluZGV4PXtpbmRleH1cbiAgICAgICAgICAgICAgaXRlbVZhbHVlPXtpdGVtLnZhbHVlfVxuICAgICAgICAgICAgICBnZXRBc3NldD17Z2V0QXNzZXR9XG4gICAgICAgICAgICAgIGZpZWxkPXtmaWVsZH1cbiAgICAgICAgICAgICAgb25SZW1vdmU9e29uUmVtb3ZlT25lKGluZGV4KX1cbiAgICAgICAgICAgICAgb25SZXBsYWNlPXtvblJlcGxhY2VPbmUoaW5kZXgpfVxuICAgICAgICAgICAgPjwvU29ydGFibGVJbWFnZT5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9Tb3J0YWJsZUNvbnRleHQ+XG4gICAgICA8L0RuZENvbnRleHQ+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmNvbnN0IEZpbGVMaW5rID0gc3R5bGVkLmFgXG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGNvbG9yOiBpbmhlcml0O1xuXG4gICY6aG92ZXIsXG4gICY6YWN0aXZlLFxuICAmOmZvY3VzIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgfVxuYDtcblxuY29uc3QgRmlsZUxpbmtzID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLWJvdHRvbTogMTJweDtcbmA7XG5cbmNvbnN0IEZpbGVMaW5rTGlzdCA9IHN0eWxlZC51bGBcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xuYDtcblxuY29uc3QgRmlsZVdpZGdldEJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2NvbXBvbmVudHMuYmFkZ2V9O1xuICBtYXJnaW4tYm90dG9tOiAxMnB4O1xuYDtcblxuY29uc3QgRmlsZVdpZGdldEJ1dHRvblJlbW92ZSA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2NvbXBvbmVudHMuYmFkZ2VEYW5nZXJ9O1xuYDtcblxuZnVuY3Rpb24gaXNNdWx0aXBsZSh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgTGlzdC5pc0xpc3QodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBzaXplT2ZWYWx1ZSh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubGVuZ3RoO1xuICB9XG5cbiAgaWYgKExpc3QuaXNMaXN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS5zaXplO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlID8gMSA6IDA7XG59XG5cbmZ1bmN0aW9uIHZhbHVlTGlzdFRvQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIExpc3QuaXNMaXN0KHZhbHVlKSA/IHZhbHVlLnRvQXJyYXkoKSA6IHZhbHVlID8/ICcnO1xufVxuXG5mdW5jdGlvbiB2YWx1ZUxpc3RUb1NvcnRhYmxlQXJyYXkodmFsdWUpIHtcbiAgaWYgKCFpc011bHRpcGxlKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGNvbnN0IHZhbHVlQXJyYXkgPSB2YWx1ZUxpc3RUb0FycmF5KHZhbHVlKS5tYXAodmFsdWUgPT4gKHtcbiAgICBpZDogdXVpZCgpLFxuICAgIHZhbHVlLFxuICB9KSk7XG5cbiAgcmV0dXJuIHZhbHVlQXJyYXk7XG59XG5cbmNvbnN0IHdhcm5EZXByZWNhdGVkT3B0aW9ucyA9IG9uY2UoZmllbGQgPT5cbiAgY29uc29sZS53YXJuKG9uZUxpbmVgXG4gIERlY2FwIENNUyBjb25maWc6ICR7ZmllbGQuZ2V0KCduYW1lJyl9IGZpZWxkOiBwcm9wZXJ0eSBcIm9wdGlvbnNcIiBoYXMgYmVlbiBkZXByZWNhdGVkIGZvciB0aGVcbiAgJHtmaWVsZC5nZXQoJ3dpZGdldCcpfSB3aWRnZXQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLiBSYXRoZXIgdGhhblxuICBcXGBmaWVsZC5vcHRpb25zLm1lZGlhX2xpYnJhcnlcXGAsIGFwcGx5IG1lZGlhIGxpYnJhcnkgb3B0aW9ucyBmb3IgdGhpcyB3aWRnZXQgdW5kZXJcbiAgXFxgZmllbGQubWVkaWFfbGlicmFyeVxcYC5cbmApLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2l0aEZpbGVDb250cm9sKHsgZm9ySW1hZ2UgfSA9IHt9KSB7XG4gIHJldHVybiBjbGFzcyBGaWxlQ29udHJvbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgIGZpZWxkOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgICBnZXRBc3NldDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIG1lZGlhUGF0aHM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICAgIG9uQWRkQXNzZXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIG9uUmVtb3ZlSW5zZXJ0ZWRNZWRpYTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIG9uT3Blbk1lZGlhTGlicmFyeTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIG9uQ2xlYXJNZWRpYUNvbnRyb2w6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBvblJlbW92ZU1lZGlhQ29udHJvbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGNsYXNzTmFtZVdyYXBwZXI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gICAgICAgIEltbXV0YWJsZVByb3BUeXBlcy5saXN0T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gICAgICBdKSxcbiAgICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgfTtcblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICB2YWx1ZTogJycsXG4gICAgfTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICBzdXBlcihwcm9wcyk7XG4gICAgICB0aGlzLmNvbnRyb2xJRCA9IHV1aWQoKTtcbiAgICB9XG5cbiAgICBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgICAvKipcbiAgICAgICAqIEFsd2F5cyB1cGRhdGUgaWYgdGhlIHZhbHVlIG9yIGdldEFzc2V0IGNoYW5nZXMuXG4gICAgICAgKi9cbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUgfHwgdGhpcy5wcm9wcy5nZXRBc3NldCAhPT0gbmV4dFByb3BzLmdldEFzc2V0KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIElmIHRoZXJlIGlzIGEgbWVkaWEgcGF0aCBmb3IgdGhpcyBjb250cm9sIGluIHRoZSBzdGF0ZSBvYmplY3QsIGFuZCB0aGF0XG4gICAgICAgKiBwYXRoIGlzIGRpZmZlcmVudCB0aGFuIHRoZSB2YWx1ZSBpbiBgbmV4dFByb3BzYCwgdXBkYXRlLlxuICAgICAgICovXG4gICAgICBjb25zdCBtZWRpYVBhdGggPSBuZXh0UHJvcHMubWVkaWFQYXRocy5nZXQodGhpcy5jb250cm9sSUQpO1xuICAgICAgaWYgKG1lZGlhUGF0aCAmJiBuZXh0UHJvcHMudmFsdWUgIT09IG1lZGlhUGF0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIGNvbnN0IHsgbWVkaWFQYXRocywgdmFsdWUsIG9uUmVtb3ZlSW5zZXJ0ZWRNZWRpYSwgb25DaGFuZ2UgfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCBtZWRpYVBhdGggPSBtZWRpYVBhdGhzLmdldCh0aGlzLmNvbnRyb2xJRCk7XG4gICAgICBpZiAobWVkaWFQYXRoICYmIG1lZGlhUGF0aCAhPT0gdmFsdWUpIHtcbiAgICAgICAgb25DaGFuZ2UobWVkaWFQYXRoKTtcbiAgICAgIH0gZWxzZSBpZiAobWVkaWFQYXRoICYmIG1lZGlhUGF0aCA9PT0gdmFsdWUpIHtcbiAgICAgICAgb25SZW1vdmVJbnNlcnRlZE1lZGlhKHRoaXMuY29udHJvbElEKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMucHJvcHMub25SZW1vdmVNZWRpYUNvbnRyb2wodGhpcy5jb250cm9sSUQpO1xuICAgIH1cblxuICAgIGhhbmRsZUNoYW5nZSA9IGUgPT4ge1xuICAgICAgY29uc3QgeyBmaWVsZCwgb25PcGVuTWVkaWFMaWJyYXJ5LCB2YWx1ZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IG1lZGlhTGlicmFyeUZpZWxkT3B0aW9ucyA9IHRoaXMuZ2V0TWVkaWFMaWJyYXJ5RmllbGRPcHRpb25zKCk7XG5cbiAgICAgIHJldHVybiBvbk9wZW5NZWRpYUxpYnJhcnkoe1xuICAgICAgICBjb250cm9sSUQ6IHRoaXMuY29udHJvbElELFxuICAgICAgICBmb3JJbWFnZSxcbiAgICAgICAgcHJpdmF0ZVVwbG9hZDogZmllbGQuZ2V0KCdwcml2YXRlJyksXG4gICAgICAgIHZhbHVlOiB2YWx1ZUxpc3RUb0FycmF5KHZhbHVlKSxcbiAgICAgICAgYWxsb3dNdWx0aXBsZTogISFtZWRpYUxpYnJhcnlGaWVsZE9wdGlvbnMuZ2V0KCdhbGxvd19tdWx0aXBsZScsIHRydWUpLFxuICAgICAgICBjb25maWc6IG1lZGlhTGlicmFyeUZpZWxkT3B0aW9ucy5nZXQoJ2NvbmZpZycpLFxuICAgICAgICBmaWVsZCxcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBoYW5kbGVVcmwgPSBzdWJqZWN0ID0+IGUgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBjb25zdCB1cmwgPSB3aW5kb3cucHJvbXB0KHRoaXMucHJvcHMudChgZWRpdG9yLmVkaXRvcldpZGdldHMuJHtzdWJqZWN0fS5wcm9tcHRVcmxgKSk7XG5cbiAgICAgIHJldHVybiB0aGlzLnByb3BzLm9uQ2hhbmdlKHVybCk7XG4gICAgfTtcblxuICAgIGhhbmRsZVJlbW92ZSA9IGUgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5wcm9wcy5vbkNsZWFyTWVkaWFDb250cm9sKHRoaXMuY29udHJvbElEKTtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLm9uQ2hhbmdlKCcnKTtcbiAgICB9O1xuXG4gICAgb25SZW1vdmVPbmUgPSBpbmRleCA9PiAoKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlTGlzdFRvQXJyYXkodGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICB2YWx1ZS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMub25DaGFuZ2Uoc2l6ZU9mVmFsdWUodmFsdWUpID4gMCA/IFsuLi52YWx1ZV0gOiBudWxsKTtcbiAgICB9O1xuXG4gICAgb25SZXBsYWNlT25lID0gaW5kZXggPT4gKCkgPT4ge1xuICAgICAgY29uc3QgeyBmaWVsZCwgb25PcGVuTWVkaWFMaWJyYXJ5LCB2YWx1ZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IG1lZGlhTGlicmFyeUZpZWxkT3B0aW9ucyA9IHRoaXMuZ2V0TWVkaWFMaWJyYXJ5RmllbGRPcHRpb25zKCk7XG5cbiAgICAgIHJldHVybiBvbk9wZW5NZWRpYUxpYnJhcnkoe1xuICAgICAgICBjb250cm9sSUQ6IHRoaXMuY29udHJvbElELFxuICAgICAgICBmb3JJbWFnZSxcbiAgICAgICAgcHJpdmF0ZVVwbG9hZDogZmllbGQuZ2V0KCdwcml2YXRlJyksXG4gICAgICAgIHZhbHVlOiB2YWx1ZUxpc3RUb0FycmF5KHZhbHVlKSxcbiAgICAgICAgcmVwbGFjZUluZGV4OiBpbmRleCxcbiAgICAgICAgYWxsb3dNdWx0aXBsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZzogbWVkaWFMaWJyYXJ5RmllbGRPcHRpb25zLmdldCgnY29uZmlnJyksXG4gICAgICAgIGZpZWxkLFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGdldE1lZGlhTGlicmFyeUZpZWxkT3B0aW9ucyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZmllbGQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgIGlmIChmaWVsZC5oYXNJbihbJ29wdGlvbnMnLCAnbWVkaWFfbGlicmFyeSddKSkge1xuICAgICAgICB3YXJuRGVwcmVjYXRlZE9wdGlvbnMoZmllbGQpO1xuICAgICAgICByZXR1cm4gZmllbGQuZ2V0SW4oWydvcHRpb25zJywgJ21lZGlhX2xpYnJhcnknXSwgTWFwKCkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmllbGQuZ2V0KCdtZWRpYV9saWJyYXJ5JywgTWFwKCkpO1xuICAgIH07XG5cbiAgICBhbGxvd3NNdWx0aXBsZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IG1lZGlhTGlicmFyeUZpZWxkT3B0aW9ucyA9IHRoaXMuZ2V0TWVkaWFMaWJyYXJ5RmllbGRPcHRpb25zKCk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBtZWRpYUxpYnJhcnlGaWVsZE9wdGlvbnMuZ2V0KCdjb25maWcnLCBmYWxzZSkgJiZcbiAgICAgICAgbWVkaWFMaWJyYXJ5RmllbGRPcHRpb25zLmdldCgnY29uZmlnJykuZ2V0KCdtdWx0aXBsZScsIGZhbHNlKVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgb25Tb3J0RW5kID0gKHsgb2xkSW5kZXgsIG5ld0luZGV4IH0pID0+IHtcbiAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCBuZXdWYWx1ZSA9IGFycmF5TW92ZSh2YWx1ZSwgb2xkSW5kZXgsIG5ld0luZGV4KTtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLm9uQ2hhbmdlKG5ld1ZhbHVlKTtcbiAgICB9O1xuXG4gICAgZ2V0VmFsaWRhdGVWYWx1ZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXMucHJvcHM7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzTXVsdGlwbGUodmFsdWUpID8gdmFsdWUubWFwKHYgPT4gYmFzZW5hbWUodikpIDogYmFzZW5hbWUodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcblxuICAgIHJlbmRlckZpbGVMaW5rID0gdmFsdWUgPT4ge1xuICAgICAgY29uc3Qgc2l6ZSA9IE1BWF9ESVNQTEFZX0xFTkdUSDtcbiAgICAgIGlmICghdmFsdWUgfHwgdmFsdWUubGVuZ3RoIDw9IHNpemUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgY29uc3QgdGV4dCA9IGAke3ZhbHVlLnNsaWNlKDAsIHNpemUgLyAyKX1cXHUyMDI2JHt2YWx1ZS5zbGljZSgtKHNpemUgLyAyKSArIDEpfWA7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8RmlsZUxpbmsgaHJlZj17dmFsdWV9IHJlbD1cIm5vb3BlbmVyXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgICAge3RleHR9XG4gICAgICAgIDwvRmlsZUxpbms+XG4gICAgICApO1xuICAgIH07XG5cbiAgICByZW5kZXJGaWxlTGlua3MgPSAoKSA9PiB7XG4gICAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICBpZiAoaXNNdWx0aXBsZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8RmlsZUxpbmtzPlxuICAgICAgICAgICAgPEZpbGVMaW5rTGlzdD5cbiAgICAgICAgICAgICAge3ZhbHVlLm1hcCh2YWwgPT4gKFxuICAgICAgICAgICAgICAgIDxsaSBrZXk9e3ZhbH0+e3RoaXMucmVuZGVyRmlsZUxpbmsodmFsKX08L2xpPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvRmlsZUxpbmtMaXN0PlxuICAgICAgICAgIDwvRmlsZUxpbmtzPlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDxGaWxlTGlua3M+e3RoaXMucmVuZGVyRmlsZUxpbmsodmFsdWUpfTwvRmlsZUxpbmtzPjtcbiAgICB9O1xuXG4gICAgcmVuZGVySW1hZ2VzID0gKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRBc3NldCwgdmFsdWUsIGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3QgaXRlbXMgPSB2YWx1ZUxpc3RUb1NvcnRhYmxlQXJyYXkodmFsdWUpO1xuICAgICAgaWYgKGlzTXVsdGlwbGUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPFNvcnRhYmxlTXVsdGlJbWFnZVdyYXBwZXJcbiAgICAgICAgICAgIGl0ZW1zPXtpdGVtc31cbiAgICAgICAgICAgIG9uU29ydEVuZD17dGhpcy5vblNvcnRFbmR9XG4gICAgICAgICAgICBvblJlbW92ZU9uZT17dGhpcy5vblJlbW92ZU9uZX1cbiAgICAgICAgICAgIG9uUmVwbGFjZU9uZT17dGhpcy5vblJlcGxhY2VPbmV9XG4gICAgICAgICAgICBkaXN0YW5jZT17NH1cbiAgICAgICAgICAgIGdldEFzc2V0PXtnZXRBc3NldH1cbiAgICAgICAgICAgIGZpZWxkPXtmaWVsZH1cbiAgICAgICAgICAgIGF4aXM9XCJ4eVwiXG4gICAgICAgICAgICBsb2NrVG9Db250YWluZXJFZGdlcz17dHJ1ZX1cbiAgICAgICAgICA+PC9Tb3J0YWJsZU11bHRpSW1hZ2VXcmFwcGVyPlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzcmMgPSBnZXRBc3NldCh2YWx1ZSwgZmllbGQpO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEltYWdlV3JhcHBlcj5cbiAgICAgICAgICA8SW1hZ2Ugc3JjPXtzcmMgfHwgJyd9IC8+XG4gICAgICAgIDwvSW1hZ2VXcmFwcGVyPlxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmVuZGVyU2VsZWN0aW9uID0gc3ViamVjdCA9PiB7XG4gICAgICBjb25zdCB7IHQsIGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3QgYWxsb3dzTXVsdGlwbGUgPSB0aGlzLmFsbG93c011bHRpcGxlKCk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIHtmb3JJbWFnZSA/IHRoaXMucmVuZGVySW1hZ2VzKCkgOiBudWxsfVxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICB7Zm9ySW1hZ2UgPyBudWxsIDogdGhpcy5yZW5kZXJGaWxlTGlua3MoKX1cbiAgICAgICAgICAgIDxGaWxlV2lkZ2V0QnV0dG9uIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2hhbmdlfT5cbiAgICAgICAgICAgICAge3QoXG4gICAgICAgICAgICAgICAgYGVkaXRvci5lZGl0b3JXaWRnZXRzLiR7c3ViamVjdH0uJHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuYWxsb3dzTXVsdGlwbGUoKSA/ICdhZGRNb3JlJyA6ICdjaG9vc2VEaWZmZXJlbnQnXG4gICAgICAgICAgICAgICAgfWAsXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L0ZpbGVXaWRnZXRCdXR0b24+XG4gICAgICAgICAgICB7ZmllbGQuZ2V0KCdjaG9vc2VfdXJsJywgdHJ1ZSkgJiYgIXRoaXMuYWxsb3dzTXVsdGlwbGUoKSA/IChcbiAgICAgICAgICAgICAgPEZpbGVXaWRnZXRCdXR0b24gb25DbGljaz17dGhpcy5oYW5kbGVVcmwoc3ViamVjdCl9PlxuICAgICAgICAgICAgICAgIHt0KGBlZGl0b3IuZWRpdG9yV2lkZ2V0cy4ke3N1YmplY3R9LnJlcGxhY2VVcmxgKX1cbiAgICAgICAgICAgICAgPC9GaWxlV2lkZ2V0QnV0dG9uPlxuICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICA8RmlsZVdpZGdldEJ1dHRvblJlbW92ZSBvbkNsaWNrPXt0aGlzLmhhbmRsZVJlbW92ZX0+XG4gICAgICAgICAgICAgIHt0KGBlZGl0b3IuZWRpdG9yV2lkZ2V0cy4ke3N1YmplY3R9LnJlbW92ZSR7YWxsb3dzTXVsdGlwbGUgPyAnQWxsJyA6ICcnfWApfVxuICAgICAgICAgICAgPC9GaWxlV2lkZ2V0QnV0dG9uUmVtb3ZlPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfTtcblxuICAgIHJlbmRlck5vU2VsZWN0aW9uID0gc3ViamVjdCA9PiB7XG4gICAgICBjb25zdCB7IHQsIGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICA8RmlsZVdpZGdldEJ1dHRvbiBvbkNsaWNrPXt0aGlzLmhhbmRsZUNoYW5nZX0+XG4gICAgICAgICAgICB7dChgZWRpdG9yLmVkaXRvcldpZGdldHMuJHtzdWJqZWN0fS5jaG9vc2Uke3RoaXMuYWxsb3dzTXVsdGlwbGUoKSA/ICdNdWx0aXBsZScgOiAnJ31gKX1cbiAgICAgICAgICA8L0ZpbGVXaWRnZXRCdXR0b24+XG4gICAgICAgICAge2ZpZWxkLmdldCgnY2hvb3NlX3VybCcsIHRydWUpID8gKFxuICAgICAgICAgICAgPEZpbGVXaWRnZXRCdXR0b24gb25DbGljaz17dGhpcy5oYW5kbGVVcmwoc3ViamVjdCl9PlxuICAgICAgICAgICAgICB7dChgZWRpdG9yLmVkaXRvcldpZGdldHMuJHtzdWJqZWN0fS5jaG9vc2VVcmxgKX1cbiAgICAgICAgICAgIDwvRmlsZVdpZGdldEJ1dHRvbj5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICBjb25zdCB7IHZhbHVlLCBjbGFzc05hbWVXcmFwcGVyIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3Qgc3ViamVjdCA9IGZvckltYWdlID8gJ2ltYWdlJyA6ICdmaWxlJztcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZVdyYXBwZXJ9PlxuICAgICAgICAgIDxzcGFuPnt2YWx1ZSA/IHRoaXMucmVuZGVyU2VsZWN0aW9uKHN1YmplY3QpIDogdGhpcy5yZW5kZXJOb1NlbGVjdGlvbihzdWJqZWN0KX08L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG4gIH07XG59XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const FileWidgetButton = /*#__PURE__*/(0, _base.default)("button", {
  target: "e1hax4ql1",
  label: "FileWidgetButton"
})(_decapCmsUiDefault.buttons.button, ";", _decapCmsUiDefault.components.badge, ";margin-bottom:12px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const FileWidgetButtonRemove = /*#__PURE__*/(0, _base.default)("button", {
  target: "e1hax4ql0",
  label: "FileWidgetButtonRemove"
})(_decapCmsUiDefault.buttons.button, ";", _decapCmsUiDefault.components.badgeDanger, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
function isMultiple(value) {
  return Array.isArray(value) || _immutable.List.isList(value);
}
function sizeOfValue(value) {
  if (Array.isArray(value)) {
    return value.length;
  }
  if (_immutable.List.isList(value)) {
    return value.size;
  }
  return value ? 1 : 0;
}
function valueListToArray(value) {
  return _immutable.List.isList(value) ? value.toArray() : value !== null && value !== void 0 ? value : '';
}
function valueListToSortableArray(value) {
  if (!isMultiple(value)) {
    return value;
  }
  const valueArray = valueListToArray(value).map(value => ({
    id: (0, _uuid.v4)(),
    value
  }));
  return valueArray;
}
const warnDeprecatedOptions = (0, _once2.default)(field => console.warn((0, _commonTags.oneLine)`
  Decap CMS config: ${field.get('name')} field: property "options" has been deprecated for the
  ${field.get('widget')} widget and will be removed in the next major release. Rather than
  \`field.options.media_library\`, apply media library options for this widget under
  \`field.media_library\`.
`));
function withFileControl({
  forImage
} = {}) {
  var _class;
  return _class = class FileControl extends _react.default.Component {
    constructor(props) {
      super(props);
      _defineProperty(this, "handleChange", e => {
        const {
          field,
          onOpenMediaLibrary,
          value
        } = this.props;
        e.preventDefault();
        const mediaLibraryFieldOptions = this.getMediaLibraryFieldOptions();
        return onOpenMediaLibrary({
          controlID: this.controlID,
          forImage,
          privateUpload: field.get('private'),
          value: valueListToArray(value),
          allowMultiple: !!mediaLibraryFieldOptions.get('allow_multiple', true),
          config: mediaLibraryFieldOptions.get('config'),
          field
        });
      });
      _defineProperty(this, "handleUrl", subject => e => {
        e.preventDefault();
        const url = window.prompt(this.props.t(`editor.editorWidgets.${subject}.promptUrl`));
        return this.props.onChange(url);
      });
      _defineProperty(this, "handleRemove", e => {
        e.preventDefault();
        this.props.onClearMediaControl(this.controlID);
        return this.props.onChange('');
      });
      _defineProperty(this, "onRemoveOne", index => () => {
        const value = valueListToArray(this.props.value);
        value.splice(index, 1);
        return this.props.onChange(sizeOfValue(value) > 0 ? [...value] : null);
      });
      _defineProperty(this, "onReplaceOne", index => () => {
        const {
          field,
          onOpenMediaLibrary,
          value
        } = this.props;
        const mediaLibraryFieldOptions = this.getMediaLibraryFieldOptions();
        return onOpenMediaLibrary({
          controlID: this.controlID,
          forImage,
          privateUpload: field.get('private'),
          value: valueListToArray(value),
          replaceIndex: index,
          allowMultiple: false,
          config: mediaLibraryFieldOptions.get('config'),
          field
        });
      });
      _defineProperty(this, "getMediaLibraryFieldOptions", () => {
        const {
          field
        } = this.props;
        if (field.hasIn(['options', 'media_library'])) {
          warnDeprecatedOptions(field);
          return field.getIn(['options', 'media_library'], (0, _immutable.Map)());
        }
        return field.get('media_library', (0, _immutable.Map)());
      });
      _defineProperty(this, "allowsMultiple", () => {
        const mediaLibraryFieldOptions = this.getMediaLibraryFieldOptions();
        return mediaLibraryFieldOptions.get('config', false) && mediaLibraryFieldOptions.get('config').get('multiple', false);
      });
      _defineProperty(this, "onSortEnd", ({
        oldIndex,
        newIndex
      }) => {
        const {
          value
        } = this.props;
        const newValue = (0, _arrayMove.arrayMoveImmutable)(value, oldIndex, newIndex);
        return this.props.onChange(newValue);
      });
      _defineProperty(this, "getValidateValue", () => {
        const {
          value
        } = this.props;
        if (value) {
          return isMultiple(value) ? value.map(v => (0, _decapCmsLibUtil.basename)(v)) : (0, _decapCmsLibUtil.basename)(value);
        }
        return value;
      });
      _defineProperty(this, "renderFileLink", value => {
        const size = MAX_DISPLAY_LENGTH;
        if (!value || value.length <= size) {
          return value;
        }
        const text = `${value.slice(0, size / 2)}\u2026${value.slice(-(size / 2) + 1)}`;
        return (0, _react2.jsx)(FileLink, {
          href: value,
          rel: "noopener",
          target: "_blank"
        }, text);
      });
      _defineProperty(this, "renderFileLinks", () => {
        const {
          value
        } = this.props;
        if (isMultiple(value)) {
          return (0, _react2.jsx)(FileLinks, null, (0, _react2.jsx)(FileLinkList, null, value.map(val => (0, _react2.jsx)("li", {
            key: val
          }, this.renderFileLink(val)))));
        }
        return (0, _react2.jsx)(FileLinks, null, this.renderFileLink(value));
      });
      _defineProperty(this, "renderImages", () => {
        const {
          getAsset,
          value,
          field
        } = this.props;
        const items = valueListToSortableArray(value);
        if (isMultiple(value)) {
          return (0, _react2.jsx)(SortableMultiImageWrapper, {
            items: items,
            onSortEnd: this.onSortEnd,
            onRemoveOne: this.onRemoveOne,
            onReplaceOne: this.onReplaceOne,
            distance: 4,
            getAsset: getAsset,
            field: field,
            axis: "xy",
            lockToContainerEdges: true
          });
        }
        const src = getAsset(value, field);
        return (0, _react2.jsx)(ImageWrapper, null, (0, _react2.jsx)(Image, {
          src: src || ''
        }));
      });
      _defineProperty(this, "renderSelection", subject => {
        const {
          t,
          field
        } = this.props;
        const allowsMultiple = this.allowsMultiple();
        return (0, _react2.jsx)("div", null, forImage ? this.renderImages() : null, (0, _react2.jsx)("div", null, forImage ? null : this.renderFileLinks(), (0, _react2.jsx)(FileWidgetButton, {
          onClick: this.handleChange
        }, t(`editor.editorWidgets.${subject}.${this.allowsMultiple() ? 'addMore' : 'chooseDifferent'}`)), field.get('choose_url', true) && !this.allowsMultiple() ? (0, _react2.jsx)(FileWidgetButton, {
          onClick: this.handleUrl(subject)
        }, t(`editor.editorWidgets.${subject}.replaceUrl`)) : null, (0, _react2.jsx)(FileWidgetButtonRemove, {
          onClick: this.handleRemove
        }, t(`editor.editorWidgets.${subject}.remove${allowsMultiple ? 'All' : ''}`))));
      });
      _defineProperty(this, "renderNoSelection", subject => {
        const {
          t,
          field
        } = this.props;
        return (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(FileWidgetButton, {
          onClick: this.handleChange
        }, t(`editor.editorWidgets.${subject}.choose${this.allowsMultiple() ? 'Multiple' : ''}`)), field.get('choose_url', true) ? (0, _react2.jsx)(FileWidgetButton, {
          onClick: this.handleUrl(subject)
        }, t(`editor.editorWidgets.${subject}.chooseUrl`)) : null);
      });
      this.controlID = (0, _uuid.v4)();
    }
    shouldComponentUpdate(nextProps) {
      /**
       * Always update if the value or getAsset changes.
       */
      if (this.props.value !== nextProps.value || this.props.getAsset !== nextProps.getAsset) {
        return true;
      }

      /**
       * If there is a media path for this control in the state object, and that
       * path is different than the value in `nextProps`, update.
       */
      const mediaPath = nextProps.mediaPaths.get(this.controlID);
      if (mediaPath && nextProps.value !== mediaPath) {
        return true;
      }
      return false;
    }
    componentDidUpdate() {
      const {
        mediaPaths,
        value,
        onRemoveInsertedMedia,
        onChange
      } = this.props;
      const mediaPath = mediaPaths.get(this.controlID);
      if (mediaPath && mediaPath !== value) {
        onChange(mediaPath);
      } else if (mediaPath && mediaPath === value) {
        onRemoveInsertedMedia(this.controlID);
      }
    }
    componentWillUnmount() {
      this.props.onRemoveMediaControl(this.controlID);
    }
    render() {
      const {
        value,
        classNameWrapper
      } = this.props;
      const subject = forImage ? 'image' : 'file';
      return (0, _react2.jsx)("div", {
        className: classNameWrapper
      }, (0, _react2.jsx)("span", null, value ? this.renderSelection(subject) : this.renderNoSelection(subject)));
    }
  }, _defineProperty(_class, "propTypes", {
    field: _propTypes.default.object.isRequired,
    getAsset: _propTypes.default.func.isRequired,
    mediaPaths: _reactImmutableProptypes.default.map.isRequired,
    onAddAsset: _propTypes.default.func.isRequired,
    onChange: _propTypes.default.func.isRequired,
    onRemoveInsertedMedia: _propTypes.default.func.isRequired,
    onOpenMediaLibrary: _propTypes.default.func.isRequired,
    onClearMediaControl: _propTypes.default.func.isRequired,
    onRemoveMediaControl: _propTypes.default.func.isRequired,
    classNameWrapper: _propTypes.default.string.isRequired,
    value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string), _reactImmutableProptypes.default.listOf(_propTypes.default.string)]),
    t: _propTypes.default.func.isRequired
  }), _defineProperty(_class, "defaultProps", {
    value: ''
  }), _class;
}