"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactWaypoint = require("react-waypoint");
var _immutable = require("immutable");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _reactWindow = require("react-window");
var _reactVirtualizedAutoSizer = _interopRequireDefault(require("react-virtualized-auto-sizer"));
var _MediaLibraryCard = _interopRequireDefault(require("./MediaLibraryCard"));
var _react2 = require("@emotion/react");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
function CardWrapper(props) {
  const {
    rowIndex,
    columnIndex,
    style,
    data: {
      mediaItems,
      isSelectedFile,
      onAssetClick,
      cardDraftText,
      cardWidth,
      cardHeight,
      isPrivate,
      displayURLs,
      loadDisplayURL,
      columnCount,
      gutter
    }
  } = props;
  const index = rowIndex * columnCount + columnIndex;
  if (index >= mediaItems.length) {
    return null;
  }
  const file = mediaItems[index];
  return (0, _react2.jsx)("div", {
    tabIndex: "0",
    style: _objectSpread(_objectSpread({}, style), {}, {
      left: style.left + gutter * columnIndex,
      top: style.top + gutter,
      width: style.width - gutter,
      height: style.height - gutter
    })
  }, (0, _react2.jsx)(_MediaLibraryCard.default, {
    key: file.key,
    isSelected: isSelectedFile(file),
    text: file.name,
    onClick: () => onAssetClick(file),
    isDraft: file.draft,
    draftText: cardDraftText,
    width: cardWidth,
    height: cardHeight,
    margin: '0px',
    isPrivate: isPrivate,
    displayURL: displayURLs.get(file.id, file.url ? (0, _immutable.Map)({
      url: file.url
    }) : (0, _immutable.Map)()),
    loadDisplayURL: () => loadDisplayURL(file),
    type: file.type,
    isViewableImage: file.isViewableImage
  }));
}
function VirtualizedGrid(props) {
  const {
    mediaItems,
    setScrollContainerRef
  } = props;
  return (0, _react2.jsx)(CardGridContainer, {
    ref: setScrollContainerRef
  }, (0, _react2.jsx)(_reactVirtualizedAutoSizer.default, null, ({
    height,
    width
  }) => {
    const cardWidth = parseInt(props.cardWidth, 10);
    const cardHeight = parseInt(props.cardHeight, 10);
    const gutter = parseInt(props.cardMargin, 10);
    const columnWidth = cardWidth + gutter;
    const rowHeight = cardHeight + gutter;
    const columnCount = Math.floor(width / columnWidth);
    const rowCount = Math.ceil(mediaItems.length / columnCount);
    return (0, _react2.jsx)(_reactWindow.FixedSizeGrid, {
      columnCount: columnCount,
      columnWidth: columnWidth,
      rowCount: rowCount,
      rowHeight: rowHeight,
      width: width,
      height: height,
      itemData: _objectSpread(_objectSpread({}, props), {}, {
        gutter,
        columnCount
      })
    }, CardWrapper);
  }));
}
function PaginatedGrid({
  setScrollContainerRef,
  mediaItems,
  isSelectedFile,
  onAssetClick,
  cardDraftText,
  cardWidth,
  cardHeight,
  cardMargin,
  isPrivate,
  displayURLs,
  loadDisplayURL,
  canLoadMore,
  onLoadMore,
  isPaginating,
  paginatingMessage
}) {
  return (0, _react2.jsx)(CardGridContainer, {
    ref: setScrollContainerRef
  }, (0, _react2.jsx)(CardGrid, null, mediaItems.map(file => (0, _react2.jsx)(_MediaLibraryCard.default, {
    key: file.key,
    isSelected: isSelectedFile(file),
    text: file.name,
    onClick: () => onAssetClick(file),
    isDraft: file.draft,
    draftText: cardDraftText,
    width: cardWidth,
    height: cardHeight,
    margin: cardMargin,
    isPrivate: isPrivate,
    displayURL: displayURLs.get(file.id, file.url ? (0, _immutable.Map)({
      url: file.url
    }) : (0, _immutable.Map)()),
    loadDisplayURL: () => loadDisplayURL(file),
    type: file.type,
    isViewableImage: file.isViewableImage
  })), !canLoadMore ? null : (0, _react2.jsx)(_reactWaypoint.Waypoint, {
    onEnter: onLoadMore
  })), !isPaginating ? null : (0, _react2.jsx)(PaginatingMessage, {
    isPrivate: isPrivate
  }, paginatingMessage));
}
const CardGridContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1l5oka22",
  label: "CardGridContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "bv8zlo",
  styles: "overflow-y:auto;overflow-x:hidden"
} : {
  name: "bv8zlo",
  styles: "overflow-y:auto;overflow-x:hidden",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtSm9DIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgV2F5cG9pbnQgfSBmcm9tICdyZWFjdC13YXlwb2ludCc7XG5pbXBvcnQgeyBNYXAgfSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgRml4ZWRTaXplR3JpZCBhcyBHcmlkIH0gZnJvbSAncmVhY3Qtd2luZG93JztcbmltcG9ydCBBdXRvU2l6ZXIgZnJvbSAncmVhY3QtdmlydHVhbGl6ZWQtYXV0by1zaXplcic7XG5cbmltcG9ydCBNZWRpYUxpYnJhcnlDYXJkIGZyb20gJy4vTWVkaWFMaWJyYXJ5Q2FyZCc7XG5cbmZ1bmN0aW9uIENhcmRXcmFwcGVyKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICByb3dJbmRleCxcbiAgICBjb2x1bW5JbmRleCxcbiAgICBzdHlsZSxcbiAgICBkYXRhOiB7XG4gICAgICBtZWRpYUl0ZW1zLFxuICAgICAgaXNTZWxlY3RlZEZpbGUsXG4gICAgICBvbkFzc2V0Q2xpY2ssXG4gICAgICBjYXJkRHJhZnRUZXh0LFxuICAgICAgY2FyZFdpZHRoLFxuICAgICAgY2FyZEhlaWdodCxcbiAgICAgIGlzUHJpdmF0ZSxcbiAgICAgIGRpc3BsYXlVUkxzLFxuICAgICAgbG9hZERpc3BsYXlVUkwsXG4gICAgICBjb2x1bW5Db3VudCxcbiAgICAgIGd1dHRlcixcbiAgICB9LFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGluZGV4ID0gcm93SW5kZXggKiBjb2x1bW5Db3VudCArIGNvbHVtbkluZGV4O1xuICBpZiAoaW5kZXggPj0gbWVkaWFJdGVtcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBmaWxlID0gbWVkaWFJdGVtc1tpbmRleF07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICB0YWJJbmRleD1cIjBcIlxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgLi4uc3R5bGUsXG4gICAgICAgIGxlZnQ6IHN0eWxlLmxlZnQgKyBndXR0ZXIgKiBjb2x1bW5JbmRleCxcbiAgICAgICAgdG9wOiBzdHlsZS50b3AgKyBndXR0ZXIsXG4gICAgICAgIHdpZHRoOiBzdHlsZS53aWR0aCAtIGd1dHRlcixcbiAgICAgICAgaGVpZ2h0OiBzdHlsZS5oZWlnaHQgLSBndXR0ZXIsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxNZWRpYUxpYnJhcnlDYXJkXG4gICAgICAgIGtleT17ZmlsZS5rZXl9XG4gICAgICAgIGlzU2VsZWN0ZWQ9e2lzU2VsZWN0ZWRGaWxlKGZpbGUpfVxuICAgICAgICB0ZXh0PXtmaWxlLm5hbWV9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQXNzZXRDbGljayhmaWxlKX1cbiAgICAgICAgaXNEcmFmdD17ZmlsZS5kcmFmdH1cbiAgICAgICAgZHJhZnRUZXh0PXtjYXJkRHJhZnRUZXh0fVxuICAgICAgICB3aWR0aD17Y2FyZFdpZHRofVxuICAgICAgICBoZWlnaHQ9e2NhcmRIZWlnaHR9XG4gICAgICAgIG1hcmdpbj17JzBweCd9XG4gICAgICAgIGlzUHJpdmF0ZT17aXNQcml2YXRlfVxuICAgICAgICBkaXNwbGF5VVJMPXtkaXNwbGF5VVJMcy5nZXQoZmlsZS5pZCwgZmlsZS51cmwgPyBNYXAoeyB1cmw6IGZpbGUudXJsIH0pIDogTWFwKCkpfVxuICAgICAgICBsb2FkRGlzcGxheVVSTD17KCkgPT4gbG9hZERpc3BsYXlVUkwoZmlsZSl9XG4gICAgICAgIHR5cGU9e2ZpbGUudHlwZX1cbiAgICAgICAgaXNWaWV3YWJsZUltYWdlPXtmaWxlLmlzVmlld2FibGVJbWFnZX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmZ1bmN0aW9uIFZpcnR1YWxpemVkR3JpZChwcm9wcykge1xuICBjb25zdCB7IG1lZGlhSXRlbXMsIHNldFNjcm9sbENvbnRhaW5lclJlZiB9ID0gcHJvcHM7XG5cbiAgcmV0dXJuIChcbiAgICA8Q2FyZEdyaWRDb250YWluZXIgcmVmPXtzZXRTY3JvbGxDb250YWluZXJSZWZ9PlxuICAgICAgPEF1dG9TaXplcj5cbiAgICAgICAgeyh7IGhlaWdodCwgd2lkdGggfSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGNhcmRXaWR0aCA9IHBhcnNlSW50KHByb3BzLmNhcmRXaWR0aCwgMTApO1xuICAgICAgICAgIGNvbnN0IGNhcmRIZWlnaHQgPSBwYXJzZUludChwcm9wcy5jYXJkSGVpZ2h0LCAxMCk7XG4gICAgICAgICAgY29uc3QgZ3V0dGVyID0gcGFyc2VJbnQocHJvcHMuY2FyZE1hcmdpbiwgMTApO1xuICAgICAgICAgIGNvbnN0IGNvbHVtbldpZHRoID0gY2FyZFdpZHRoICsgZ3V0dGVyO1xuICAgICAgICAgIGNvbnN0IHJvd0hlaWdodCA9IGNhcmRIZWlnaHQgKyBndXR0ZXI7XG4gICAgICAgICAgY29uc3QgY29sdW1uQ291bnQgPSBNYXRoLmZsb29yKHdpZHRoIC8gY29sdW1uV2lkdGgpO1xuICAgICAgICAgIGNvbnN0IHJvd0NvdW50ID0gTWF0aC5jZWlsKG1lZGlhSXRlbXMubGVuZ3RoIC8gY29sdW1uQ291bnQpO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8R3JpZFxuICAgICAgICAgICAgICBjb2x1bW5Db3VudD17Y29sdW1uQ291bnR9XG4gICAgICAgICAgICAgIGNvbHVtbldpZHRoPXtjb2x1bW5XaWR0aH1cbiAgICAgICAgICAgICAgcm93Q291bnQ9e3Jvd0NvdW50fVxuICAgICAgICAgICAgICByb3dIZWlnaHQ9e3Jvd0hlaWdodH1cbiAgICAgICAgICAgICAgd2lkdGg9e3dpZHRofVxuICAgICAgICAgICAgICBoZWlnaHQ9e2hlaWdodH1cbiAgICAgICAgICAgICAgaXRlbURhdGE9e3sgLi4ucHJvcHMsIGd1dHRlciwgY29sdW1uQ291bnQgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge0NhcmRXcmFwcGVyfVxuICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICk7XG4gICAgICAgIH19XG4gICAgICA8L0F1dG9TaXplcj5cbiAgICA8L0NhcmRHcmlkQ29udGFpbmVyPlxuICApO1xufVxuXG5mdW5jdGlvbiBQYWdpbmF0ZWRHcmlkKHtcbiAgc2V0U2Nyb2xsQ29udGFpbmVyUmVmLFxuICBtZWRpYUl0ZW1zLFxuICBpc1NlbGVjdGVkRmlsZSxcbiAgb25Bc3NldENsaWNrLFxuICBjYXJkRHJhZnRUZXh0LFxuICBjYXJkV2lkdGgsXG4gIGNhcmRIZWlnaHQsXG4gIGNhcmRNYXJnaW4sXG4gIGlzUHJpdmF0ZSxcbiAgZGlzcGxheVVSTHMsXG4gIGxvYWREaXNwbGF5VVJMLFxuICBjYW5Mb2FkTW9yZSxcbiAgb25Mb2FkTW9yZSxcbiAgaXNQYWdpbmF0aW5nLFxuICBwYWdpbmF0aW5nTWVzc2FnZSxcbn0pIHtcbiAgcmV0dXJuIChcbiAgICA8Q2FyZEdyaWRDb250YWluZXIgcmVmPXtzZXRTY3JvbGxDb250YWluZXJSZWZ9PlxuICAgICAgPENhcmRHcmlkPlxuICAgICAgICB7bWVkaWFJdGVtcy5tYXAoZmlsZSA9PiAoXG4gICAgICAgICAgPE1lZGlhTGlicmFyeUNhcmRcbiAgICAgICAgICAgIGtleT17ZmlsZS5rZXl9XG4gICAgICAgICAgICBpc1NlbGVjdGVkPXtpc1NlbGVjdGVkRmlsZShmaWxlKX1cbiAgICAgICAgICAgIHRleHQ9e2ZpbGUubmFtZX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQXNzZXRDbGljayhmaWxlKX1cbiAgICAgICAgICAgIGlzRHJhZnQ9e2ZpbGUuZHJhZnR9XG4gICAgICAgICAgICBkcmFmdFRleHQ9e2NhcmREcmFmdFRleHR9XG4gICAgICAgICAgICB3aWR0aD17Y2FyZFdpZHRofVxuICAgICAgICAgICAgaGVpZ2h0PXtjYXJkSGVpZ2h0fVxuICAgICAgICAgICAgbWFyZ2luPXtjYXJkTWFyZ2lufVxuICAgICAgICAgICAgaXNQcml2YXRlPXtpc1ByaXZhdGV9XG4gICAgICAgICAgICBkaXNwbGF5VVJMPXtkaXNwbGF5VVJMcy5nZXQoZmlsZS5pZCwgZmlsZS51cmwgPyBNYXAoeyB1cmw6IGZpbGUudXJsIH0pIDogTWFwKCkpfVxuICAgICAgICAgICAgbG9hZERpc3BsYXlVUkw9eygpID0+IGxvYWREaXNwbGF5VVJMKGZpbGUpfVxuICAgICAgICAgICAgdHlwZT17ZmlsZS50eXBlfVxuICAgICAgICAgICAgaXNWaWV3YWJsZUltYWdlPXtmaWxlLmlzVmlld2FibGVJbWFnZX1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgICAgeyFjYW5Mb2FkTW9yZSA/IG51bGwgOiA8V2F5cG9pbnQgb25FbnRlcj17b25Mb2FkTW9yZX0gLz59XG4gICAgICA8L0NhcmRHcmlkPlxuICAgICAgeyFpc1BhZ2luYXRpbmcgPyBudWxsIDogKFxuICAgICAgICA8UGFnaW5hdGluZ01lc3NhZ2UgaXNQcml2YXRlPXtpc1ByaXZhdGV9PntwYWdpbmF0aW5nTWVzc2FnZX08L1BhZ2luYXRpbmdNZXNzYWdlPlxuICAgICAgKX1cbiAgICA8L0NhcmRHcmlkQ29udGFpbmVyPlxuICApO1xufVxuXG5jb25zdCBDYXJkR3JpZENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIG92ZXJmbG93LXk6IGF1dG87XG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IENhcmRHcmlkID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC13cmFwOiB3cmFwO1xuXG4gIG1hcmdpbi1sZWZ0OiAtMTBweDtcbiAgbWFyZ2luLXJpZ2h0OiAtMTBweDtcbmA7XG5cbmNvbnN0IFBhZ2luYXRpbmdNZXNzYWdlID0gc3R5bGVkLmgxYFxuICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy5pc1ByaXZhdGUgJiYgY29sb3JzLnRleHRGaWVsZEJvcmRlcn07XG5gO1xuXG5mdW5jdGlvbiBNZWRpYUxpYnJhcnlDYXJkR3JpZChwcm9wcykge1xuICBjb25zdCB7IGNhbkxvYWRNb3JlLCBpc1BhZ2luYXRpbmcgfSA9IHByb3BzO1xuICBpZiAoY2FuTG9hZE1vcmUgfHwgaXNQYWdpbmF0aW5nKSB7XG4gICAgcmV0dXJuIDxQYWdpbmF0ZWRHcmlkIHsuLi5wcm9wc30gLz47XG4gIH1cbiAgcmV0dXJuIDxWaXJ0dWFsaXplZEdyaWQgey4uLnByb3BzfSAvPjtcbn1cblxuTWVkaWFMaWJyYXJ5Q2FyZEdyaWQucHJvcFR5cGVzID0ge1xuICBzZXRTY3JvbGxDb250YWluZXJSZWY6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG1lZGlhSXRlbXM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBkaXNwbGF5VVJMOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAga2V5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBkcmFmdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgfSksXG4gICkuaXNSZXF1aXJlZCxcbiAgaXNTZWxlY3RlZEZpbGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uQXNzZXRDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgY2FuTG9hZE1vcmU6IFByb3BUeXBlcy5ib29sLFxuICBvbkxvYWRNb3JlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBpc1BhZ2luYXRpbmc6IFByb3BUeXBlcy5ib29sLFxuICBwYWdpbmF0aW5nTWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2FyZERyYWZ0VGV4dDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBjYXJkV2lkdGg6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY2FyZE1hcmdpbjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBsb2FkRGlzcGxheVVSTDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNQcml2YXRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzcGxheVVSTHM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE1hcCkuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lZGlhTGlicmFyeUNhcmRHcmlkO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const CardGrid = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1l5oka21",
  label: "CardGrid"
})(process.env.NODE_ENV === "production" ? {
  name: "15jhlc1",
  styles: "display:flex;flex-wrap:wrap;margin-left:-10px;margin-right:-10px"
} : {
  name: "15jhlc1",
  styles: "display:flex;flex-wrap:wrap;margin-left:-10px;margin-right:-10px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3SjJCIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgV2F5cG9pbnQgfSBmcm9tICdyZWFjdC13YXlwb2ludCc7XG5pbXBvcnQgeyBNYXAgfSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgRml4ZWRTaXplR3JpZCBhcyBHcmlkIH0gZnJvbSAncmVhY3Qtd2luZG93JztcbmltcG9ydCBBdXRvU2l6ZXIgZnJvbSAncmVhY3QtdmlydHVhbGl6ZWQtYXV0by1zaXplcic7XG5cbmltcG9ydCBNZWRpYUxpYnJhcnlDYXJkIGZyb20gJy4vTWVkaWFMaWJyYXJ5Q2FyZCc7XG5cbmZ1bmN0aW9uIENhcmRXcmFwcGVyKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICByb3dJbmRleCxcbiAgICBjb2x1bW5JbmRleCxcbiAgICBzdHlsZSxcbiAgICBkYXRhOiB7XG4gICAgICBtZWRpYUl0ZW1zLFxuICAgICAgaXNTZWxlY3RlZEZpbGUsXG4gICAgICBvbkFzc2V0Q2xpY2ssXG4gICAgICBjYXJkRHJhZnRUZXh0LFxuICAgICAgY2FyZFdpZHRoLFxuICAgICAgY2FyZEhlaWdodCxcbiAgICAgIGlzUHJpdmF0ZSxcbiAgICAgIGRpc3BsYXlVUkxzLFxuICAgICAgbG9hZERpc3BsYXlVUkwsXG4gICAgICBjb2x1bW5Db3VudCxcbiAgICAgIGd1dHRlcixcbiAgICB9LFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGluZGV4ID0gcm93SW5kZXggKiBjb2x1bW5Db3VudCArIGNvbHVtbkluZGV4O1xuICBpZiAoaW5kZXggPj0gbWVkaWFJdGVtcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBmaWxlID0gbWVkaWFJdGVtc1tpbmRleF07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICB0YWJJbmRleD1cIjBcIlxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgLi4uc3R5bGUsXG4gICAgICAgIGxlZnQ6IHN0eWxlLmxlZnQgKyBndXR0ZXIgKiBjb2x1bW5JbmRleCxcbiAgICAgICAgdG9wOiBzdHlsZS50b3AgKyBndXR0ZXIsXG4gICAgICAgIHdpZHRoOiBzdHlsZS53aWR0aCAtIGd1dHRlcixcbiAgICAgICAgaGVpZ2h0OiBzdHlsZS5oZWlnaHQgLSBndXR0ZXIsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxNZWRpYUxpYnJhcnlDYXJkXG4gICAgICAgIGtleT17ZmlsZS5rZXl9XG4gICAgICAgIGlzU2VsZWN0ZWQ9e2lzU2VsZWN0ZWRGaWxlKGZpbGUpfVxuICAgICAgICB0ZXh0PXtmaWxlLm5hbWV9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQXNzZXRDbGljayhmaWxlKX1cbiAgICAgICAgaXNEcmFmdD17ZmlsZS5kcmFmdH1cbiAgICAgICAgZHJhZnRUZXh0PXtjYXJkRHJhZnRUZXh0fVxuICAgICAgICB3aWR0aD17Y2FyZFdpZHRofVxuICAgICAgICBoZWlnaHQ9e2NhcmRIZWlnaHR9XG4gICAgICAgIG1hcmdpbj17JzBweCd9XG4gICAgICAgIGlzUHJpdmF0ZT17aXNQcml2YXRlfVxuICAgICAgICBkaXNwbGF5VVJMPXtkaXNwbGF5VVJMcy5nZXQoZmlsZS5pZCwgZmlsZS51cmwgPyBNYXAoeyB1cmw6IGZpbGUudXJsIH0pIDogTWFwKCkpfVxuICAgICAgICBsb2FkRGlzcGxheVVSTD17KCkgPT4gbG9hZERpc3BsYXlVUkwoZmlsZSl9XG4gICAgICAgIHR5cGU9e2ZpbGUudHlwZX1cbiAgICAgICAgaXNWaWV3YWJsZUltYWdlPXtmaWxlLmlzVmlld2FibGVJbWFnZX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmZ1bmN0aW9uIFZpcnR1YWxpemVkR3JpZChwcm9wcykge1xuICBjb25zdCB7IG1lZGlhSXRlbXMsIHNldFNjcm9sbENvbnRhaW5lclJlZiB9ID0gcHJvcHM7XG5cbiAgcmV0dXJuIChcbiAgICA8Q2FyZEdyaWRDb250YWluZXIgcmVmPXtzZXRTY3JvbGxDb250YWluZXJSZWZ9PlxuICAgICAgPEF1dG9TaXplcj5cbiAgICAgICAgeyh7IGhlaWdodCwgd2lkdGggfSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGNhcmRXaWR0aCA9IHBhcnNlSW50KHByb3BzLmNhcmRXaWR0aCwgMTApO1xuICAgICAgICAgIGNvbnN0IGNhcmRIZWlnaHQgPSBwYXJzZUludChwcm9wcy5jYXJkSGVpZ2h0LCAxMCk7XG4gICAgICAgICAgY29uc3QgZ3V0dGVyID0gcGFyc2VJbnQocHJvcHMuY2FyZE1hcmdpbiwgMTApO1xuICAgICAgICAgIGNvbnN0IGNvbHVtbldpZHRoID0gY2FyZFdpZHRoICsgZ3V0dGVyO1xuICAgICAgICAgIGNvbnN0IHJvd0hlaWdodCA9IGNhcmRIZWlnaHQgKyBndXR0ZXI7XG4gICAgICAgICAgY29uc3QgY29sdW1uQ291bnQgPSBNYXRoLmZsb29yKHdpZHRoIC8gY29sdW1uV2lkdGgpO1xuICAgICAgICAgIGNvbnN0IHJvd0NvdW50ID0gTWF0aC5jZWlsKG1lZGlhSXRlbXMubGVuZ3RoIC8gY29sdW1uQ291bnQpO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8R3JpZFxuICAgICAgICAgICAgICBjb2x1bW5Db3VudD17Y29sdW1uQ291bnR9XG4gICAgICAgICAgICAgIGNvbHVtbldpZHRoPXtjb2x1bW5XaWR0aH1cbiAgICAgICAgICAgICAgcm93Q291bnQ9e3Jvd0NvdW50fVxuICAgICAgICAgICAgICByb3dIZWlnaHQ9e3Jvd0hlaWdodH1cbiAgICAgICAgICAgICAgd2lkdGg9e3dpZHRofVxuICAgICAgICAgICAgICBoZWlnaHQ9e2hlaWdodH1cbiAgICAgICAgICAgICAgaXRlbURhdGE9e3sgLi4ucHJvcHMsIGd1dHRlciwgY29sdW1uQ291bnQgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge0NhcmRXcmFwcGVyfVxuICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICk7XG4gICAgICAgIH19XG4gICAgICA8L0F1dG9TaXplcj5cbiAgICA8L0NhcmRHcmlkQ29udGFpbmVyPlxuICApO1xufVxuXG5mdW5jdGlvbiBQYWdpbmF0ZWRHcmlkKHtcbiAgc2V0U2Nyb2xsQ29udGFpbmVyUmVmLFxuICBtZWRpYUl0ZW1zLFxuICBpc1NlbGVjdGVkRmlsZSxcbiAgb25Bc3NldENsaWNrLFxuICBjYXJkRHJhZnRUZXh0LFxuICBjYXJkV2lkdGgsXG4gIGNhcmRIZWlnaHQsXG4gIGNhcmRNYXJnaW4sXG4gIGlzUHJpdmF0ZSxcbiAgZGlzcGxheVVSTHMsXG4gIGxvYWREaXNwbGF5VVJMLFxuICBjYW5Mb2FkTW9yZSxcbiAgb25Mb2FkTW9yZSxcbiAgaXNQYWdpbmF0aW5nLFxuICBwYWdpbmF0aW5nTWVzc2FnZSxcbn0pIHtcbiAgcmV0dXJuIChcbiAgICA8Q2FyZEdyaWRDb250YWluZXIgcmVmPXtzZXRTY3JvbGxDb250YWluZXJSZWZ9PlxuICAgICAgPENhcmRHcmlkPlxuICAgICAgICB7bWVkaWFJdGVtcy5tYXAoZmlsZSA9PiAoXG4gICAgICAgICAgPE1lZGlhTGlicmFyeUNhcmRcbiAgICAgICAgICAgIGtleT17ZmlsZS5rZXl9XG4gICAgICAgICAgICBpc1NlbGVjdGVkPXtpc1NlbGVjdGVkRmlsZShmaWxlKX1cbiAgICAgICAgICAgIHRleHQ9e2ZpbGUubmFtZX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQXNzZXRDbGljayhmaWxlKX1cbiAgICAgICAgICAgIGlzRHJhZnQ9e2ZpbGUuZHJhZnR9XG4gICAgICAgICAgICBkcmFmdFRleHQ9e2NhcmREcmFmdFRleHR9XG4gICAgICAgICAgICB3aWR0aD17Y2FyZFdpZHRofVxuICAgICAgICAgICAgaGVpZ2h0PXtjYXJkSGVpZ2h0fVxuICAgICAgICAgICAgbWFyZ2luPXtjYXJkTWFyZ2lufVxuICAgICAgICAgICAgaXNQcml2YXRlPXtpc1ByaXZhdGV9XG4gICAgICAgICAgICBkaXNwbGF5VVJMPXtkaXNwbGF5VVJMcy5nZXQoZmlsZS5pZCwgZmlsZS51cmwgPyBNYXAoeyB1cmw6IGZpbGUudXJsIH0pIDogTWFwKCkpfVxuICAgICAgICAgICAgbG9hZERpc3BsYXlVUkw9eygpID0+IGxvYWREaXNwbGF5VVJMKGZpbGUpfVxuICAgICAgICAgICAgdHlwZT17ZmlsZS50eXBlfVxuICAgICAgICAgICAgaXNWaWV3YWJsZUltYWdlPXtmaWxlLmlzVmlld2FibGVJbWFnZX1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgICAgeyFjYW5Mb2FkTW9yZSA/IG51bGwgOiA8V2F5cG9pbnQgb25FbnRlcj17b25Mb2FkTW9yZX0gLz59XG4gICAgICA8L0NhcmRHcmlkPlxuICAgICAgeyFpc1BhZ2luYXRpbmcgPyBudWxsIDogKFxuICAgICAgICA8UGFnaW5hdGluZ01lc3NhZ2UgaXNQcml2YXRlPXtpc1ByaXZhdGV9PntwYWdpbmF0aW5nTWVzc2FnZX08L1BhZ2luYXRpbmdNZXNzYWdlPlxuICAgICAgKX1cbiAgICA8L0NhcmRHcmlkQ29udGFpbmVyPlxuICApO1xufVxuXG5jb25zdCBDYXJkR3JpZENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIG92ZXJmbG93LXk6IGF1dG87XG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IENhcmRHcmlkID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC13cmFwOiB3cmFwO1xuXG4gIG1hcmdpbi1sZWZ0OiAtMTBweDtcbiAgbWFyZ2luLXJpZ2h0OiAtMTBweDtcbmA7XG5cbmNvbnN0IFBhZ2luYXRpbmdNZXNzYWdlID0gc3R5bGVkLmgxYFxuICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy5pc1ByaXZhdGUgJiYgY29sb3JzLnRleHRGaWVsZEJvcmRlcn07XG5gO1xuXG5mdW5jdGlvbiBNZWRpYUxpYnJhcnlDYXJkR3JpZChwcm9wcykge1xuICBjb25zdCB7IGNhbkxvYWRNb3JlLCBpc1BhZ2luYXRpbmcgfSA9IHByb3BzO1xuICBpZiAoY2FuTG9hZE1vcmUgfHwgaXNQYWdpbmF0aW5nKSB7XG4gICAgcmV0dXJuIDxQYWdpbmF0ZWRHcmlkIHsuLi5wcm9wc30gLz47XG4gIH1cbiAgcmV0dXJuIDxWaXJ0dWFsaXplZEdyaWQgey4uLnByb3BzfSAvPjtcbn1cblxuTWVkaWFMaWJyYXJ5Q2FyZEdyaWQucHJvcFR5cGVzID0ge1xuICBzZXRTY3JvbGxDb250YWluZXJSZWY6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG1lZGlhSXRlbXM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBkaXNwbGF5VVJMOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAga2V5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBkcmFmdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgfSksXG4gICkuaXNSZXF1aXJlZCxcbiAgaXNTZWxlY3RlZEZpbGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uQXNzZXRDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgY2FuTG9hZE1vcmU6IFByb3BUeXBlcy5ib29sLFxuICBvbkxvYWRNb3JlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBpc1BhZ2luYXRpbmc6IFByb3BUeXBlcy5ib29sLFxuICBwYWdpbmF0aW5nTWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2FyZERyYWZ0VGV4dDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBjYXJkV2lkdGg6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY2FyZE1hcmdpbjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBsb2FkRGlzcGxheVVSTDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNQcml2YXRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzcGxheVVSTHM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE1hcCkuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lZGlhTGlicmFyeUNhcmRHcmlkO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const PaginatingMessage = /*#__PURE__*/(0, _base.default)("h1", {
  target: "e1l5oka20",
  label: "PaginatingMessage"
})("color:", props => props.isPrivate && _decapCmsUiDefault.colors.textFieldBorder, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnS21DIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgV2F5cG9pbnQgfSBmcm9tICdyZWFjdC13YXlwb2ludCc7XG5pbXBvcnQgeyBNYXAgfSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgRml4ZWRTaXplR3JpZCBhcyBHcmlkIH0gZnJvbSAncmVhY3Qtd2luZG93JztcbmltcG9ydCBBdXRvU2l6ZXIgZnJvbSAncmVhY3QtdmlydHVhbGl6ZWQtYXV0by1zaXplcic7XG5cbmltcG9ydCBNZWRpYUxpYnJhcnlDYXJkIGZyb20gJy4vTWVkaWFMaWJyYXJ5Q2FyZCc7XG5cbmZ1bmN0aW9uIENhcmRXcmFwcGVyKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICByb3dJbmRleCxcbiAgICBjb2x1bW5JbmRleCxcbiAgICBzdHlsZSxcbiAgICBkYXRhOiB7XG4gICAgICBtZWRpYUl0ZW1zLFxuICAgICAgaXNTZWxlY3RlZEZpbGUsXG4gICAgICBvbkFzc2V0Q2xpY2ssXG4gICAgICBjYXJkRHJhZnRUZXh0LFxuICAgICAgY2FyZFdpZHRoLFxuICAgICAgY2FyZEhlaWdodCxcbiAgICAgIGlzUHJpdmF0ZSxcbiAgICAgIGRpc3BsYXlVUkxzLFxuICAgICAgbG9hZERpc3BsYXlVUkwsXG4gICAgICBjb2x1bW5Db3VudCxcbiAgICAgIGd1dHRlcixcbiAgICB9LFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGluZGV4ID0gcm93SW5kZXggKiBjb2x1bW5Db3VudCArIGNvbHVtbkluZGV4O1xuICBpZiAoaW5kZXggPj0gbWVkaWFJdGVtcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBmaWxlID0gbWVkaWFJdGVtc1tpbmRleF07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICB0YWJJbmRleD1cIjBcIlxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgLi4uc3R5bGUsXG4gICAgICAgIGxlZnQ6IHN0eWxlLmxlZnQgKyBndXR0ZXIgKiBjb2x1bW5JbmRleCxcbiAgICAgICAgdG9wOiBzdHlsZS50b3AgKyBndXR0ZXIsXG4gICAgICAgIHdpZHRoOiBzdHlsZS53aWR0aCAtIGd1dHRlcixcbiAgICAgICAgaGVpZ2h0OiBzdHlsZS5oZWlnaHQgLSBndXR0ZXIsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxNZWRpYUxpYnJhcnlDYXJkXG4gICAgICAgIGtleT17ZmlsZS5rZXl9XG4gICAgICAgIGlzU2VsZWN0ZWQ9e2lzU2VsZWN0ZWRGaWxlKGZpbGUpfVxuICAgICAgICB0ZXh0PXtmaWxlLm5hbWV9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQXNzZXRDbGljayhmaWxlKX1cbiAgICAgICAgaXNEcmFmdD17ZmlsZS5kcmFmdH1cbiAgICAgICAgZHJhZnRUZXh0PXtjYXJkRHJhZnRUZXh0fVxuICAgICAgICB3aWR0aD17Y2FyZFdpZHRofVxuICAgICAgICBoZWlnaHQ9e2NhcmRIZWlnaHR9XG4gICAgICAgIG1hcmdpbj17JzBweCd9XG4gICAgICAgIGlzUHJpdmF0ZT17aXNQcml2YXRlfVxuICAgICAgICBkaXNwbGF5VVJMPXtkaXNwbGF5VVJMcy5nZXQoZmlsZS5pZCwgZmlsZS51cmwgPyBNYXAoeyB1cmw6IGZpbGUudXJsIH0pIDogTWFwKCkpfVxuICAgICAgICBsb2FkRGlzcGxheVVSTD17KCkgPT4gbG9hZERpc3BsYXlVUkwoZmlsZSl9XG4gICAgICAgIHR5cGU9e2ZpbGUudHlwZX1cbiAgICAgICAgaXNWaWV3YWJsZUltYWdlPXtmaWxlLmlzVmlld2FibGVJbWFnZX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmZ1bmN0aW9uIFZpcnR1YWxpemVkR3JpZChwcm9wcykge1xuICBjb25zdCB7IG1lZGlhSXRlbXMsIHNldFNjcm9sbENvbnRhaW5lclJlZiB9ID0gcHJvcHM7XG5cbiAgcmV0dXJuIChcbiAgICA8Q2FyZEdyaWRDb250YWluZXIgcmVmPXtzZXRTY3JvbGxDb250YWluZXJSZWZ9PlxuICAgICAgPEF1dG9TaXplcj5cbiAgICAgICAgeyh7IGhlaWdodCwgd2lkdGggfSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGNhcmRXaWR0aCA9IHBhcnNlSW50KHByb3BzLmNhcmRXaWR0aCwgMTApO1xuICAgICAgICAgIGNvbnN0IGNhcmRIZWlnaHQgPSBwYXJzZUludChwcm9wcy5jYXJkSGVpZ2h0LCAxMCk7XG4gICAgICAgICAgY29uc3QgZ3V0dGVyID0gcGFyc2VJbnQocHJvcHMuY2FyZE1hcmdpbiwgMTApO1xuICAgICAgICAgIGNvbnN0IGNvbHVtbldpZHRoID0gY2FyZFdpZHRoICsgZ3V0dGVyO1xuICAgICAgICAgIGNvbnN0IHJvd0hlaWdodCA9IGNhcmRIZWlnaHQgKyBndXR0ZXI7XG4gICAgICAgICAgY29uc3QgY29sdW1uQ291bnQgPSBNYXRoLmZsb29yKHdpZHRoIC8gY29sdW1uV2lkdGgpO1xuICAgICAgICAgIGNvbnN0IHJvd0NvdW50ID0gTWF0aC5jZWlsKG1lZGlhSXRlbXMubGVuZ3RoIC8gY29sdW1uQ291bnQpO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8R3JpZFxuICAgICAgICAgICAgICBjb2x1bW5Db3VudD17Y29sdW1uQ291bnR9XG4gICAgICAgICAgICAgIGNvbHVtbldpZHRoPXtjb2x1bW5XaWR0aH1cbiAgICAgICAgICAgICAgcm93Q291bnQ9e3Jvd0NvdW50fVxuICAgICAgICAgICAgICByb3dIZWlnaHQ9e3Jvd0hlaWdodH1cbiAgICAgICAgICAgICAgd2lkdGg9e3dpZHRofVxuICAgICAgICAgICAgICBoZWlnaHQ9e2hlaWdodH1cbiAgICAgICAgICAgICAgaXRlbURhdGE9e3sgLi4ucHJvcHMsIGd1dHRlciwgY29sdW1uQ291bnQgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge0NhcmRXcmFwcGVyfVxuICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICk7XG4gICAgICAgIH19XG4gICAgICA8L0F1dG9TaXplcj5cbiAgICA8L0NhcmRHcmlkQ29udGFpbmVyPlxuICApO1xufVxuXG5mdW5jdGlvbiBQYWdpbmF0ZWRHcmlkKHtcbiAgc2V0U2Nyb2xsQ29udGFpbmVyUmVmLFxuICBtZWRpYUl0ZW1zLFxuICBpc1NlbGVjdGVkRmlsZSxcbiAgb25Bc3NldENsaWNrLFxuICBjYXJkRHJhZnRUZXh0LFxuICBjYXJkV2lkdGgsXG4gIGNhcmRIZWlnaHQsXG4gIGNhcmRNYXJnaW4sXG4gIGlzUHJpdmF0ZSxcbiAgZGlzcGxheVVSTHMsXG4gIGxvYWREaXNwbGF5VVJMLFxuICBjYW5Mb2FkTW9yZSxcbiAgb25Mb2FkTW9yZSxcbiAgaXNQYWdpbmF0aW5nLFxuICBwYWdpbmF0aW5nTWVzc2FnZSxcbn0pIHtcbiAgcmV0dXJuIChcbiAgICA8Q2FyZEdyaWRDb250YWluZXIgcmVmPXtzZXRTY3JvbGxDb250YWluZXJSZWZ9PlxuICAgICAgPENhcmRHcmlkPlxuICAgICAgICB7bWVkaWFJdGVtcy5tYXAoZmlsZSA9PiAoXG4gICAgICAgICAgPE1lZGlhTGlicmFyeUNhcmRcbiAgICAgICAgICAgIGtleT17ZmlsZS5rZXl9XG4gICAgICAgICAgICBpc1NlbGVjdGVkPXtpc1NlbGVjdGVkRmlsZShmaWxlKX1cbiAgICAgICAgICAgIHRleHQ9e2ZpbGUubmFtZX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQXNzZXRDbGljayhmaWxlKX1cbiAgICAgICAgICAgIGlzRHJhZnQ9e2ZpbGUuZHJhZnR9XG4gICAgICAgICAgICBkcmFmdFRleHQ9e2NhcmREcmFmdFRleHR9XG4gICAgICAgICAgICB3aWR0aD17Y2FyZFdpZHRofVxuICAgICAgICAgICAgaGVpZ2h0PXtjYXJkSGVpZ2h0fVxuICAgICAgICAgICAgbWFyZ2luPXtjYXJkTWFyZ2lufVxuICAgICAgICAgICAgaXNQcml2YXRlPXtpc1ByaXZhdGV9XG4gICAgICAgICAgICBkaXNwbGF5VVJMPXtkaXNwbGF5VVJMcy5nZXQoZmlsZS5pZCwgZmlsZS51cmwgPyBNYXAoeyB1cmw6IGZpbGUudXJsIH0pIDogTWFwKCkpfVxuICAgICAgICAgICAgbG9hZERpc3BsYXlVUkw9eygpID0+IGxvYWREaXNwbGF5VVJMKGZpbGUpfVxuICAgICAgICAgICAgdHlwZT17ZmlsZS50eXBlfVxuICAgICAgICAgICAgaXNWaWV3YWJsZUltYWdlPXtmaWxlLmlzVmlld2FibGVJbWFnZX1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgICAgeyFjYW5Mb2FkTW9yZSA/IG51bGwgOiA8V2F5cG9pbnQgb25FbnRlcj17b25Mb2FkTW9yZX0gLz59XG4gICAgICA8L0NhcmRHcmlkPlxuICAgICAgeyFpc1BhZ2luYXRpbmcgPyBudWxsIDogKFxuICAgICAgICA8UGFnaW5hdGluZ01lc3NhZ2UgaXNQcml2YXRlPXtpc1ByaXZhdGV9PntwYWdpbmF0aW5nTWVzc2FnZX08L1BhZ2luYXRpbmdNZXNzYWdlPlxuICAgICAgKX1cbiAgICA8L0NhcmRHcmlkQ29udGFpbmVyPlxuICApO1xufVxuXG5jb25zdCBDYXJkR3JpZENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIG92ZXJmbG93LXk6IGF1dG87XG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IENhcmRHcmlkID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC13cmFwOiB3cmFwO1xuXG4gIG1hcmdpbi1sZWZ0OiAtMTBweDtcbiAgbWFyZ2luLXJpZ2h0OiAtMTBweDtcbmA7XG5cbmNvbnN0IFBhZ2luYXRpbmdNZXNzYWdlID0gc3R5bGVkLmgxYFxuICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy5pc1ByaXZhdGUgJiYgY29sb3JzLnRleHRGaWVsZEJvcmRlcn07XG5gO1xuXG5mdW5jdGlvbiBNZWRpYUxpYnJhcnlDYXJkR3JpZChwcm9wcykge1xuICBjb25zdCB7IGNhbkxvYWRNb3JlLCBpc1BhZ2luYXRpbmcgfSA9IHByb3BzO1xuICBpZiAoY2FuTG9hZE1vcmUgfHwgaXNQYWdpbmF0aW5nKSB7XG4gICAgcmV0dXJuIDxQYWdpbmF0ZWRHcmlkIHsuLi5wcm9wc30gLz47XG4gIH1cbiAgcmV0dXJuIDxWaXJ0dWFsaXplZEdyaWQgey4uLnByb3BzfSAvPjtcbn1cblxuTWVkaWFMaWJyYXJ5Q2FyZEdyaWQucHJvcFR5cGVzID0ge1xuICBzZXRTY3JvbGxDb250YWluZXJSZWY6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG1lZGlhSXRlbXM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBkaXNwbGF5VVJMOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAga2V5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBkcmFmdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgfSksXG4gICkuaXNSZXF1aXJlZCxcbiAgaXNTZWxlY3RlZEZpbGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uQXNzZXRDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgY2FuTG9hZE1vcmU6IFByb3BUeXBlcy5ib29sLFxuICBvbkxvYWRNb3JlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBpc1BhZ2luYXRpbmc6IFByb3BUeXBlcy5ib29sLFxuICBwYWdpbmF0aW5nTWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2FyZERyYWZ0VGV4dDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBjYXJkV2lkdGg6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY2FyZE1hcmdpbjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBsb2FkRGlzcGxheVVSTDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNQcml2YXRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzcGxheVVSTHM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE1hcCkuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lZGlhTGlicmFyeUNhcmRHcmlkO1xuIl19 */"));
function MediaLibraryCardGrid(props) {
  const {
    canLoadMore,
    isPaginating
  } = props;
  if (canLoadMore || isPaginating) {
    return (0, _react2.jsx)(PaginatedGrid, props);
  }
  return (0, _react2.jsx)(VirtualizedGrid, props);
}
MediaLibraryCardGrid.propTypes = {
  setScrollContainerRef: _propTypes.default.func.isRequired,
  mediaItems: _propTypes.default.arrayOf(_propTypes.default.shape({
    displayURL: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
    id: _propTypes.default.string.isRequired,
    key: _propTypes.default.string.isRequired,
    name: _propTypes.default.string.isRequired,
    type: _propTypes.default.string.isRequired,
    draft: _propTypes.default.bool
  })).isRequired,
  isSelectedFile: _propTypes.default.func.isRequired,
  onAssetClick: _propTypes.default.func.isRequired,
  canLoadMore: _propTypes.default.bool,
  onLoadMore: _propTypes.default.func.isRequired,
  isPaginating: _propTypes.default.bool,
  paginatingMessage: _propTypes.default.string,
  cardDraftText: _propTypes.default.string.isRequired,
  cardWidth: _propTypes.default.string.isRequired,
  cardMargin: _propTypes.default.string.isRequired,
  loadDisplayURL: _propTypes.default.func.isRequired,
  isPrivate: _propTypes.default.bool,
  displayURLs: _propTypes.default.instanceOf(_immutable.Map).isRequired
};
var _default = exports.default = MediaLibraryCardGrid;