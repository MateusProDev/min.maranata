"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Collection = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _reactRedux = require("react-redux");
var _reactPolyglot = require("react-polyglot");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _urlHelper = require("../../lib/urlHelper");
var _Sidebar = _interopRequireDefault(require("./Sidebar"));
var _CollectionTop = _interopRequireDefault(require("./CollectionTop"));
var _EntriesCollection = _interopRequireDefault(require("./Entries/EntriesCollection"));
var _EntriesSearch = _interopRequireDefault(require("./Entries/EntriesSearch"));
var _CollectionControls = _interopRequireDefault(require("./CollectionControls"));
var _entries = require("../../actions/entries");
var _collections = require("../../reducers/collections");
var _entries2 = require("../../reducers/entries");
var _react2 = require("@emotion/react");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const CollectionContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1sogrfi3",
  label: "CollectionContainer"
})("margin:", _decapCmsUiDefault.lengths.pageMargin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyQnNDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBsZW5ndGhzLCBjb21wb25lbnRzIH0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5pbXBvcnQgeyBnZXROZXdFbnRyeVVybCB9IGZyb20gJy4uLy4uL2xpYi91cmxIZWxwZXInO1xuaW1wb3J0IFNpZGViYXIgZnJvbSAnLi9TaWRlYmFyJztcbmltcG9ydCBDb2xsZWN0aW9uVG9wIGZyb20gJy4vQ29sbGVjdGlvblRvcCc7XG5pbXBvcnQgRW50cmllc0NvbGxlY3Rpb24gZnJvbSAnLi9FbnRyaWVzL0VudHJpZXNDb2xsZWN0aW9uJztcbmltcG9ydCBFbnRyaWVzU2VhcmNoIGZyb20gJy4vRW50cmllcy9FbnRyaWVzU2VhcmNoJztcbmltcG9ydCBDb2xsZWN0aW9uQ29udHJvbHMgZnJvbSAnLi9Db2xsZWN0aW9uQ29udHJvbHMnO1xuaW1wb3J0IHsgc29ydEJ5RmllbGQsIGZpbHRlckJ5RmllbGQsIGNoYW5nZVZpZXdTdHlsZSwgZ3JvdXBCeUZpZWxkIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9lbnRyaWVzJztcbmltcG9ydCB7XG4gIHNlbGVjdFNvcnRhYmxlRmllbGRzLFxuICBzZWxlY3RWaWV3RmlsdGVycyxcbiAgc2VsZWN0Vmlld0dyb3Vwcyxcbn0gZnJvbSAnLi4vLi4vcmVkdWNlcnMvY29sbGVjdGlvbnMnO1xuaW1wb3J0IHtcbiAgc2VsZWN0RW50cmllc1NvcnQsXG4gIHNlbGVjdEVudHJpZXNGaWx0ZXIsXG4gIHNlbGVjdEVudHJpZXNHcm91cCxcbiAgc2VsZWN0Vmlld1N0eWxlLFxufSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9lbnRyaWVzJztcblxuY29uc3QgQ29sbGVjdGlvbkNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbjogJHtsZW5ndGhzLnBhZ2VNYXJnaW59O1xuYDtcblxuY29uc3QgQ29sbGVjdGlvbk1haW4gPSBzdHlsZWQubWFpbmBcbiAgcGFkZGluZy1sZWZ0OiAyODBweDtcbmA7XG5cbmNvbnN0IFNlYXJjaFJlc3VsdENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gICR7Y29tcG9uZW50cy5jYXJkVG9wfTtcbiAgbWFyZ2luLWJvdHRvbTogMjJweDtcbmA7XG5cbmNvbnN0IFNlYXJjaFJlc3VsdEhlYWRpbmcgPSBzdHlsZWQuaDFgXG4gICR7Y29tcG9uZW50cy5jYXJkVG9wSGVhZGluZ307XG5gO1xuXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgc2VhcmNoVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb2xsZWN0aW9uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpc1NlYXJjaFJlc3VsdHM6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzU2luZ2xlU2VhcmNoUmVzdWx0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbnM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBzb3J0YWJsZUZpZWxkczogUHJvcFR5cGVzLmFycmF5LFxuICAgIHNvcnQ6IEltbXV0YWJsZVByb3BUeXBlcy5vcmRlcmVkTWFwLFxuICAgIG9uU29ydENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHJlbmRlckVudHJpZXNDb2xsZWN0aW9uID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY29sbGVjdGlvbiwgZmlsdGVyVGVybSwgdmlld1N0eWxlIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8RW50cmllc0NvbGxlY3Rpb24gY29sbGVjdGlvbj17Y29sbGVjdGlvbn0gdmlld1N0eWxlPXt2aWV3U3R5bGV9IGZpbHRlclRlcm09e2ZpbHRlclRlcm19IC8+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJFbnRyaWVzU2VhcmNoID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgc2VhcmNoVGVybSwgY29sbGVjdGlvbnMsIGNvbGxlY3Rpb24sIGlzU2luZ2xlU2VhcmNoUmVzdWx0IH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8RW50cmllc1NlYXJjaFxuICAgICAgICBjb2xsZWN0aW9ucz17aXNTaW5nbGVTZWFyY2hSZXN1bHQgPyBjb2xsZWN0aW9ucy5maWx0ZXIoYyA9PiBjID09PSBjb2xsZWN0aW9uKSA6IGNvbGxlY3Rpb25zfVxuICAgICAgICBzZWFyY2hUZXJtPXtzZWFyY2hUZXJtfVxuICAgICAgLz5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgY29sbGVjdGlvbnMsXG4gICAgICBjb2xsZWN0aW9uTmFtZSxcbiAgICAgIGlzU2VhcmNoRW5hYmxlZCxcbiAgICAgIGlzU2VhcmNoUmVzdWx0cyxcbiAgICAgIGlzU2luZ2xlU2VhcmNoUmVzdWx0LFxuICAgICAgc2VhcmNoVGVybSxcbiAgICAgIHNvcnRhYmxlRmllbGRzLFxuICAgICAgb25Tb3J0Q2xpY2ssXG4gICAgICBzb3J0LFxuICAgICAgdmlld0ZpbHRlcnMsXG4gICAgICB2aWV3R3JvdXBzLFxuICAgICAgZmlsdGVyVGVybSxcbiAgICAgIHQsXG4gICAgICBvbkZpbHRlckNsaWNrLFxuICAgICAgb25Hcm91cENsaWNrLFxuICAgICAgZmlsdGVyLFxuICAgICAgZ3JvdXAsXG4gICAgICBvbkNoYW5nZVZpZXdTdHlsZSxcbiAgICAgIHZpZXdTdHlsZSxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGxldCBuZXdFbnRyeVVybCA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKSA/IGdldE5ld0VudHJ5VXJsKGNvbGxlY3Rpb25OYW1lKSA6ICcnO1xuICAgIGlmIChuZXdFbnRyeVVybCAmJiBmaWx0ZXJUZXJtKSB7XG4gICAgICBuZXdFbnRyeVVybCA9IGdldE5ld0VudHJ5VXJsKGNvbGxlY3Rpb25OYW1lKTtcbiAgICAgIGlmIChmaWx0ZXJUZXJtKSB7XG4gICAgICAgIG5ld0VudHJ5VXJsID0gYCR7bmV3RW50cnlVcmx9P3BhdGg9JHtmaWx0ZXJUZXJtfWA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2VhcmNoUmVzdWx0S2V5ID1cbiAgICAgICdjb2xsZWN0aW9uLmNvbGxlY3Rpb25Ub3Auc2VhcmNoUmVzdWx0cycgKyAoaXNTaW5nbGVTZWFyY2hSZXN1bHQgPyAnSW5Db2xsZWN0aW9uJyA6ICcnKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8Q29sbGVjdGlvbkNvbnRhaW5lcj5cbiAgICAgICAgPFNpZGViYXJcbiAgICAgICAgICBjb2xsZWN0aW9ucz17Y29sbGVjdGlvbnN9XG4gICAgICAgICAgY29sbGVjdGlvbj17KCFpc1NlYXJjaFJlc3VsdHMgfHwgaXNTaW5nbGVTZWFyY2hSZXN1bHQpICYmIGNvbGxlY3Rpb259XG4gICAgICAgICAgaXNTZWFyY2hFbmFibGVkPXtpc1NlYXJjaEVuYWJsZWR9XG4gICAgICAgICAgc2VhcmNoVGVybT17c2VhcmNoVGVybX1cbiAgICAgICAgICBmaWx0ZXJUZXJtPXtmaWx0ZXJUZXJtfVxuICAgICAgICAvPlxuICAgICAgICA8Q29sbGVjdGlvbk1haW4+XG4gICAgICAgICAge2lzU2VhcmNoUmVzdWx0cyA/IChcbiAgICAgICAgICAgIDxTZWFyY2hSZXN1bHRDb250YWluZXI+XG4gICAgICAgICAgICAgIDxTZWFyY2hSZXN1bHRIZWFkaW5nPlxuICAgICAgICAgICAgICAgIHt0KHNlYXJjaFJlc3VsdEtleSwgeyBzZWFyY2hUZXJtLCBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uLmdldCgnbGFiZWwnKSB9KX1cbiAgICAgICAgICAgICAgPC9TZWFyY2hSZXN1bHRIZWFkaW5nPlxuICAgICAgICAgICAgPC9TZWFyY2hSZXN1bHRDb250YWluZXI+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgIDxDb2xsZWN0aW9uVG9wIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259IG5ld0VudHJ5VXJsPXtuZXdFbnRyeVVybH0gLz5cbiAgICAgICAgICAgICAgPENvbGxlY3Rpb25Db250cm9sc1xuICAgICAgICAgICAgICAgIHZpZXdTdHlsZT17dmlld1N0eWxlfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlVmlld1N0eWxlPXtvbkNoYW5nZVZpZXdTdHlsZX1cbiAgICAgICAgICAgICAgICBzb3J0YWJsZUZpZWxkcz17c29ydGFibGVGaWVsZHN9XG4gICAgICAgICAgICAgICAgb25Tb3J0Q2xpY2s9e29uU29ydENsaWNrfVxuICAgICAgICAgICAgICAgIHNvcnQ9e3NvcnR9XG4gICAgICAgICAgICAgICAgdmlld0ZpbHRlcnM9e3ZpZXdGaWx0ZXJzfVxuICAgICAgICAgICAgICAgIHZpZXdHcm91cHM9e3ZpZXdHcm91cHN9XG4gICAgICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAgICAgICBvbkZpbHRlckNsaWNrPXtvbkZpbHRlckNsaWNrfVxuICAgICAgICAgICAgICAgIG9uR3JvdXBDbGljaz17b25Hcm91cENsaWNrfVxuICAgICAgICAgICAgICAgIGZpbHRlcj17ZmlsdGVyfVxuICAgICAgICAgICAgICAgIGdyb3VwPXtncm91cH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICl9XG4gICAgICAgICAge2lzU2VhcmNoUmVzdWx0cyA/IHRoaXMucmVuZGVyRW50cmllc1NlYXJjaCgpIDogdGhpcy5yZW5kZXJFbnRyaWVzQ29sbGVjdGlvbigpfVxuICAgICAgICA8L0NvbGxlY3Rpb25NYWluPlxuICAgICAgPC9Db2xsZWN0aW9uQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcykge1xuICBjb25zdCB7IGNvbGxlY3Rpb25zIH0gPSBzdGF0ZTtcbiAgY29uc3QgaXNTZWFyY2hFbmFibGVkID0gc3RhdGUuY29uZmlnICYmIHN0YXRlLmNvbmZpZy5zZWFyY2ggIT0gZmFsc2U7XG4gIGNvbnN0IHsgaXNTZWFyY2hSZXN1bHRzLCBtYXRjaCwgdCB9ID0gb3duUHJvcHM7XG4gIGNvbnN0IHsgbmFtZSwgc2VhcmNoVGVybSA9ICcnLCBmaWx0ZXJUZXJtID0gJycgfSA9IG1hdGNoLnBhcmFtcztcbiAgY29uc3QgY29sbGVjdGlvbiA9IG5hbWUgPyBjb2xsZWN0aW9ucy5nZXQobmFtZSkgOiBjb2xsZWN0aW9ucy5maXJzdCgpO1xuICBjb25zdCBzb3J0ID0gc2VsZWN0RW50cmllc1NvcnQoc3RhdGUuZW50cmllcywgY29sbGVjdGlvbi5nZXQoJ25hbWUnKSk7XG4gIGNvbnN0IHNvcnRhYmxlRmllbGRzID0gc2VsZWN0U29ydGFibGVGaWVsZHMoY29sbGVjdGlvbiwgdCk7XG4gIGNvbnN0IHZpZXdGaWx0ZXJzID0gc2VsZWN0Vmlld0ZpbHRlcnMoY29sbGVjdGlvbik7XG4gIGNvbnN0IHZpZXdHcm91cHMgPSBzZWxlY3RWaWV3R3JvdXBzKGNvbGxlY3Rpb24pO1xuICBjb25zdCBmaWx0ZXIgPSBzZWxlY3RFbnRyaWVzRmlsdGVyKHN0YXRlLmVudHJpZXMsIGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpO1xuICBjb25zdCBncm91cCA9IHNlbGVjdEVudHJpZXNHcm91cChzdGF0ZS5lbnRyaWVzLCBjb2xsZWN0aW9uLmdldCgnbmFtZScpKTtcbiAgY29uc3Qgdmlld1N0eWxlID0gc2VsZWN0Vmlld1N0eWxlKHN0YXRlLmVudHJpZXMpO1xuXG4gIHJldHVybiB7XG4gICAgY29sbGVjdGlvbixcbiAgICBjb2xsZWN0aW9ucyxcbiAgICBjb2xsZWN0aW9uTmFtZTogbmFtZSxcbiAgICBpc1NlYXJjaEVuYWJsZWQsXG4gICAgaXNTZWFyY2hSZXN1bHRzLFxuICAgIHNlYXJjaFRlcm0sXG4gICAgZmlsdGVyVGVybSxcbiAgICBzb3J0LFxuICAgIHNvcnRhYmxlRmllbGRzLFxuICAgIHZpZXdGaWx0ZXJzLFxuICAgIHZpZXdHcm91cHMsXG4gICAgZmlsdGVyLFxuICAgIGdyb3VwLFxuICAgIHZpZXdTdHlsZSxcbiAgfTtcbn1cblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0ge1xuICBzb3J0QnlGaWVsZCxcbiAgZmlsdGVyQnlGaWVsZCxcbiAgY2hhbmdlVmlld1N0eWxlLFxuICBncm91cEJ5RmllbGQsXG59O1xuXG5mdW5jdGlvbiBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGVQcm9wcyxcbiAgICAuLi5vd25Qcm9wcyxcbiAgICBvblNvcnRDbGljazogKGtleSwgZGlyZWN0aW9uKSA9PlxuICAgICAgZGlzcGF0Y2hQcm9wcy5zb3J0QnlGaWVsZChzdGF0ZVByb3BzLmNvbGxlY3Rpb24sIGtleSwgZGlyZWN0aW9uKSxcbiAgICBvbkZpbHRlckNsaWNrOiBmaWx0ZXIgPT4gZGlzcGF0Y2hQcm9wcy5maWx0ZXJCeUZpZWxkKHN0YXRlUHJvcHMuY29sbGVjdGlvbiwgZmlsdGVyKSxcbiAgICBvbkdyb3VwQ2xpY2s6IGdyb3VwID0+IGRpc3BhdGNoUHJvcHMuZ3JvdXBCeUZpZWxkKHN0YXRlUHJvcHMuY29sbGVjdGlvbiwgZ3JvdXApLFxuICAgIG9uQ2hhbmdlVmlld1N0eWxlOiB2aWV3U3R5bGUgPT4gZGlzcGF0Y2hQcm9wcy5jaGFuZ2VWaWV3U3R5bGUodmlld1N0eWxlKSxcbiAgfTtcbn1cblxuY29uc3QgQ29ubmVjdGVkQ29sbGVjdGlvbiA9IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMpKENvbGxlY3Rpb24pO1xuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShDb25uZWN0ZWRDb2xsZWN0aW9uKTtcbiJdfQ== */"));
const CollectionMain = /*#__PURE__*/(0, _base.default)("main", {
  target: "e1sogrfi2",
  label: "CollectionMain"
})(process.env.NODE_ENV === "production" ? {
  name: "tka7ew",
  styles: "padding-left:280px"
} : {
  name: "tka7ew",
  styles: "padding-left:280px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const SearchResultContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1sogrfi1",
  label: "SearchResultContainer"
})(_decapCmsUiDefault.components.cardTop, ";margin-bottom:22px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SearchResultHeading = /*#__PURE__*/(0, _base.default)("h1", {
  target: "e1sogrfi0",
  label: "SearchResultHeading"
})(_decapCmsUiDefault.components.cardTopHeading, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
class Collection extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "renderEntriesCollection", () => {
      const {
        collection,
        filterTerm,
        viewStyle
      } = this.props;
      return (0, _react2.jsx)(_EntriesCollection.default, {
        collection: collection,
        viewStyle: viewStyle,
        filterTerm: filterTerm
      });
    });
    _defineProperty(this, "renderEntriesSearch", () => {
      const {
        searchTerm,
        collections,
        collection,
        isSingleSearchResult
      } = this.props;
      return (0, _react2.jsx)(_EntriesSearch.default, {
        collections: isSingleSearchResult ? collections.filter(c => c === collection) : collections,
        searchTerm: searchTerm
      });
    });
  }
  render() {
    const {
      collection,
      collections,
      collectionName,
      isSearchEnabled,
      isSearchResults,
      isSingleSearchResult,
      searchTerm,
      sortableFields,
      onSortClick,
      sort,
      viewFilters,
      viewGroups,
      filterTerm,
      t,
      onFilterClick,
      onGroupClick,
      filter,
      group,
      onChangeViewStyle,
      viewStyle
    } = this.props;
    let newEntryUrl = collection.get('create') ? (0, _urlHelper.getNewEntryUrl)(collectionName) : '';
    if (newEntryUrl && filterTerm) {
      newEntryUrl = (0, _urlHelper.getNewEntryUrl)(collectionName);
      if (filterTerm) {
        newEntryUrl = `${newEntryUrl}?path=${filterTerm}`;
      }
    }
    const searchResultKey = 'collection.collectionTop.searchResults' + (isSingleSearchResult ? 'InCollection' : '');
    return (0, _react2.jsx)(CollectionContainer, null, (0, _react2.jsx)(_Sidebar.default, {
      collections: collections,
      collection: (!isSearchResults || isSingleSearchResult) && collection,
      isSearchEnabled: isSearchEnabled,
      searchTerm: searchTerm,
      filterTerm: filterTerm
    }), (0, _react2.jsx)(CollectionMain, null, isSearchResults ? (0, _react2.jsx)(SearchResultContainer, null, (0, _react2.jsx)(SearchResultHeading, null, t(searchResultKey, {
      searchTerm,
      collection: collection.get('label')
    }))) : (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(_CollectionTop.default, {
      collection: collection,
      newEntryUrl: newEntryUrl
    }), (0, _react2.jsx)(_CollectionControls.default, {
      viewStyle: viewStyle,
      onChangeViewStyle: onChangeViewStyle,
      sortableFields: sortableFields,
      onSortClick: onSortClick,
      sort: sort,
      viewFilters: viewFilters,
      viewGroups: viewGroups,
      t: t,
      onFilterClick: onFilterClick,
      onGroupClick: onGroupClick,
      filter: filter,
      group: group
    })), isSearchResults ? this.renderEntriesSearch() : this.renderEntriesCollection()));
  }
}
exports.Collection = Collection;
_defineProperty(Collection, "propTypes", {
  searchTerm: _propTypes.default.string,
  collectionName: _propTypes.default.string,
  isSearchResults: _propTypes.default.bool,
  isSingleSearchResult: _propTypes.default.bool,
  collection: _reactImmutableProptypes.default.map.isRequired,
  collections: _reactImmutableProptypes.default.map.isRequired,
  sortableFields: _propTypes.default.array,
  sort: _reactImmutableProptypes.default.orderedMap,
  onSortClick: _propTypes.default.func.isRequired
});
function mapStateToProps(state, ownProps) {
  const {
    collections
  } = state;
  const isSearchEnabled = state.config && state.config.search != false;
  const {
    isSearchResults,
    match,
    t
  } = ownProps;
  const {
    name,
    searchTerm = '',
    filterTerm = ''
  } = match.params;
  const collection = name ? collections.get(name) : collections.first();
  const sort = (0, _entries2.selectEntriesSort)(state.entries, collection.get('name'));
  const sortableFields = (0, _collections.selectSortableFields)(collection, t);
  const viewFilters = (0, _collections.selectViewFilters)(collection);
  const viewGroups = (0, _collections.selectViewGroups)(collection);
  const filter = (0, _entries2.selectEntriesFilter)(state.entries, collection.get('name'));
  const group = (0, _entries2.selectEntriesGroup)(state.entries, collection.get('name'));
  const viewStyle = (0, _entries2.selectViewStyle)(state.entries);
  return {
    collection,
    collections,
    collectionName: name,
    isSearchEnabled,
    isSearchResults,
    searchTerm,
    filterTerm,
    sort,
    sortableFields,
    viewFilters,
    viewGroups,
    filter,
    group,
    viewStyle
  };
}
const mapDispatchToProps = {
  sortByField: _entries.sortByField,
  filterByField: _entries.filterByField,
  changeViewStyle: _entries.changeViewStyle,
  groupByField: _entries.groupByField
};
function mergeProps(stateProps, dispatchProps, ownProps) {
  return _objectSpread(_objectSpread(_objectSpread({}, stateProps), ownProps), {}, {
    onSortClick: (key, direction) => dispatchProps.sortByField(stateProps.collection, key, direction),
    onFilterClick: filter => dispatchProps.filterByField(stateProps.collection, filter),
    onGroupClick: group => dispatchProps.groupByField(stateProps.collection, group),
    onChangeViewStyle: viewStyle => dispatchProps.changeViewStyle(viewStyle)
  });
}
const ConnectedCollection = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(Collection);
var _default = exports.default = (0, _reactPolyglot.translate)()(ConnectedCollection);