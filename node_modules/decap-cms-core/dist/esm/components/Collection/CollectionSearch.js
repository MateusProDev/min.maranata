"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _react = _interopRequireDefault(require("react"));
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _reactPolyglot = require("react-polyglot");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _react2 = require("@emotion/react");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const SearchContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e6w847r7",
  label: "SearchContainer"
})("margin:0 12px;position:relative;", _decapCmsUiDefault.Icon, "{position:absolute;top:0;left:6px;z-index:", _decapCmsUiDefault.zIndex.zIndex2, ";height:100%;display:flex;align-items:center;pointer-events:none;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const InputContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e6w847r6",
  label: "InputContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "1dbubah",
  styles: "display:flex;align-items:center;position:relative"
} : {
  name: "1dbubah",
  styles: "display:flex;align-items:center;position:relative",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const SearchInput = /*#__PURE__*/(0, _base.default)("input", {
  target: "e6w847r5",
  label: "SearchInput"
})("background-color:#eff0f4;border-radius:", _decapCmsUiDefault.lengths.borderRadius, ";font-size:14px;padding:10px 6px 10px 32px;width:100%;position:relative;z-index:", _decapCmsUiDefault.zIndex.zIndex1, ";&:focus{outline:none;box-shadow:inset 0 0 0 2px ", _decapCmsUiDefault.colorsRaw.blue, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SuggestionsContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e6w847r4",
  label: "SuggestionsContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "pw7jst",
  styles: "position:relative;width:100%"
} : {
  name: "pw7jst",
  styles: "position:relative;width:100%",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const Suggestions = /*#__PURE__*/(0, _base.default)("ul", {
  target: "e6w847r3",
  label: "Suggestions"
})("position:absolute;top:6px;left:0;right:0;padding:10px 0;margin:0;list-style:none;background-color:#fff;border-radius:", _decapCmsUiDefault.lengths.borderRadius, ";border:1px solid ", _decapCmsUiDefault.colors.textFieldBorder, ";z-index:", _decapCmsUiDefault.zIndex.zIndex1, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SuggestionHeader = /*#__PURE__*/(0, _base.default)("li", {
  target: "e6w847r2",
  label: "SuggestionHeader"
})("padding:0 6px 6px 32px;font-size:12px;color:", _decapCmsUiDefault.colors.text, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SuggestionItem = /*#__PURE__*/(0, _base.default)("li", {
  target: "e6w847r1",
  label: "SuggestionItem"
})(({
  isActive
}) => `
  color: ${isActive ? _decapCmsUiDefault.colors.active : _decapCmsUiDefault.colorsRaw.grayDark};
  background-color: ${isActive ? _decapCmsUiDefault.colors.activeBackground : 'inherit'};
  padding: 6px 6px 6px 32px;
  cursor: pointer;
  position: relative;

  &:hover {
    color: ${_decapCmsUiDefault.colors.active};
    background-color: ${_decapCmsUiDefault.colors.activeBackground};
  }
`, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const SuggestionDivider = /*#__PURE__*/(0, _base.default)("div", {
  target: "e6w847r0",
  label: "SuggestionDivider"
})(process.env.NODE_ENV === "production" ? {
  name: "1d3w5wq",
  styles: "width:100%"
} : {
  name: "1d3w5wq",
  styles: "width:100%",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
class CollectionSearch extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      query: this.props.searchTerm,
      suggestionsVisible: false,
      // default to the currently selected
      selectedCollectionIdx: this.getSelectedSelectionBasedOnProps()
    });
    _defineProperty(this, "submitSearch", () => {
      const {
        onSubmit,
        collections
      } = this.props;
      const {
        selectedCollectionIdx,
        query
      } = this.state;
      this.toggleSuggestions(false);
      if (selectedCollectionIdx !== -1) {
        onSubmit(query, collections.toIndexedSeq().getIn([selectedCollectionIdx, 'name']));
      } else {
        onSubmit(query);
      }
    });
    _defineProperty(this, "handleKeyDown", event => {
      const {
        suggestionsVisible
      } = this.state;
      if (event.key === 'Enter') {
        this.submitSearch();
      }
      if (suggestionsVisible) {
        // allow closing of suggestions with escape key
        if (event.key === 'Escape') {
          this.toggleSuggestions(false);
        }
        if (event.key === 'ArrowDown') {
          this.selectNextSuggestion();
          event.preventDefault();
        } else if (event.key === 'ArrowUp') {
          this.selectPreviousSuggestion();
          event.preventDefault();
        }
      }
    });
    _defineProperty(this, "handleQueryChange", query => {
      this.setState({
        query
      });
      this.toggleSuggestions(query !== '');
      if (query === '') {
        this.resetSelectedSuggestion();
      }
    });
    _defineProperty(this, "handleSuggestionClick", (event, idx) => {
      this.setState({
        selectedCollectionIdx: idx
      }, this.submitSearch);
      event.preventDefault();
    });
  }
  componentDidUpdate(prevProps) {
    if (prevProps.collection !== this.props.collection) {
      const selectedCollectionIdx = this.getSelectedSelectionBasedOnProps();
      this.setState({
        selectedCollectionIdx
      });
    }
  }
  getSelectedSelectionBasedOnProps() {
    const {
      collection,
      collections
    } = this.props;
    return collection ? collections.keySeq().indexOf(collection.get('name')) : -1;
  }
  toggleSuggestions(visible) {
    this.setState({
      suggestionsVisible: visible
    });
  }
  selectNextSuggestion() {
    const {
      collections
    } = this.props;
    const {
      selectedCollectionIdx
    } = this.state;
    this.setState({
      selectedCollectionIdx: Math.min(selectedCollectionIdx + 1, collections.size - 1)
    });
  }
  selectPreviousSuggestion() {
    const {
      selectedCollectionIdx
    } = this.state;
    this.setState({
      selectedCollectionIdx: Math.max(selectedCollectionIdx - 1, -1)
    });
  }
  resetSelectedSuggestion() {
    this.setState({
      selectedCollectionIdx: -1
    });
  }
  render() {
    const {
      collections,
      t
    } = this.props;
    const {
      suggestionsVisible,
      selectedCollectionIdx,
      query
    } = this.state;
    return (0, _react2.jsx)(SearchContainer, {
      onBlur: () => this.toggleSuggestions(false),
      onFocus: () => this.toggleSuggestions(query !== '')
    }, (0, _react2.jsx)(InputContainer, null, (0, _react2.jsx)(_decapCmsUiDefault.Icon, {
      type: "search"
    }), (0, _react2.jsx)(SearchInput, {
      onChange: e => this.handleQueryChange(e.target.value),
      onKeyDown: this.handleKeyDown,
      onClick: () => this.toggleSuggestions(true),
      placeholder: t('collection.sidebar.searchAll'),
      value: query
    })), suggestionsVisible && (0, _react2.jsx)(SuggestionsContainer, null, (0, _react2.jsx)(Suggestions, null, (0, _react2.jsx)(SuggestionHeader, null, t('collection.sidebar.searchIn')), (0, _react2.jsx)(SuggestionItem, {
      isActive: selectedCollectionIdx === -1,
      onClick: e => this.handleSuggestionClick(e, -1),
      onMouseDown: e => e.preventDefault()
    }, t('collection.sidebar.allCollections')), (0, _react2.jsx)(SuggestionDivider, null), collections.toIndexedSeq().map((collection, idx) => (0, _react2.jsx)(SuggestionItem, {
      key: idx,
      isActive: idx === selectedCollectionIdx,
      onClick: e => this.handleSuggestionClick(e, idx),
      onMouseDown: e => e.preventDefault()
    }, collection.get('label'))))));
  }
}
_defineProperty(CollectionSearch, "propTypes", {
  collections: _reactImmutableProptypes.default.map.isRequired,
  collection: _reactImmutableProptypes.default.map,
  searchTerm: _propTypes.default.string.isRequired,
  onSubmit: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired
});
var _default = exports.default = (0, _reactPolyglot.translate)()(CollectionSearch);