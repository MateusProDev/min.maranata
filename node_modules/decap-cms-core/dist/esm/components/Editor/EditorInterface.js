"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _react2 = require("@emotion/react");
var _reactSplitPane = _interopRequireDefault(require("react-split-pane"));
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _reactScrollSync = require("react-scroll-sync");
var _EditorControlPane = _interopRequireDefault(require("./EditorControlPane/EditorControlPane"));
var _EditorPreviewPane = _interopRequireDefault(require("./EditorPreviewPane/EditorPreviewPane"));
var _EditorToolbar = _interopRequireDefault(require("./EditorToolbar"));
var _i18n = require("../../lib/i18n");
var _collectionTypes = require("../../constants/collectionTypes");
var _collections = require("../../reducers/collections");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const PREVIEW_VISIBLE = 'cms.preview-visible';
const SCROLL_SYNC_ENABLED = 'cms.scroll-sync-enabled';
const SPLIT_PANE_POSITION = 'cms.split-pane-position';
const I18N_VISIBLE = 'cms.i18n-visible';
const styles = {
  splitPane: /*#__PURE__*/(0, _react2.css)(_decapCmsUiDefault.components.card, ";border-radius:0;height:100%;;label:splitPane;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  pane: process.env.NODE_ENV === "production" ? {
    name: "1yvxf4n-pane",
    styles: "height:100%;overflow-y:auto;label:pane;"
  } : {
    name: "1yvxf4n-pane",
    styles: "height:100%;overflow-y:auto;label:pane;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JJbnRlcmZhY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0NXIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JJbnRlcmZhY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MsIEdsb2JhbCB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBTcGxpdFBhbmUgZnJvbSAncmVhY3Qtc3BsaXQtcGFuZSc7XG5pbXBvcnQge1xuICBjb2xvcnMsXG4gIGNvbG9yc1JhdyxcbiAgY29tcG9uZW50cyxcbiAgdHJhbnNpdGlvbnMsXG4gIEljb25CdXR0b24sXG4gIHpJbmRleCxcbn0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgU2Nyb2xsU3luYywgU2Nyb2xsU3luY1BhbmUgfSBmcm9tICdyZWFjdC1zY3JvbGwtc3luYyc7XG5cbmltcG9ydCBFZGl0b3JDb250cm9sUGFuZSBmcm9tICcuL0VkaXRvckNvbnRyb2xQYW5lL0VkaXRvckNvbnRyb2xQYW5lJztcbmltcG9ydCBFZGl0b3JQcmV2aWV3UGFuZSBmcm9tICcuL0VkaXRvclByZXZpZXdQYW5lL0VkaXRvclByZXZpZXdQYW5lJztcbmltcG9ydCBFZGl0b3JUb29sYmFyIGZyb20gJy4vRWRpdG9yVG9vbGJhcic7XG5pbXBvcnQgeyBoYXNJMThuLCBnZXRJMThuSW5mbywgZ2V0UHJldmlld0VudHJ5IH0gZnJvbSAnLi4vLi4vbGliL2kxOG4nO1xuaW1wb3J0IHsgRklMRVMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvY29sbGVjdGlvblR5cGVzJztcbmltcG9ydCB7IGdldEZpbGVGcm9tU2x1ZyB9IGZyb20gJy4uLy4uL3JlZHVjZXJzL2NvbGxlY3Rpb25zJztcblxuY29uc3QgUFJFVklFV19WSVNJQkxFID0gJ2Ntcy5wcmV2aWV3LXZpc2libGUnO1xuY29uc3QgU0NST0xMX1NZTkNfRU5BQkxFRCA9ICdjbXMuc2Nyb2xsLXN5bmMtZW5hYmxlZCc7XG5jb25zdCBTUExJVF9QQU5FX1BPU0lUSU9OID0gJ2Ntcy5zcGxpdC1wYW5lLXBvc2l0aW9uJztcbmNvbnN0IEkxOE5fVklTSUJMRSA9ICdjbXMuaTE4bi12aXNpYmxlJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBzcGxpdFBhbmU6IGNzc2BcbiAgICAke2NvbXBvbmVudHMuY2FyZH07XG4gICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIGAsXG4gIHBhbmU6IGNzc2BcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgb3ZlcmZsb3cteTogYXV0bztcbiAgYCxcbn07XG5cbmNvbnN0IEVkaXRvclRvZ2dsZSA9IHN0eWxlZChJY29uQnV0dG9uKWBcbiAgbWFyZ2luLWJvdHRvbTogMTJweDtcbmA7XG5cbmZ1bmN0aW9uIFJlYWN0U3BsaXRQYW5lR2xvYmFsU3R5bGVzKCkge1xuICByZXR1cm4gKFxuICAgIDxHbG9iYWxcbiAgICAgIHN0eWxlcz17Y3NzYFxuICAgICAgICAuUmVzaXplci52ZXJ0aWNhbCB7XG4gICAgICAgICAgd2lkdGg6IDIxcHg7XG4gICAgICAgICAgY3Vyc29yOiBjb2wtcmVzaXplO1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yICR7dHJhbnNpdGlvbnMubWFpbn07XG5cbiAgICAgICAgICAmOmJlZm9yZSB7XG4gICAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICAgIHdpZHRoOiAycHg7XG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICBsZWZ0OiAxMHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICY6aG92ZXIsXG4gICAgICAgICAgJjphY3RpdmUge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcuR3JheUxpZ2h0fTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgLz5cbiAgKTtcbn1cblxuY29uc3QgU3R5bGVkU3BsaXRQYW5lID0gc3R5bGVkKFNwbGl0UGFuZSlgXG4gICR7c3R5bGVzLnNwbGl0UGFuZX07XG5cbiAgLyoqXG4gICAqIFF1aWNrIGZpeCBmb3IgcHJldmlldyBwYW5lIG5vdCBmdWxseSBkaXNwbGF5aW5nIGluIFNhZmFyaVxuICAgKi9cbiAgLlBhbmUge1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuYDtcblxuY29uc3QgTm9QcmV2aWV3Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgJHtzdHlsZXMuc3BsaXRQYW5lfTtcbmA7XG5cbmNvbnN0IEVkaXRvckNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAxMDAlO1xuICBtaW4td2lkdGg6IDgwMHB4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBwYWRkaW5nLXRvcDogNjZweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuYmFja2dyb3VuZH07XG5gO1xuXG5jb25zdCBFZGl0b3IgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDEwMCU7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5gO1xuXG5jb25zdCBQcmV2aWV3UGFuZUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDogMTAwJTtcbiAgcG9pbnRlci1ldmVudHM6ICR7cHJvcHMgPT4gKHByb3BzLmJsb2NrRW50cnkgPyAnbm9uZScgOiAnYXV0bycpfTtcbiAgb3ZlcmZsb3cteTogJHtwcm9wcyA9PiAocHJvcHMub3ZlckZsb3cgPyAnYXV0bycgOiAnaGlkZGVuJyl9O1xuYDtcblxuY29uc3QgQ29udHJvbFBhbmVDb250YWluZXIgPSBzdHlsZWQoUHJldmlld1BhbmVDb250YWluZXIpYFxuICBwYWRkaW5nOiAwIDE2cHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xuYDtcblxuY29uc3QgVmlld0NvbnRyb2xzID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDEwcHg7XG4gIHJpZ2h0OiAxMHB4O1xuICB6LWluZGV4OiAke3pJbmRleC56SW5kZXgyOTl9O1xuYDtcblxuZnVuY3Rpb24gRWRpdG9yQ29udGVudCh7XG4gIGkxOG5WaXNpYmxlLFxuICBwcmV2aWV3VmlzaWJsZSxcbiAgZWRpdG9yLFxuICBlZGl0b3JXaXRoRWRpdG9yLFxuICBlZGl0b3JXaXRoUHJldmlldyxcbn0pIHtcbiAgaWYgKGkxOG5WaXNpYmxlKSB7XG4gICAgcmV0dXJuIGVkaXRvcldpdGhFZGl0b3I7XG4gIH0gZWxzZSBpZiAocHJldmlld1Zpc2libGUpIHtcbiAgICByZXR1cm4gZWRpdG9yV2l0aFByZXZpZXc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDxOb1ByZXZpZXdDb250YWluZXI+e2VkaXRvcn08L05vUHJldmlld0NvbnRhaW5lcj47XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNQcmV2aWV3RW5hYmxlZChjb2xsZWN0aW9uLCBlbnRyeSkge1xuICBpZiAoY29sbGVjdGlvbi5nZXQoJ3R5cGUnKSA9PT0gRklMRVMpIHtcbiAgICBjb25zdCBmaWxlID0gZ2V0RmlsZUZyb21TbHVnKGNvbGxlY3Rpb24sIGVudHJ5LmdldCgnc2x1ZycpKTtcbiAgICBjb25zdCBwcmV2aWV3RW5hYmxlZCA9IGZpbGU/LmdldEluKFsnZWRpdG9yJywgJ3ByZXZpZXcnXSk7XG4gICAgaWYgKHByZXZpZXdFbmFibGVkICE9IG51bGwpIHJldHVybiBwcmV2aWV3RW5hYmxlZDtcbiAgfVxuICByZXR1cm4gY29sbGVjdGlvbi5nZXRJbihbJ2VkaXRvcicsICdwcmV2aWV3J10sIHRydWUpO1xufVxuXG5jbGFzcyBFZGl0b3JJbnRlcmZhY2UgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0ZSA9IHtcbiAgICBzaG93RXZlbnRCbG9ja2VyOiBmYWxzZSxcbiAgICBwcmV2aWV3VmlzaWJsZTogbG9jYWxTdG9yYWdlLmdldEl0ZW0oUFJFVklFV19WSVNJQkxFKSAhPT0gJ2ZhbHNlJyxcbiAgICBzY3JvbGxTeW5jRW5hYmxlZDogbG9jYWxTdG9yYWdlLmdldEl0ZW0oU0NST0xMX1NZTkNfRU5BQkxFRCkgIT09ICdmYWxzZScsXG4gICAgaTE4blZpc2libGU6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKEkxOE5fVklTSUJMRSkgIT09ICdmYWxzZScsXG4gIH07XG5cbiAgaGFuZGxlU3BsaXRQYW5lRHJhZ1N0YXJ0ID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93RXZlbnRCbG9ja2VyOiB0cnVlIH0pO1xuICB9O1xuXG4gIGhhbmRsZVNwbGl0UGFuZURyYWdGaW5pc2hlZCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2hvd0V2ZW50QmxvY2tlcjogZmFsc2UgfSk7XG4gIH07XG5cbiAgaGFuZGxlT25QZXJzaXN0ID0gYXN5bmMgKG9wdHMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHsgY3JlYXRlTmV3ID0gZmFsc2UsIGR1cGxpY2F0ZSA9IGZhbHNlIH0gPSBvcHRzO1xuICAgIGF3YWl0IHRoaXMuY29udHJvbFBhbmVSZWYuc3dpdGNoVG9EZWZhdWx0TG9jYWxlKCk7XG4gICAgdGhpcy5jb250cm9sUGFuZVJlZi52YWxpZGF0ZSgpO1xuICAgIHRoaXMucHJvcHMub25QZXJzaXN0KHsgY3JlYXRlTmV3LCBkdXBsaWNhdGUgfSk7XG4gIH07XG5cbiAgaGFuZGxlT25QdWJsaXNoID0gYXN5bmMgKG9wdHMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHsgY3JlYXRlTmV3ID0gZmFsc2UsIGR1cGxpY2F0ZSA9IGZhbHNlIH0gPSBvcHRzO1xuICAgIGF3YWl0IHRoaXMuY29udHJvbFBhbmVSZWYuc3dpdGNoVG9EZWZhdWx0TG9jYWxlKCk7XG4gICAgdGhpcy5jb250cm9sUGFuZVJlZi52YWxpZGF0ZSgpO1xuICAgIHRoaXMucHJvcHMub25QdWJsaXNoKHsgY3JlYXRlTmV3LCBkdXBsaWNhdGUgfSk7XG4gIH07XG5cbiAgaGFuZGxlVG9nZ2xlUHJldmlldyA9ICgpID0+IHtcbiAgICBjb25zdCBuZXdQcmV2aWV3VmlzaWJsZSA9ICF0aGlzLnN0YXRlLnByZXZpZXdWaXNpYmxlO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBwcmV2aWV3VmlzaWJsZTogbmV3UHJldmlld1Zpc2libGUgfSk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oUFJFVklFV19WSVNJQkxFLCBuZXdQcmV2aWV3VmlzaWJsZSk7XG4gIH07XG5cbiAgaGFuZGxlVG9nZ2xlU2Nyb2xsU3luYyA9ICgpID0+IHtcbiAgICBjb25zdCBuZXdTY3JvbGxTeW5jRW5hYmxlZCA9ICF0aGlzLnN0YXRlLnNjcm9sbFN5bmNFbmFibGVkO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzY3JvbGxTeW5jRW5hYmxlZDogbmV3U2Nyb2xsU3luY0VuYWJsZWQgfSk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oU0NST0xMX1NZTkNfRU5BQkxFRCwgbmV3U2Nyb2xsU3luY0VuYWJsZWQpO1xuICB9O1xuXG4gIGhhbmRsZVRvZ2dsZUkxOG4gPSAoKSA9PiB7XG4gICAgY29uc3QgbmV3STE4blZpc2libGUgPSAhdGhpcy5zdGF0ZS5pMThuVmlzaWJsZTtcbiAgICB0aGlzLnNldFN0YXRlKHsgaTE4blZpc2libGU6IG5ld0kxOG5WaXNpYmxlIH0pO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKEkxOE5fVklTSUJMRSwgbmV3STE4blZpc2libGUpO1xuICB9O1xuXG4gIGhhbmRsZUxlZnRQYW5lbExvY2FsZUNoYW5nZSA9IGxvY2FsZSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGxlZnRQYW5lbExvY2FsZTogbG9jYWxlIH0pO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgZW50cnksXG4gICAgICBmaWVsZHMsXG4gICAgICBmaWVsZHNNZXRhRGF0YSxcbiAgICAgIGZpZWxkc0Vycm9ycyxcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgc2hvd0RlbGV0ZSxcbiAgICAgIG9uRGVsZXRlLFxuICAgICAgb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXMsXG4gICAgICBvbkNoYW5nZVN0YXR1cyxcbiAgICAgIG9uUHVibGlzaCxcbiAgICAgIHVuUHVibGlzaCxcbiAgICAgIG9uRHVwbGljYXRlLFxuICAgICAgb25WYWxpZGF0ZSxcbiAgICAgIHVzZXIsXG4gICAgICBoYXNDaGFuZ2VkLFxuICAgICAgZGlzcGxheVVybCxcbiAgICAgIGhhc1dvcmtmbG93LFxuICAgICAgdXNlT3BlbkF1dGhvcmluZyxcbiAgICAgIGhhc1VucHVibGlzaGVkQ2hhbmdlcyxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICBpc01vZGlmaWNhdGlvbixcbiAgICAgIGN1cnJlbnRTdGF0dXMsXG4gICAgICBvbkxvZ291dENsaWNrLFxuICAgICAgbG9hZERlcGxveVByZXZpZXcsXG4gICAgICBkZXBsb3lQcmV2aWV3LFxuICAgICAgZHJhZnRLZXksXG4gICAgICBlZGl0b3JCYWNrTGluayxcbiAgICAgIHQsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCB7IHNjcm9sbFN5bmNFbmFibGVkLCBzaG93RXZlbnRCbG9ja2VyIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3QgcHJldmlld0VuYWJsZWQgPSBpc1ByZXZpZXdFbmFibGVkKGNvbGxlY3Rpb24sIGVudHJ5KTtcblxuICAgIGNvbnN0IHsgbG9jYWxlcywgZGVmYXVsdExvY2FsZSB9ID0gZ2V0STE4bkluZm8odGhpcy5wcm9wcy5jb2xsZWN0aW9uKTtcbiAgICBjb25zdCBjb2xsZWN0aW9uSTE4bkVuYWJsZWQgPSBoYXNJMThuKGNvbGxlY3Rpb24pICYmIGxvY2FsZXMubGVuZ3RoID4gMTtcbiAgICBjb25zdCBlZGl0b3JQcm9wcyA9IHtcbiAgICAgIGNvbGxlY3Rpb24sXG4gICAgICBlbnRyeSxcbiAgICAgIGZpZWxkcyxcbiAgICAgIGZpZWxkc01ldGFEYXRhLFxuICAgICAgZmllbGRzRXJyb3JzLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvblZhbGlkYXRlLFxuICAgIH07XG5cbiAgICBjb25zdCBsZWZ0UGFuZWxMb2NhbGUgPSB0aGlzLnN0YXRlLmxlZnRQYW5lbExvY2FsZSB8fCBsb2NhbGVzPy5bMF07XG4gICAgY29uc3QgZWRpdG9yID0gKFxuICAgICAgPENvbnRyb2xQYW5lQ29udGFpbmVyIG92ZXJGbG93IGJsb2NrRW50cnk9e3Nob3dFdmVudEJsb2NrZXJ9PlxuICAgICAgICA8RWRpdG9yQ29udHJvbFBhbmVcbiAgICAgICAgICB7Li4uZWRpdG9yUHJvcHN9XG4gICAgICAgICAgcmVmPXtjID0+ICh0aGlzLmNvbnRyb2xQYW5lUmVmID0gYyl9XG4gICAgICAgICAgbG9jYWxlPXtsZWZ0UGFuZWxMb2NhbGV9XG4gICAgICAgICAgdD17dH1cbiAgICAgICAgICBvbkxvY2FsZUNoYW5nZT17dGhpcy5oYW5kbGVMZWZ0UGFuZWxMb2NhbGVDaGFuZ2V9XG4gICAgICAgIC8+XG4gICAgICA8L0NvbnRyb2xQYW5lQ29udGFpbmVyPlxuICAgICk7XG5cbiAgICBjb25zdCBlZGl0b3IyID0gKFxuICAgICAgPENvbnRyb2xQYW5lQ29udGFpbmVyIG92ZXJGbG93PXshdGhpcy5zdGF0ZS5zY3JvbGxTeW5jRW5hYmxlZH0gYmxvY2tFbnRyeT17c2hvd0V2ZW50QmxvY2tlcn0+XG4gICAgICAgIDxFZGl0b3JDb250cm9sUGFuZSB7Li4uZWRpdG9yUHJvcHN9IGxvY2FsZT17bG9jYWxlcz8uWzFdfSB0PXt0fSAvPlxuICAgICAgPC9Db250cm9sUGFuZUNvbnRhaW5lcj5cbiAgICApO1xuXG4gICAgY29uc3QgcHJldmlld0VudHJ5ID0gY29sbGVjdGlvbkkxOG5FbmFibGVkXG4gICAgICA/IGdldFByZXZpZXdFbnRyeShlbnRyeSwgbGVmdFBhbmVsTG9jYWxlLCBkZWZhdWx0TG9jYWxlKVxuICAgICAgOiBlbnRyeTtcblxuICAgIGNvbnN0IGVkaXRvcldpdGhQcmV2aWV3ID0gKFxuICAgICAgPFNjcm9sbFN5bmMgZW5hYmxlZD17dGhpcy5zdGF0ZS5zY3JvbGxTeW5jRW5hYmxlZH0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPFJlYWN0U3BsaXRQYW5lR2xvYmFsU3R5bGVzIC8+XG4gICAgICAgICAgPFN0eWxlZFNwbGl0UGFuZVxuICAgICAgICAgICAgbWF4U2l6ZT17LTEwMH1cbiAgICAgICAgICAgIG1pblNpemU9ezQwMH1cbiAgICAgICAgICAgIGRlZmF1bHRTaXplPXtwYXJzZUludChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShTUExJVF9QQU5FX1BPU0lUSU9OKSwgMTApIHx8ICc1MCUnfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3NpemUgPT4gbG9jYWxTdG9yYWdlLnNldEl0ZW0oU1BMSVRfUEFORV9QT1NJVElPTiwgc2l6ZSl9XG4gICAgICAgICAgICBvbkRyYWdTdGFydGVkPXt0aGlzLmhhbmRsZVNwbGl0UGFuZURyYWdTdGFydH1cbiAgICAgICAgICAgIG9uRHJhZ0ZpbmlzaGVkPXt0aGlzLmhhbmRsZVNwbGl0UGFuZURyYWdGaW5pc2hlZH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8U2Nyb2xsU3luY1BhbmU+e2VkaXRvcn08L1Njcm9sbFN5bmNQYW5lPlxuICAgICAgICAgICAgPFByZXZpZXdQYW5lQ29udGFpbmVyIGJsb2NrRW50cnk9e3Nob3dFdmVudEJsb2NrZXJ9PlxuICAgICAgICAgICAgICA8RWRpdG9yUHJldmlld1BhbmVcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgICAgIGVudHJ5PXtwcmV2aWV3RW50cnl9XG4gICAgICAgICAgICAgICAgZmllbGRzPXtmaWVsZHN9XG4gICAgICAgICAgICAgICAgZmllbGRzTWV0YURhdGE9e2ZpZWxkc01ldGFEYXRhfVxuICAgICAgICAgICAgICAgIGxvY2FsZT17bGVmdFBhbmVsTG9jYWxlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9QcmV2aWV3UGFuZUNvbnRhaW5lcj5cbiAgICAgICAgICA8L1N0eWxlZFNwbGl0UGFuZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L1Njcm9sbFN5bmM+XG4gICAgKTtcblxuICAgIGNvbnN0IGVkaXRvcldpdGhFZGl0b3IgPSAoXG4gICAgICA8U2Nyb2xsU3luYyBlbmFibGVkPXt0aGlzLnN0YXRlLnNjcm9sbFN5bmNFbmFibGVkfT5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8U3R5bGVkU3BsaXRQYW5lXG4gICAgICAgICAgICBtYXhTaXplPXstMTAwfVxuICAgICAgICAgICAgZGVmYXVsdFNpemU9e3BhcnNlSW50KGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNQTElUX1BBTkVfUE9TSVRJT04pLCAxMCkgfHwgJzUwJSd9XG4gICAgICAgICAgICBvbkNoYW5nZT17c2l6ZSA9PiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShTUExJVF9QQU5FX1BPU0lUSU9OLCBzaXplKX1cbiAgICAgICAgICAgIG9uRHJhZ1N0YXJ0ZWQ9e3RoaXMuaGFuZGxlU3BsaXRQYW5lRHJhZ1N0YXJ0fVxuICAgICAgICAgICAgb25EcmFnRmluaXNoZWQ9e3RoaXMuaGFuZGxlU3BsaXRQYW5lRHJhZ0ZpbmlzaGVkfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxTY3JvbGxTeW5jUGFuZT57ZWRpdG9yfTwvU2Nyb2xsU3luY1BhbmU+XG4gICAgICAgICAgICA8U2Nyb2xsU3luY1BhbmU+e2VkaXRvcjJ9PC9TY3JvbGxTeW5jUGFuZT5cbiAgICAgICAgICA8L1N0eWxlZFNwbGl0UGFuZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L1Njcm9sbFN5bmM+XG4gICAgKTtcblxuICAgIGNvbnN0IGkxOG5WaXNpYmxlID0gY29sbGVjdGlvbkkxOG5FbmFibGVkICYmIHRoaXMuc3RhdGUuaTE4blZpc2libGU7XG4gICAgY29uc3QgcHJldmlld1Zpc2libGUgPSBwcmV2aWV3RW5hYmxlZCAmJiB0aGlzLnN0YXRlLnByZXZpZXdWaXNpYmxlO1xuICAgIGNvbnN0IHNjcm9sbFN5bmNWaXNpYmxlID0gaTE4blZpc2libGUgfHwgcHJldmlld1Zpc2libGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEVkaXRvckNvbnRhaW5lcj5cbiAgICAgICAgPEVkaXRvclRvb2xiYXJcbiAgICAgICAgICBpc1BlcnNpc3Rpbmc9e2VudHJ5LmdldCgnaXNQZXJzaXN0aW5nJyl9XG4gICAgICAgICAgaXNQdWJsaXNoaW5nPXtlbnRyeS5nZXQoJ2lzUHVibGlzaGluZycpfVxuICAgICAgICAgIGlzVXBkYXRpbmdTdGF0dXM9e2VudHJ5LmdldCgnaXNVcGRhdGluZ1N0YXR1cycpfVxuICAgICAgICAgIGlzRGVsZXRpbmc9e2VudHJ5LmdldCgnaXNEZWxldGluZycpfVxuICAgICAgICAgIG9uUGVyc2lzdD17dGhpcy5oYW5kbGVPblBlcnNpc3R9XG4gICAgICAgICAgb25QZXJzaXN0QW5kTmV3PXsoKSA9PiB0aGlzLmhhbmRsZU9uUGVyc2lzdCh7IGNyZWF0ZU5ldzogdHJ1ZSB9KX1cbiAgICAgICAgICBvblBlcnNpc3RBbmREdXBsaWNhdGU9eygpID0+IHRoaXMuaGFuZGxlT25QZXJzaXN0KHsgY3JlYXRlTmV3OiB0cnVlLCBkdXBsaWNhdGU6IHRydWUgfSl9XG4gICAgICAgICAgb25EZWxldGU9e29uRGVsZXRlfVxuICAgICAgICAgIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzPXtvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlc31cbiAgICAgICAgICBvbkNoYW5nZVN0YXR1cz17b25DaGFuZ2VTdGF0dXN9XG4gICAgICAgICAgc2hvd0RlbGV0ZT17c2hvd0RlbGV0ZX1cbiAgICAgICAgICBvblB1Ymxpc2g9e29uUHVibGlzaH1cbiAgICAgICAgICB1blB1Ymxpc2g9e3VuUHVibGlzaH1cbiAgICAgICAgICBvbkR1cGxpY2F0ZT17b25EdXBsaWNhdGV9XG4gICAgICAgICAgb25QdWJsaXNoQW5kTmV3PXsoKSA9PiB0aGlzLmhhbmRsZU9uUHVibGlzaCh7IGNyZWF0ZU5ldzogdHJ1ZSB9KX1cbiAgICAgICAgICBvblB1Ymxpc2hBbmREdXBsaWNhdGU9eygpID0+IHRoaXMuaGFuZGxlT25QdWJsaXNoKHsgY3JlYXRlTmV3OiB0cnVlLCBkdXBsaWNhdGU6IHRydWUgfSl9XG4gICAgICAgICAgdXNlcj17dXNlcn1cbiAgICAgICAgICBoYXNDaGFuZ2VkPXtoYXNDaGFuZ2VkfVxuICAgICAgICAgIGRpc3BsYXlVcmw9e2Rpc3BsYXlVcmx9XG4gICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICBoYXNXb3JrZmxvdz17aGFzV29ya2Zsb3d9XG4gICAgICAgICAgdXNlT3BlbkF1dGhvcmluZz17dXNlT3BlbkF1dGhvcmluZ31cbiAgICAgICAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXM9e2hhc1VucHVibGlzaGVkQ2hhbmdlc31cbiAgICAgICAgICBpc05ld0VudHJ5PXtpc05ld0VudHJ5fVxuICAgICAgICAgIGlzTW9kaWZpY2F0aW9uPXtpc01vZGlmaWNhdGlvbn1cbiAgICAgICAgICBjdXJyZW50U3RhdHVzPXtjdXJyZW50U3RhdHVzfVxuICAgICAgICAgIG9uTG9nb3V0Q2xpY2s9e29uTG9nb3V0Q2xpY2t9XG4gICAgICAgICAgbG9hZERlcGxveVByZXZpZXc9e2xvYWREZXBsb3lQcmV2aWV3fVxuICAgICAgICAgIGRlcGxveVByZXZpZXc9e2RlcGxveVByZXZpZXd9XG4gICAgICAgICAgZWRpdG9yQmFja0xpbms9e2VkaXRvckJhY2tMaW5rfVxuICAgICAgICAvPlxuICAgICAgICA8RWRpdG9yIGtleT17ZHJhZnRLZXl9PlxuICAgICAgICAgIDxWaWV3Q29udHJvbHM+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkkxOG5FbmFibGVkICYmIChcbiAgICAgICAgICAgICAgPEVkaXRvclRvZ2dsZVxuICAgICAgICAgICAgICAgIGlzQWN0aXZlPXtpMThuVmlzaWJsZX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZVRvZ2dsZUkxOG59XG4gICAgICAgICAgICAgICAgc2l6ZT1cImxhcmdlXCJcbiAgICAgICAgICAgICAgICB0eXBlPVwicGFnZVwiXG4gICAgICAgICAgICAgICAgdGl0bGU9e3QoJ2VkaXRvci5lZGl0b3JJbnRlcmZhY2UudG9nZ2xlSTE4bicpfVxuICAgICAgICAgICAgICAgIG1hcmdpblRvcD1cIjcwcHhcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtwcmV2aWV3RW5hYmxlZCAmJiAoXG4gICAgICAgICAgICAgIDxFZGl0b3JUb2dnbGVcbiAgICAgICAgICAgICAgICBpc0FjdGl2ZT17cHJldmlld1Zpc2libGV9XG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVUb2dnbGVQcmV2aWV3fVxuICAgICAgICAgICAgICAgIHNpemU9XCJsYXJnZVwiXG4gICAgICAgICAgICAgICAgdHlwZT1cImV5ZVwiXG4gICAgICAgICAgICAgICAgdGl0bGU9e3QoJ2VkaXRvci5lZGl0b3JJbnRlcmZhY2UudG9nZ2xlUHJldmlldycpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtzY3JvbGxTeW5jVmlzaWJsZSAmJiAoXG4gICAgICAgICAgICAgIDxFZGl0b3JUb2dnbGVcbiAgICAgICAgICAgICAgICBpc0FjdGl2ZT17c2Nyb2xsU3luY0VuYWJsZWR9XG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVUb2dnbGVTY3JvbGxTeW5jfVxuICAgICAgICAgICAgICAgIHNpemU9XCJsYXJnZVwiXG4gICAgICAgICAgICAgICAgdHlwZT1cInNjcm9sbFwiXG4gICAgICAgICAgICAgICAgdGl0bGU9e3QoJ2VkaXRvci5lZGl0b3JJbnRlcmZhY2UudG9nZ2xlU2Nyb2xsU3luYycpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L1ZpZXdDb250cm9scz5cbiAgICAgICAgICA8RWRpdG9yQ29udGVudFxuICAgICAgICAgICAgaTE4blZpc2libGU9e2kxOG5WaXNpYmxlfVxuICAgICAgICAgICAgcHJldmlld1Zpc2libGU9e3ByZXZpZXdWaXNpYmxlfVxuICAgICAgICAgICAgZWRpdG9yPXtlZGl0b3J9XG4gICAgICAgICAgICBlZGl0b3JXaXRoRWRpdG9yPXtlZGl0b3JXaXRoRWRpdG9yfVxuICAgICAgICAgICAgZWRpdG9yV2l0aFByZXZpZXc9e2VkaXRvcldpdGhQcmV2aWV3fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRWRpdG9yPlxuICAgICAgPC9FZGl0b3JDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5FZGl0b3JJbnRlcmZhY2UucHJvcFR5cGVzID0ge1xuICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIGVudHJ5OiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIGZpZWxkczogSW1tdXRhYmxlUHJvcFR5cGVzLmxpc3QuaXNSZXF1aXJlZCxcbiAgZmllbGRzTWV0YURhdGE6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgZmllbGRzRXJyb3JzOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvblZhbGlkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvblBlcnNpc3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHNob3dEZWxldGU6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIG9uRGVsZXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB1blB1Ymxpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkNoYW5nZVN0YXR1czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdXNlcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgaGFzQ2hhbmdlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGRpc3BsYXlVcmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGhhc1dvcmtmbG93OiBQcm9wVHlwZXMuYm9vbCxcbiAgdXNlT3BlbkF1dGhvcmluZzogUHJvcFR5cGVzLmJvb2wsXG4gIGhhc1VucHVibGlzaGVkQ2hhbmdlczogUHJvcFR5cGVzLmJvb2wsXG4gIGlzTmV3RW50cnk6IFByb3BUeXBlcy5ib29sLFxuICBpc01vZGlmaWNhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gIGN1cnJlbnRTdGF0dXM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uTG9nb3V0Q2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGRlcGxveVByZXZpZXc6IFByb3BUeXBlcy5vYmplY3QsXG4gIGxvYWREZXBsb3lQcmV2aWV3OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBkcmFmdEtleTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRWRpdG9ySW50ZXJmYWNlO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  }
};
const EditorToggle = /*#__PURE__*/(0, _base.default)(_decapCmsUiDefault.IconButton, {
  target: "e1nx103k7",
  label: "EditorToggle"
})(process.env.NODE_ENV === "production" ? {
  name: "cn3xcj",
  styles: "margin-bottom:12px"
} : {
  name: "cn3xcj",
  styles: "margin-bottom:12px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JJbnRlcmZhY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0N1QyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9FZGl0b3IvRWRpdG9ySW50ZXJmYWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHsgY3NzLCBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgU3BsaXRQYW5lIGZyb20gJ3JlYWN0LXNwbGl0LXBhbmUnO1xuaW1wb3J0IHtcbiAgY29sb3JzLFxuICBjb2xvcnNSYXcsXG4gIGNvbXBvbmVudHMsXG4gIHRyYW5zaXRpb25zLFxuICBJY29uQnV0dG9uLFxuICB6SW5kZXgsXG59IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IFNjcm9sbFN5bmMsIFNjcm9sbFN5bmNQYW5lIH0gZnJvbSAncmVhY3Qtc2Nyb2xsLXN5bmMnO1xuXG5pbXBvcnQgRWRpdG9yQ29udHJvbFBhbmUgZnJvbSAnLi9FZGl0b3JDb250cm9sUGFuZS9FZGl0b3JDb250cm9sUGFuZSc7XG5pbXBvcnQgRWRpdG9yUHJldmlld1BhbmUgZnJvbSAnLi9FZGl0b3JQcmV2aWV3UGFuZS9FZGl0b3JQcmV2aWV3UGFuZSc7XG5pbXBvcnQgRWRpdG9yVG9vbGJhciBmcm9tICcuL0VkaXRvclRvb2xiYXInO1xuaW1wb3J0IHsgaGFzSTE4biwgZ2V0STE4bkluZm8sIGdldFByZXZpZXdFbnRyeSB9IGZyb20gJy4uLy4uL2xpYi9pMThuJztcbmltcG9ydCB7IEZJTEVTIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL2NvbGxlY3Rpb25UeXBlcyc7XG5pbXBvcnQgeyBnZXRGaWxlRnJvbVNsdWcgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9jb2xsZWN0aW9ucyc7XG5cbmNvbnN0IFBSRVZJRVdfVklTSUJMRSA9ICdjbXMucHJldmlldy12aXNpYmxlJztcbmNvbnN0IFNDUk9MTF9TWU5DX0VOQUJMRUQgPSAnY21zLnNjcm9sbC1zeW5jLWVuYWJsZWQnO1xuY29uc3QgU1BMSVRfUEFORV9QT1NJVElPTiA9ICdjbXMuc3BsaXQtcGFuZS1wb3NpdGlvbic7XG5jb25zdCBJMThOX1ZJU0lCTEUgPSAnY21zLmkxOG4tdmlzaWJsZSc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgc3BsaXRQYW5lOiBjc3NgXG4gICAgJHtjb21wb25lbnRzLmNhcmR9O1xuICAgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICBgLFxuICBwYW5lOiBjc3NgXG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIG92ZXJmbG93LXk6IGF1dG87XG4gIGAsXG59O1xuXG5jb25zdCBFZGl0b3JUb2dnbGUgPSBzdHlsZWQoSWNvbkJ1dHRvbilgXG4gIG1hcmdpbi1ib3R0b206IDEycHg7XG5gO1xuXG5mdW5jdGlvbiBSZWFjdFNwbGl0UGFuZUdsb2JhbFN0eWxlcygpIHtcbiAgcmV0dXJuIChcbiAgICA8R2xvYmFsXG4gICAgICBzdHlsZXM9e2Nzc2BcbiAgICAgICAgLlJlc2l6ZXIudmVydGljYWwge1xuICAgICAgICAgIHdpZHRoOiAyMXB4O1xuICAgICAgICAgIGN1cnNvcjogY29sLXJlc2l6ZTtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAke3RyYW5zaXRpb25zLm1haW59O1xuXG4gICAgICAgICAgJjpiZWZvcmUge1xuICAgICAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgICAgICB3aWR0aDogMnB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgbGVmdDogMTBweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLnRleHRGaWVsZEJvcmRlcn07XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAmOmhvdmVyLFxuICAgICAgICAgICY6YWN0aXZlIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LkdyYXlMaWdodH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBgfVxuICAgIC8+XG4gICk7XG59XG5cbmNvbnN0IFN0eWxlZFNwbGl0UGFuZSA9IHN0eWxlZChTcGxpdFBhbmUpYFxuICAke3N0eWxlcy5zcGxpdFBhbmV9O1xuXG4gIC8qKlxuICAgKiBRdWljayBmaXggZm9yIHByZXZpZXcgcGFuZSBub3QgZnVsbHkgZGlzcGxheWluZyBpbiBTYWZhcmlcbiAgICovXG4gIC5QYW5lIHtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIH1cbmA7XG5cbmNvbnN0IE5vUHJldmlld0NvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gICR7c3R5bGVzLnNwbGl0UGFuZX07XG5gO1xuXG5jb25zdCBFZGl0b3JDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbiAgbWluLXdpZHRoOiA4MDBweDtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgcGFkZGluZy10b3A6IDY2cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmJhY2tncm91bmR9O1xuYDtcblxuY29uc3QgRWRpdG9yID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiAxMDAlO1xuICBtYXJnaW46IDAgYXV0bztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYDtcblxuY29uc3QgUHJldmlld1BhbmVDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDEwMCU7XG4gIHBvaW50ZXItZXZlbnRzOiAke3Byb3BzID0+IChwcm9wcy5ibG9ja0VudHJ5ID8gJ25vbmUnIDogJ2F1dG8nKX07XG4gIG92ZXJmbG93LXk6ICR7cHJvcHMgPT4gKHByb3BzLm92ZXJGbG93ID8gJ2F1dG8nIDogJ2hpZGRlbicpfTtcbmA7XG5cbmNvbnN0IENvbnRyb2xQYW5lQ29udGFpbmVyID0gc3R5bGVkKFByZXZpZXdQYW5lQ29udGFpbmVyKWBcbiAgcGFkZGluZzogMCAxNnB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IFZpZXdDb250cm9scyA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAxMHB4O1xuICByaWdodDogMTBweDtcbiAgei1pbmRleDogJHt6SW5kZXguekluZGV4Mjk5fTtcbmA7XG5cbmZ1bmN0aW9uIEVkaXRvckNvbnRlbnQoe1xuICBpMThuVmlzaWJsZSxcbiAgcHJldmlld1Zpc2libGUsXG4gIGVkaXRvcixcbiAgZWRpdG9yV2l0aEVkaXRvcixcbiAgZWRpdG9yV2l0aFByZXZpZXcsXG59KSB7XG4gIGlmIChpMThuVmlzaWJsZSkge1xuICAgIHJldHVybiBlZGl0b3JXaXRoRWRpdG9yO1xuICB9IGVsc2UgaWYgKHByZXZpZXdWaXNpYmxlKSB7XG4gICAgcmV0dXJuIGVkaXRvcldpdGhQcmV2aWV3O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiA8Tm9QcmV2aWV3Q29udGFpbmVyPntlZGl0b3J9PC9Ob1ByZXZpZXdDb250YWluZXI+O1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzUHJldmlld0VuYWJsZWQoY29sbGVjdGlvbiwgZW50cnkpIHtcbiAgaWYgKGNvbGxlY3Rpb24uZ2V0KCd0eXBlJykgPT09IEZJTEVTKSB7XG4gICAgY29uc3QgZmlsZSA9IGdldEZpbGVGcm9tU2x1Zyhjb2xsZWN0aW9uLCBlbnRyeS5nZXQoJ3NsdWcnKSk7XG4gICAgY29uc3QgcHJldmlld0VuYWJsZWQgPSBmaWxlPy5nZXRJbihbJ2VkaXRvcicsICdwcmV2aWV3J10pO1xuICAgIGlmIChwcmV2aWV3RW5hYmxlZCAhPSBudWxsKSByZXR1cm4gcHJldmlld0VuYWJsZWQ7XG4gIH1cbiAgcmV0dXJuIGNvbGxlY3Rpb24uZ2V0SW4oWydlZGl0b3InLCAncHJldmlldyddLCB0cnVlKTtcbn1cblxuY2xhc3MgRWRpdG9ySW50ZXJmYWNlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGUgPSB7XG4gICAgc2hvd0V2ZW50QmxvY2tlcjogZmFsc2UsXG4gICAgcHJldmlld1Zpc2libGU6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFBSRVZJRVdfVklTSUJMRSkgIT09ICdmYWxzZScsXG4gICAgc2Nyb2xsU3luY0VuYWJsZWQ6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNDUk9MTF9TWU5DX0VOQUJMRUQpICE9PSAnZmFsc2UnLFxuICAgIGkxOG5WaXNpYmxlOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShJMThOX1ZJU0lCTEUpICE9PSAnZmFsc2UnLFxuICB9O1xuXG4gIGhhbmRsZVNwbGl0UGFuZURyYWdTdGFydCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2hvd0V2ZW50QmxvY2tlcjogdHJ1ZSB9KTtcbiAgfTtcblxuICBoYW5kbGVTcGxpdFBhbmVEcmFnRmluaXNoZWQgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dFdmVudEJsb2NrZXI6IGZhbHNlIH0pO1xuICB9O1xuXG4gIGhhbmRsZU9uUGVyc2lzdCA9IGFzeW5jIChvcHRzID0ge30pID0+IHtcbiAgICBjb25zdCB7IGNyZWF0ZU5ldyA9IGZhbHNlLCBkdXBsaWNhdGUgPSBmYWxzZSB9ID0gb3B0cztcbiAgICBhd2FpdCB0aGlzLmNvbnRyb2xQYW5lUmVmLnN3aXRjaFRvRGVmYXVsdExvY2FsZSgpO1xuICAgIHRoaXMuY29udHJvbFBhbmVSZWYudmFsaWRhdGUoKTtcbiAgICB0aGlzLnByb3BzLm9uUGVyc2lzdCh7IGNyZWF0ZU5ldywgZHVwbGljYXRlIH0pO1xuICB9O1xuXG4gIGhhbmRsZU9uUHVibGlzaCA9IGFzeW5jIChvcHRzID0ge30pID0+IHtcbiAgICBjb25zdCB7IGNyZWF0ZU5ldyA9IGZhbHNlLCBkdXBsaWNhdGUgPSBmYWxzZSB9ID0gb3B0cztcbiAgICBhd2FpdCB0aGlzLmNvbnRyb2xQYW5lUmVmLnN3aXRjaFRvRGVmYXVsdExvY2FsZSgpO1xuICAgIHRoaXMuY29udHJvbFBhbmVSZWYudmFsaWRhdGUoKTtcbiAgICB0aGlzLnByb3BzLm9uUHVibGlzaCh7IGNyZWF0ZU5ldywgZHVwbGljYXRlIH0pO1xuICB9O1xuXG4gIGhhbmRsZVRvZ2dsZVByZXZpZXcgPSAoKSA9PiB7XG4gICAgY29uc3QgbmV3UHJldmlld1Zpc2libGUgPSAhdGhpcy5zdGF0ZS5wcmV2aWV3VmlzaWJsZTtcbiAgICB0aGlzLnNldFN0YXRlKHsgcHJldmlld1Zpc2libGU6IG5ld1ByZXZpZXdWaXNpYmxlIH0pO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFBSRVZJRVdfVklTSUJMRSwgbmV3UHJldmlld1Zpc2libGUpO1xuICB9O1xuXG4gIGhhbmRsZVRvZ2dsZVNjcm9sbFN5bmMgPSAoKSA9PiB7XG4gICAgY29uc3QgbmV3U2Nyb2xsU3luY0VuYWJsZWQgPSAhdGhpcy5zdGF0ZS5zY3JvbGxTeW5jRW5hYmxlZDtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2Nyb2xsU3luY0VuYWJsZWQ6IG5ld1Njcm9sbFN5bmNFbmFibGVkIH0pO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFNDUk9MTF9TWU5DX0VOQUJMRUQsIG5ld1Njcm9sbFN5bmNFbmFibGVkKTtcbiAgfTtcblxuICBoYW5kbGVUb2dnbGVJMThuID0gKCkgPT4ge1xuICAgIGNvbnN0IG5ld0kxOG5WaXNpYmxlID0gIXRoaXMuc3RhdGUuaTE4blZpc2libGU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGkxOG5WaXNpYmxlOiBuZXdJMThuVmlzaWJsZSB9KTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShJMThOX1ZJU0lCTEUsIG5ld0kxOG5WaXNpYmxlKTtcbiAgfTtcblxuICBoYW5kbGVMZWZ0UGFuZWxMb2NhbGVDaGFuZ2UgPSBsb2NhbGUgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBsZWZ0UGFuZWxMb2NhbGU6IGxvY2FsZSB9KTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY29sbGVjdGlvbixcbiAgICAgIGVudHJ5LFxuICAgICAgZmllbGRzLFxuICAgICAgZmllbGRzTWV0YURhdGEsXG4gICAgICBmaWVsZHNFcnJvcnMsXG4gICAgICBvbkNoYW5nZSxcbiAgICAgIHNob3dEZWxldGUsXG4gICAgICBvbkRlbGV0ZSxcbiAgICAgIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzLFxuICAgICAgb25DaGFuZ2VTdGF0dXMsXG4gICAgICBvblB1Ymxpc2gsXG4gICAgICB1blB1Ymxpc2gsXG4gICAgICBvbkR1cGxpY2F0ZSxcbiAgICAgIG9uVmFsaWRhdGUsXG4gICAgICB1c2VyLFxuICAgICAgaGFzQ2hhbmdlZCxcbiAgICAgIGRpc3BsYXlVcmwsXG4gICAgICBoYXNXb3JrZmxvdyxcbiAgICAgIHVzZU9wZW5BdXRob3JpbmcsXG4gICAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXMsXG4gICAgICBpc05ld0VudHJ5LFxuICAgICAgaXNNb2RpZmljYXRpb24sXG4gICAgICBjdXJyZW50U3RhdHVzLFxuICAgICAgb25Mb2dvdXRDbGljayxcbiAgICAgIGxvYWREZXBsb3lQcmV2aWV3LFxuICAgICAgZGVwbG95UHJldmlldyxcbiAgICAgIGRyYWZ0S2V5LFxuICAgICAgZWRpdG9yQmFja0xpbmssXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgeyBzY3JvbGxTeW5jRW5hYmxlZCwgc2hvd0V2ZW50QmxvY2tlciB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IHByZXZpZXdFbmFibGVkID0gaXNQcmV2aWV3RW5hYmxlZChjb2xsZWN0aW9uLCBlbnRyeSk7XG5cbiAgICBjb25zdCB7IGxvY2FsZXMsIGRlZmF1bHRMb2NhbGUgfSA9IGdldEkxOG5JbmZvKHRoaXMucHJvcHMuY29sbGVjdGlvbik7XG4gICAgY29uc3QgY29sbGVjdGlvbkkxOG5FbmFibGVkID0gaGFzSTE4bihjb2xsZWN0aW9uKSAmJiBsb2NhbGVzLmxlbmd0aCA+IDE7XG4gICAgY29uc3QgZWRpdG9yUHJvcHMgPSB7XG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgZW50cnksXG4gICAgICBmaWVsZHMsXG4gICAgICBmaWVsZHNNZXRhRGF0YSxcbiAgICAgIGZpZWxkc0Vycm9ycyxcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgb25WYWxpZGF0ZSxcbiAgICB9O1xuXG4gICAgY29uc3QgbGVmdFBhbmVsTG9jYWxlID0gdGhpcy5zdGF0ZS5sZWZ0UGFuZWxMb2NhbGUgfHwgbG9jYWxlcz8uWzBdO1xuICAgIGNvbnN0IGVkaXRvciA9IChcbiAgICAgIDxDb250cm9sUGFuZUNvbnRhaW5lciBvdmVyRmxvdyBibG9ja0VudHJ5PXtzaG93RXZlbnRCbG9ja2VyfT5cbiAgICAgICAgPEVkaXRvckNvbnRyb2xQYW5lXG4gICAgICAgICAgey4uLmVkaXRvclByb3BzfVxuICAgICAgICAgIHJlZj17YyA9PiAodGhpcy5jb250cm9sUGFuZVJlZiA9IGMpfVxuICAgICAgICAgIGxvY2FsZT17bGVmdFBhbmVsTG9jYWxlfVxuICAgICAgICAgIHQ9e3R9XG4gICAgICAgICAgb25Mb2NhbGVDaGFuZ2U9e3RoaXMuaGFuZGxlTGVmdFBhbmVsTG9jYWxlQ2hhbmdlfVxuICAgICAgICAvPlxuICAgICAgPC9Db250cm9sUGFuZUNvbnRhaW5lcj5cbiAgICApO1xuXG4gICAgY29uc3QgZWRpdG9yMiA9IChcbiAgICAgIDxDb250cm9sUGFuZUNvbnRhaW5lciBvdmVyRmxvdz17IXRoaXMuc3RhdGUuc2Nyb2xsU3luY0VuYWJsZWR9IGJsb2NrRW50cnk9e3Nob3dFdmVudEJsb2NrZXJ9PlxuICAgICAgICA8RWRpdG9yQ29udHJvbFBhbmUgey4uLmVkaXRvclByb3BzfSBsb2NhbGU9e2xvY2FsZXM/LlsxXX0gdD17dH0gLz5cbiAgICAgIDwvQ29udHJvbFBhbmVDb250YWluZXI+XG4gICAgKTtcblxuICAgIGNvbnN0IHByZXZpZXdFbnRyeSA9IGNvbGxlY3Rpb25JMThuRW5hYmxlZFxuICAgICAgPyBnZXRQcmV2aWV3RW50cnkoZW50cnksIGxlZnRQYW5lbExvY2FsZSwgZGVmYXVsdExvY2FsZSlcbiAgICAgIDogZW50cnk7XG5cbiAgICBjb25zdCBlZGl0b3JXaXRoUHJldmlldyA9IChcbiAgICAgIDxTY3JvbGxTeW5jIGVuYWJsZWQ9e3RoaXMuc3RhdGUuc2Nyb2xsU3luY0VuYWJsZWR9PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxSZWFjdFNwbGl0UGFuZUdsb2JhbFN0eWxlcyAvPlxuICAgICAgICAgIDxTdHlsZWRTcGxpdFBhbmVcbiAgICAgICAgICAgIG1heFNpemU9ey0xMDB9XG4gICAgICAgICAgICBtaW5TaXplPXs0MDB9XG4gICAgICAgICAgICBkZWZhdWx0U2l6ZT17cGFyc2VJbnQobG9jYWxTdG9yYWdlLmdldEl0ZW0oU1BMSVRfUEFORV9QT1NJVElPTiksIDEwKSB8fCAnNTAlJ31cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtzaXplID0+IGxvY2FsU3RvcmFnZS5zZXRJdGVtKFNQTElUX1BBTkVfUE9TSVRJT04sIHNpemUpfVxuICAgICAgICAgICAgb25EcmFnU3RhcnRlZD17dGhpcy5oYW5kbGVTcGxpdFBhbmVEcmFnU3RhcnR9XG4gICAgICAgICAgICBvbkRyYWdGaW5pc2hlZD17dGhpcy5oYW5kbGVTcGxpdFBhbmVEcmFnRmluaXNoZWR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFNjcm9sbFN5bmNQYW5lPntlZGl0b3J9PC9TY3JvbGxTeW5jUGFuZT5cbiAgICAgICAgICAgIDxQcmV2aWV3UGFuZUNvbnRhaW5lciBibG9ja0VudHJ5PXtzaG93RXZlbnRCbG9ja2VyfT5cbiAgICAgICAgICAgICAgPEVkaXRvclByZXZpZXdQYW5lXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgICAgICBlbnRyeT17cHJldmlld0VudHJ5fVxuICAgICAgICAgICAgICAgIGZpZWxkcz17ZmllbGRzfVxuICAgICAgICAgICAgICAgIGZpZWxkc01ldGFEYXRhPXtmaWVsZHNNZXRhRGF0YX1cbiAgICAgICAgICAgICAgICBsb2NhbGU9e2xlZnRQYW5lbExvY2FsZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvUHJldmlld1BhbmVDb250YWluZXI+XG4gICAgICAgICAgPC9TdHlsZWRTcGxpdFBhbmU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9TY3JvbGxTeW5jPlxuICAgICk7XG5cbiAgICBjb25zdCBlZGl0b3JXaXRoRWRpdG9yID0gKFxuICAgICAgPFNjcm9sbFN5bmMgZW5hYmxlZD17dGhpcy5zdGF0ZS5zY3JvbGxTeW5jRW5hYmxlZH0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPFN0eWxlZFNwbGl0UGFuZVxuICAgICAgICAgICAgbWF4U2l6ZT17LTEwMH1cbiAgICAgICAgICAgIGRlZmF1bHRTaXplPXtwYXJzZUludChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShTUExJVF9QQU5FX1BPU0lUSU9OKSwgMTApIHx8ICc1MCUnfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3NpemUgPT4gbG9jYWxTdG9yYWdlLnNldEl0ZW0oU1BMSVRfUEFORV9QT1NJVElPTiwgc2l6ZSl9XG4gICAgICAgICAgICBvbkRyYWdTdGFydGVkPXt0aGlzLmhhbmRsZVNwbGl0UGFuZURyYWdTdGFydH1cbiAgICAgICAgICAgIG9uRHJhZ0ZpbmlzaGVkPXt0aGlzLmhhbmRsZVNwbGl0UGFuZURyYWdGaW5pc2hlZH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8U2Nyb2xsU3luY1BhbmU+e2VkaXRvcn08L1Njcm9sbFN5bmNQYW5lPlxuICAgICAgICAgICAgPFNjcm9sbFN5bmNQYW5lPntlZGl0b3IyfTwvU2Nyb2xsU3luY1BhbmU+XG4gICAgICAgICAgPC9TdHlsZWRTcGxpdFBhbmU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9TY3JvbGxTeW5jPlxuICAgICk7XG5cbiAgICBjb25zdCBpMThuVmlzaWJsZSA9IGNvbGxlY3Rpb25JMThuRW5hYmxlZCAmJiB0aGlzLnN0YXRlLmkxOG5WaXNpYmxlO1xuICAgIGNvbnN0IHByZXZpZXdWaXNpYmxlID0gcHJldmlld0VuYWJsZWQgJiYgdGhpcy5zdGF0ZS5wcmV2aWV3VmlzaWJsZTtcbiAgICBjb25zdCBzY3JvbGxTeW5jVmlzaWJsZSA9IGkxOG5WaXNpYmxlIHx8IHByZXZpZXdWaXNpYmxlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxFZGl0b3JDb250YWluZXI+XG4gICAgICAgIDxFZGl0b3JUb29sYmFyXG4gICAgICAgICAgaXNQZXJzaXN0aW5nPXtlbnRyeS5nZXQoJ2lzUGVyc2lzdGluZycpfVxuICAgICAgICAgIGlzUHVibGlzaGluZz17ZW50cnkuZ2V0KCdpc1B1Ymxpc2hpbmcnKX1cbiAgICAgICAgICBpc1VwZGF0aW5nU3RhdHVzPXtlbnRyeS5nZXQoJ2lzVXBkYXRpbmdTdGF0dXMnKX1cbiAgICAgICAgICBpc0RlbGV0aW5nPXtlbnRyeS5nZXQoJ2lzRGVsZXRpbmcnKX1cbiAgICAgICAgICBvblBlcnNpc3Q9e3RoaXMuaGFuZGxlT25QZXJzaXN0fVxuICAgICAgICAgIG9uUGVyc2lzdEFuZE5ldz17KCkgPT4gdGhpcy5oYW5kbGVPblBlcnNpc3QoeyBjcmVhdGVOZXc6IHRydWUgfSl9XG4gICAgICAgICAgb25QZXJzaXN0QW5kRHVwbGljYXRlPXsoKSA9PiB0aGlzLmhhbmRsZU9uUGVyc2lzdCh7IGNyZWF0ZU5ldzogdHJ1ZSwgZHVwbGljYXRlOiB0cnVlIH0pfVxuICAgICAgICAgIG9uRGVsZXRlPXtvbkRlbGV0ZX1cbiAgICAgICAgICBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcz17b25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXN9XG4gICAgICAgICAgb25DaGFuZ2VTdGF0dXM9e29uQ2hhbmdlU3RhdHVzfVxuICAgICAgICAgIHNob3dEZWxldGU9e3Nob3dEZWxldGV9XG4gICAgICAgICAgb25QdWJsaXNoPXtvblB1Ymxpc2h9XG4gICAgICAgICAgdW5QdWJsaXNoPXt1blB1Ymxpc2h9XG4gICAgICAgICAgb25EdXBsaWNhdGU9e29uRHVwbGljYXRlfVxuICAgICAgICAgIG9uUHVibGlzaEFuZE5ldz17KCkgPT4gdGhpcy5oYW5kbGVPblB1Ymxpc2goeyBjcmVhdGVOZXc6IHRydWUgfSl9XG4gICAgICAgICAgb25QdWJsaXNoQW5kRHVwbGljYXRlPXsoKSA9PiB0aGlzLmhhbmRsZU9uUHVibGlzaCh7IGNyZWF0ZU5ldzogdHJ1ZSwgZHVwbGljYXRlOiB0cnVlIH0pfVxuICAgICAgICAgIHVzZXI9e3VzZXJ9XG4gICAgICAgICAgaGFzQ2hhbmdlZD17aGFzQ2hhbmdlZH1cbiAgICAgICAgICBkaXNwbGF5VXJsPXtkaXNwbGF5VXJsfVxuICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgaGFzV29ya2Zsb3c9e2hhc1dvcmtmbG93fVxuICAgICAgICAgIHVzZU9wZW5BdXRob3Jpbmc9e3VzZU9wZW5BdXRob3Jpbmd9XG4gICAgICAgICAgaGFzVW5wdWJsaXNoZWRDaGFuZ2VzPXtoYXNVbnB1Ymxpc2hlZENoYW5nZXN9XG4gICAgICAgICAgaXNOZXdFbnRyeT17aXNOZXdFbnRyeX1cbiAgICAgICAgICBpc01vZGlmaWNhdGlvbj17aXNNb2RpZmljYXRpb259XG4gICAgICAgICAgY3VycmVudFN0YXR1cz17Y3VycmVudFN0YXR1c31cbiAgICAgICAgICBvbkxvZ291dENsaWNrPXtvbkxvZ291dENsaWNrfVxuICAgICAgICAgIGxvYWREZXBsb3lQcmV2aWV3PXtsb2FkRGVwbG95UHJldmlld31cbiAgICAgICAgICBkZXBsb3lQcmV2aWV3PXtkZXBsb3lQcmV2aWV3fVxuICAgICAgICAgIGVkaXRvckJhY2tMaW5rPXtlZGl0b3JCYWNrTGlua31cbiAgICAgICAgLz5cbiAgICAgICAgPEVkaXRvciBrZXk9e2RyYWZ0S2V5fT5cbiAgICAgICAgICA8Vmlld0NvbnRyb2xzPlxuICAgICAgICAgICAge2NvbGxlY3Rpb25JMThuRW5hYmxlZCAmJiAoXG4gICAgICAgICAgICAgIDxFZGl0b3JUb2dnbGVcbiAgICAgICAgICAgICAgICBpc0FjdGl2ZT17aTE4blZpc2libGV9XG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVUb2dnbGVJMThufVxuICAgICAgICAgICAgICAgIHNpemU9XCJsYXJnZVwiXG4gICAgICAgICAgICAgICAgdHlwZT1cInBhZ2VcIlxuICAgICAgICAgICAgICAgIHRpdGxlPXt0KCdlZGl0b3IuZWRpdG9ySW50ZXJmYWNlLnRvZ2dsZUkxOG4nKX1cbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A9XCI3MHB4XCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7cHJldmlld0VuYWJsZWQgJiYgKFxuICAgICAgICAgICAgICA8RWRpdG9yVG9nZ2xlXG4gICAgICAgICAgICAgICAgaXNBY3RpdmU9e3ByZXZpZXdWaXNpYmxlfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlVG9nZ2xlUHJldmlld31cbiAgICAgICAgICAgICAgICBzaXplPVwibGFyZ2VcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJleWVcIlxuICAgICAgICAgICAgICAgIHRpdGxlPXt0KCdlZGl0b3IuZWRpdG9ySW50ZXJmYWNlLnRvZ2dsZVByZXZpZXcnKX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7c2Nyb2xsU3luY1Zpc2libGUgJiYgKFxuICAgICAgICAgICAgICA8RWRpdG9yVG9nZ2xlXG4gICAgICAgICAgICAgICAgaXNBY3RpdmU9e3Njcm9sbFN5bmNFbmFibGVkfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlVG9nZ2xlU2Nyb2xsU3luY31cbiAgICAgICAgICAgICAgICBzaXplPVwibGFyZ2VcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJzY3JvbGxcIlxuICAgICAgICAgICAgICAgIHRpdGxlPXt0KCdlZGl0b3IuZWRpdG9ySW50ZXJmYWNlLnRvZ2dsZVNjcm9sbFN5bmMnKX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9WaWV3Q29udHJvbHM+XG4gICAgICAgICAgPEVkaXRvckNvbnRlbnRcbiAgICAgICAgICAgIGkxOG5WaXNpYmxlPXtpMThuVmlzaWJsZX1cbiAgICAgICAgICAgIHByZXZpZXdWaXNpYmxlPXtwcmV2aWV3VmlzaWJsZX1cbiAgICAgICAgICAgIGVkaXRvcj17ZWRpdG9yfVxuICAgICAgICAgICAgZWRpdG9yV2l0aEVkaXRvcj17ZWRpdG9yV2l0aEVkaXRvcn1cbiAgICAgICAgICAgIGVkaXRvcldpdGhQcmV2aWV3PXtlZGl0b3JXaXRoUHJldmlld31cbiAgICAgICAgICAvPlxuICAgICAgICA8L0VkaXRvcj5cbiAgICAgIDwvRWRpdG9yQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuRWRpdG9ySW50ZXJmYWNlLnByb3BUeXBlcyA9IHtcbiAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICBlbnRyeTogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICBmaWVsZHM6IEltbXV0YWJsZVByb3BUeXBlcy5saXN0LmlzUmVxdWlyZWQsXG4gIGZpZWxkc01ldGFEYXRhOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIGZpZWxkc0Vycm9yczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25WYWxpZGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25QZXJzaXN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBzaG93RGVsZXRlOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICBvbkRlbGV0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uUHVibGlzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdW5QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkR1cGxpY2F0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25DaGFuZ2VTdGF0dXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHVzZXI6IFByb3BUeXBlcy5vYmplY3QsXG4gIGhhc0NoYW5nZWQ6IFByb3BUeXBlcy5ib29sLFxuICBkaXNwbGF5VXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBoYXNXb3JrZmxvdzogUHJvcFR5cGVzLmJvb2wsXG4gIHVzZU9wZW5BdXRob3Jpbmc6IFByb3BUeXBlcy5ib29sLFxuICBoYXNVbnB1Ymxpc2hlZENoYW5nZXM6IFByb3BUeXBlcy5ib29sLFxuICBpc05ld0VudHJ5OiBQcm9wVHlwZXMuYm9vbCxcbiAgaXNNb2RpZmljYXRpb246IFByb3BUeXBlcy5ib29sLFxuICBjdXJyZW50U3RhdHVzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBkZXBsb3lQcmV2aWV3OiBQcm9wVHlwZXMub2JqZWN0LFxuICBsb2FkRGVwbG95UHJldmlldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZHJhZnRLZXk6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEVkaXRvckludGVyZmFjZTtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
function ReactSplitPaneGlobalStyles() {
  return (0, _react2.jsx)(_react2.Global, {
    styles: /*#__PURE__*/(0, _react2.css)(".Resizer.vertical{width:21px;cursor:col-resize;position:relative;transition:background-color ", _decapCmsUiDefault.transitions.main, ";&:before{content:'';width:2px;height:100%;position:relative;left:10px;background-color:", _decapCmsUiDefault.colors.textFieldBorder, ";display:block;}&:hover,&:active{background-color:", _decapCmsUiDefault.colorsRaw.GrayLight, ";}};label:ReactSplitPaneGlobalStyles;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  });
}
const StyledSplitPane = /*#__PURE__*/(0, _base.default)(_reactSplitPane.default, {
  target: "e1nx103k6",
  label: "StyledSplitPane"
})(styles.splitPane, ";.Pane{height:100%;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const NoPreviewContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1nx103k5",
  label: "NoPreviewContainer"
})(styles.splitPane, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const EditorContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1nx103k4",
  label: "EditorContainer"
})("width:100%;min-width:800px;height:100%;position:absolute;top:0;left:0;overflow:hidden;padding-top:66px;background-color:", _decapCmsUiDefault.colors.background, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const Editor = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1nx103k3",
  label: "Editor"
})(process.env.NODE_ENV === "production" ? {
  name: "yd3x82",
  styles: "height:100%;margin:0 auto;position:relative"
} : {
  name: "yd3x82",
  styles: "height:100%;margin:0 auto;position:relative",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const PreviewPaneContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1nx103k2",
  label: "PreviewPaneContainer"
})("height:100%;pointer-events:", props => props.blockEntry ? 'none' : 'auto', ";overflow-y:", props => props.overFlow ? 'auto' : 'hidden', ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ControlPaneContainer = /*#__PURE__*/(0, _base.default)(PreviewPaneContainer, {
  target: "e1nx103k1",
  label: "ControlPaneContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "b2tic3",
  styles: "padding:0 16px;position:relative;overflow-x:hidden"
} : {
  name: "b2tic3",
  styles: "padding:0 16px;position:relative;overflow-x:hidden",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ViewControls = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1nx103k0",
  label: "ViewControls"
})("position:absolute;top:10px;right:10px;z-index:", _decapCmsUiDefault.zIndex.zIndex299, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
function EditorContent({
  i18nVisible,
  previewVisible,
  editor,
  editorWithEditor,
  editorWithPreview
}) {
  if (i18nVisible) {
    return editorWithEditor;
  } else if (previewVisible) {
    return editorWithPreview;
  } else {
    return (0, _react2.jsx)(NoPreviewContainer, null, editor);
  }
}
function isPreviewEnabled(collection, entry) {
  if (collection.get('type') === _collectionTypes.FILES) {
    const file = (0, _collections.getFileFromSlug)(collection, entry.get('slug'));
    const previewEnabled = file === null || file === void 0 ? void 0 : file.getIn(['editor', 'preview']);
    if (previewEnabled != null) return previewEnabled;
  }
  return collection.getIn(['editor', 'preview'], true);
}
class EditorInterface extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      showEventBlocker: false,
      previewVisible: localStorage.getItem(PREVIEW_VISIBLE) !== 'false',
      scrollSyncEnabled: localStorage.getItem(SCROLL_SYNC_ENABLED) !== 'false',
      i18nVisible: localStorage.getItem(I18N_VISIBLE) !== 'false'
    });
    _defineProperty(this, "handleSplitPaneDragStart", () => {
      this.setState({
        showEventBlocker: true
      });
    });
    _defineProperty(this, "handleSplitPaneDragFinished", () => {
      this.setState({
        showEventBlocker: false
      });
    });
    _defineProperty(this, "handleOnPersist", async (opts = {}) => {
      const {
        createNew = false,
        duplicate = false
      } = opts;
      await this.controlPaneRef.switchToDefaultLocale();
      this.controlPaneRef.validate();
      this.props.onPersist({
        createNew,
        duplicate
      });
    });
    _defineProperty(this, "handleOnPublish", async (opts = {}) => {
      const {
        createNew = false,
        duplicate = false
      } = opts;
      await this.controlPaneRef.switchToDefaultLocale();
      this.controlPaneRef.validate();
      this.props.onPublish({
        createNew,
        duplicate
      });
    });
    _defineProperty(this, "handleTogglePreview", () => {
      const newPreviewVisible = !this.state.previewVisible;
      this.setState({
        previewVisible: newPreviewVisible
      });
      localStorage.setItem(PREVIEW_VISIBLE, newPreviewVisible);
    });
    _defineProperty(this, "handleToggleScrollSync", () => {
      const newScrollSyncEnabled = !this.state.scrollSyncEnabled;
      this.setState({
        scrollSyncEnabled: newScrollSyncEnabled
      });
      localStorage.setItem(SCROLL_SYNC_ENABLED, newScrollSyncEnabled);
    });
    _defineProperty(this, "handleToggleI18n", () => {
      const newI18nVisible = !this.state.i18nVisible;
      this.setState({
        i18nVisible: newI18nVisible
      });
      localStorage.setItem(I18N_VISIBLE, newI18nVisible);
    });
    _defineProperty(this, "handleLeftPanelLocaleChange", locale => {
      this.setState({
        leftPanelLocale: locale
      });
    });
  }
  render() {
    const {
      collection,
      entry,
      fields,
      fieldsMetaData,
      fieldsErrors,
      onChange,
      showDelete,
      onDelete,
      onDeleteUnpublishedChanges,
      onChangeStatus,
      onPublish,
      unPublish,
      onDuplicate,
      onValidate,
      user,
      hasChanged,
      displayUrl,
      hasWorkflow,
      useOpenAuthoring,
      hasUnpublishedChanges,
      isNewEntry,
      isModification,
      currentStatus,
      onLogoutClick,
      loadDeployPreview,
      deployPreview,
      draftKey,
      editorBackLink,
      t
    } = this.props;
    const {
      scrollSyncEnabled,
      showEventBlocker
    } = this.state;
    const previewEnabled = isPreviewEnabled(collection, entry);
    const {
      locales,
      defaultLocale
    } = (0, _i18n.getI18nInfo)(this.props.collection);
    const collectionI18nEnabled = (0, _i18n.hasI18n)(collection) && locales.length > 1;
    const editorProps = {
      collection,
      entry,
      fields,
      fieldsMetaData,
      fieldsErrors,
      onChange,
      onValidate
    };
    const leftPanelLocale = this.state.leftPanelLocale || (locales === null || locales === void 0 ? void 0 : locales[0]);
    const editor = (0, _react2.jsx)(ControlPaneContainer, {
      overFlow: true,
      blockEntry: showEventBlocker
    }, (0, _react2.jsx)(_EditorControlPane.default, _extends({}, editorProps, {
      ref: c => this.controlPaneRef = c,
      locale: leftPanelLocale,
      t: t,
      onLocaleChange: this.handleLeftPanelLocaleChange
    })));
    const editor2 = (0, _react2.jsx)(ControlPaneContainer, {
      overFlow: !this.state.scrollSyncEnabled,
      blockEntry: showEventBlocker
    }, (0, _react2.jsx)(_EditorControlPane.default, _extends({}, editorProps, {
      locale: locales === null || locales === void 0 ? void 0 : locales[1],
      t: t
    })));
    const previewEntry = collectionI18nEnabled ? (0, _i18n.getPreviewEntry)(entry, leftPanelLocale, defaultLocale) : entry;
    const editorWithPreview = (0, _react2.jsx)(_reactScrollSync.ScrollSync, {
      enabled: this.state.scrollSyncEnabled
    }, (0, _react2.jsx)("div", null, (0, _react2.jsx)(ReactSplitPaneGlobalStyles, null), (0, _react2.jsx)(StyledSplitPane, {
      maxSize: -100,
      minSize: 400,
      defaultSize: parseInt(localStorage.getItem(SPLIT_PANE_POSITION), 10) || '50%',
      onChange: size => localStorage.setItem(SPLIT_PANE_POSITION, size),
      onDragStarted: this.handleSplitPaneDragStart,
      onDragFinished: this.handleSplitPaneDragFinished
    }, (0, _react2.jsx)(_reactScrollSync.ScrollSyncPane, null, editor), (0, _react2.jsx)(PreviewPaneContainer, {
      blockEntry: showEventBlocker
    }, (0, _react2.jsx)(_EditorPreviewPane.default, {
      collection: collection,
      entry: previewEntry,
      fields: fields,
      fieldsMetaData: fieldsMetaData,
      locale: leftPanelLocale
    })))));
    const editorWithEditor = (0, _react2.jsx)(_reactScrollSync.ScrollSync, {
      enabled: this.state.scrollSyncEnabled
    }, (0, _react2.jsx)("div", null, (0, _react2.jsx)(StyledSplitPane, {
      maxSize: -100,
      defaultSize: parseInt(localStorage.getItem(SPLIT_PANE_POSITION), 10) || '50%',
      onChange: size => localStorage.setItem(SPLIT_PANE_POSITION, size),
      onDragStarted: this.handleSplitPaneDragStart,
      onDragFinished: this.handleSplitPaneDragFinished
    }, (0, _react2.jsx)(_reactScrollSync.ScrollSyncPane, null, editor), (0, _react2.jsx)(_reactScrollSync.ScrollSyncPane, null, editor2))));
    const i18nVisible = collectionI18nEnabled && this.state.i18nVisible;
    const previewVisible = previewEnabled && this.state.previewVisible;
    const scrollSyncVisible = i18nVisible || previewVisible;
    return (0, _react2.jsx)(EditorContainer, null, (0, _react2.jsx)(_EditorToolbar.default, {
      isPersisting: entry.get('isPersisting'),
      isPublishing: entry.get('isPublishing'),
      isUpdatingStatus: entry.get('isUpdatingStatus'),
      isDeleting: entry.get('isDeleting'),
      onPersist: this.handleOnPersist,
      onPersistAndNew: () => this.handleOnPersist({
        createNew: true
      }),
      onPersistAndDuplicate: () => this.handleOnPersist({
        createNew: true,
        duplicate: true
      }),
      onDelete: onDelete,
      onDeleteUnpublishedChanges: onDeleteUnpublishedChanges,
      onChangeStatus: onChangeStatus,
      showDelete: showDelete,
      onPublish: onPublish,
      unPublish: unPublish,
      onDuplicate: onDuplicate,
      onPublishAndNew: () => this.handleOnPublish({
        createNew: true
      }),
      onPublishAndDuplicate: () => this.handleOnPublish({
        createNew: true,
        duplicate: true
      }),
      user: user,
      hasChanged: hasChanged,
      displayUrl: displayUrl,
      collection: collection,
      hasWorkflow: hasWorkflow,
      useOpenAuthoring: useOpenAuthoring,
      hasUnpublishedChanges: hasUnpublishedChanges,
      isNewEntry: isNewEntry,
      isModification: isModification,
      currentStatus: currentStatus,
      onLogoutClick: onLogoutClick,
      loadDeployPreview: loadDeployPreview,
      deployPreview: deployPreview,
      editorBackLink: editorBackLink
    }), (0, _react2.jsx)(Editor, {
      key: draftKey
    }, (0, _react2.jsx)(ViewControls, null, collectionI18nEnabled && (0, _react2.jsx)(EditorToggle, {
      isActive: i18nVisible,
      onClick: this.handleToggleI18n,
      size: "large",
      type: "page",
      title: t('editor.editorInterface.toggleI18n'),
      marginTop: "70px"
    }), previewEnabled && (0, _react2.jsx)(EditorToggle, {
      isActive: previewVisible,
      onClick: this.handleTogglePreview,
      size: "large",
      type: "eye",
      title: t('editor.editorInterface.togglePreview')
    }), scrollSyncVisible && (0, _react2.jsx)(EditorToggle, {
      isActive: scrollSyncEnabled,
      onClick: this.handleToggleScrollSync,
      size: "large",
      type: "scroll",
      title: t('editor.editorInterface.toggleScrollSync')
    })), (0, _react2.jsx)(EditorContent, {
      i18nVisible: i18nVisible,
      previewVisible: previewVisible,
      editor: editor,
      editorWithEditor: editorWithEditor,
      editorWithPreview: editorWithPreview
    })));
  }
}
EditorInterface.propTypes = {
  collection: _reactImmutableProptypes.default.map.isRequired,
  entry: _reactImmutableProptypes.default.map.isRequired,
  fields: _reactImmutableProptypes.default.list.isRequired,
  fieldsMetaData: _reactImmutableProptypes.default.map.isRequired,
  fieldsErrors: _reactImmutableProptypes.default.map.isRequired,
  onChange: _propTypes.default.func.isRequired,
  onValidate: _propTypes.default.func.isRequired,
  onPersist: _propTypes.default.func.isRequired,
  showDelete: _propTypes.default.bool.isRequired,
  onDelete: _propTypes.default.func.isRequired,
  onDeleteUnpublishedChanges: _propTypes.default.func.isRequired,
  onPublish: _propTypes.default.func.isRequired,
  unPublish: _propTypes.default.func.isRequired,
  onDuplicate: _propTypes.default.func.isRequired,
  onChangeStatus: _propTypes.default.func.isRequired,
  user: _propTypes.default.object,
  hasChanged: _propTypes.default.bool,
  displayUrl: _propTypes.default.string,
  hasWorkflow: _propTypes.default.bool,
  useOpenAuthoring: _propTypes.default.bool,
  hasUnpublishedChanges: _propTypes.default.bool,
  isNewEntry: _propTypes.default.bool,
  isModification: _propTypes.default.bool,
  currentStatus: _propTypes.default.string,
  onLogoutClick: _propTypes.default.func.isRequired,
  deployPreview: _propTypes.default.object,
  loadDeployPreview: _propTypes.default.func.isRequired,
  draftKey: _propTypes.default.string.isRequired,
  t: _propTypes.default.func.isRequired
};
var _default = exports.default = EditorInterface;