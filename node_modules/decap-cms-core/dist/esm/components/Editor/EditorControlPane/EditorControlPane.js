"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _react2 = require("@emotion/react");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _EditorControl = _interopRequireDefault(require("./EditorControl"));
var _i18n = require("../../../lib/i18n");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const ControlPaneContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e11hw0lx4",
  label: "ControlPaneContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "1n0x6o4",
  styles: "max-width:800px;margin:0 auto;padding-bottom:16px;font-size:16px"
} : {
  name: "1n0x6o4",
  styles: "max-width:800px;margin:0 auto;padding-bottom:16px;font-size:16px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const LocaleButton = /*#__PURE__*/(0, _base.default)(_decapCmsUiDefault.StyledDropdownButton, {
  target: "e11hw0lx3",
  label: "LocaleButton"
})(_decapCmsUiDefault.buttons.button, ";", _decapCmsUiDefault.buttons.medium, ";color:", _decapCmsUiDefault.colors.controlLabel, ";background:", _decapCmsUiDefault.colors.textFieldBorder, ";height:100%;&:after{top:11px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const LocaleButtonWrapper = /*#__PURE__*/(0, _base.default)("div", {
  target: "e11hw0lx2",
  label: "LocaleButtonWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "zjik7",
  styles: "display:flex"
} : {
  name: "zjik7",
  styles: "display:flex",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const LocaleRowWrapper = /*#__PURE__*/(0, _base.default)("div", {
  target: "e11hw0lx1",
  label: "LocaleRowWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "zjik7",
  styles: "display:flex"
} : {
  name: "zjik7",
  styles: "display:flex",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledDropdown = /*#__PURE__*/(0, _base.default)(_decapCmsUiDefault.Dropdown, {
  target: "e11hw0lx0",
  label: "StyledDropdown"
})(process.env.NODE_ENV === "production" ? {
  name: "1hfmrg2",
  styles: "width:max-content;margin-top:20px;margin-bottom:20px;margin-right:20px"
} : {
  name: "1hfmrg2",
  styles: "width:max-content;margin-top:20px;margin-bottom:20px;margin-right:20px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
function LocaleDropdown({
  locales,
  dropdownText,
  onLocaleChange
}) {
  return (0, _react2.jsx)(StyledDropdown, {
    renderButton: () => {
      return (0, _react2.jsx)(LocaleButtonWrapper, null, (0, _react2.jsx)(LocaleButton, null, dropdownText));
    }
  }, locales.map(l => (0, _react2.jsx)(_decapCmsUiDefault.DropdownItem, {
    css: /*#__PURE__*/(0, _react2.css)(_decapCmsUiDefault.text.fieldLabel, ";;label:LocaleDropdown;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
    key: l,
    label: l,
    onClick: () => onLocaleChange(l)
  })));
}
function getFieldValue({
  field,
  entry,
  isTranslatable,
  locale
}) {
  if (field.get('meta')) {
    return entry.getIn(['meta', field.get('name')]);
  }
  if (isTranslatable) {
    const dataPath = (0, _i18n.getLocaleDataPath)(locale);
    return entry.getIn([...dataPath, field.get('name')]);
  }
  return entry.getIn(['data', field.get('name')]);
}
class ControlPane extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      selectedLocale: this.props.locale
    });
    _defineProperty(this, "componentValidate", {});
    _defineProperty(this, "handleLocaleChange", val => {
      this.setState({
        selectedLocale: val
      });
      this.props.onLocaleChange(val);
    });
    _defineProperty(this, "copyFromOtherLocale", ({
      targetLocale,
      t
    }) => sourceLocale => {
      if (!window.confirm(t('editor.editorControlPane.i18n.copyFromLocaleConfirm', {
        locale: sourceLocale.toUpperCase()
      }))) {
        return;
      }
      const {
        entry,
        collection
      } = this.props;
      const {
        locales,
        defaultLocale
      } = (0, _i18n.getI18nInfo)(collection);
      const locale = this.state.selectedLocale;
      const i18n = locales && {
        currentLocale: locale,
        locales,
        defaultLocale
      };
      this.props.fields.forEach(field => {
        if ((0, _i18n.isFieldTranslatable)(field, targetLocale, sourceLocale)) {
          const copyValue = getFieldValue({
            field,
            entry,
            locale: sourceLocale,
            isTranslatable: sourceLocale !== defaultLocale
          });
          if (copyValue) this.props.onChange(field, copyValue, undefined, i18n);
        }
      });
    });
    _defineProperty(this, "validate", async () => {
      this.props.fields.forEach(field => {
        if (field.get('widget') === 'hidden') return;
        this.componentValidate[field.get('name')]();
      });
    });
    _defineProperty(this, "switchToDefaultLocale", () => {
      if ((0, _i18n.hasI18n)(this.props.collection)) {
        const {
          defaultLocale
        } = (0, _i18n.getI18nInfo)(this.props.collection);
        return new Promise(resolve => this.setState({
          selectedLocale: defaultLocale
        }, resolve));
      } else {
        return Promise.resolve();
      }
    });
  }
  controlRef(field, wrappedControl) {
    var _wrappedControl$inner;
    if (!wrappedControl) return;
    const name = field.get('name');
    this.componentValidate[name] = ((_wrappedControl$inner = wrappedControl.innerWrappedControl) === null || _wrappedControl$inner === void 0 ? void 0 : _wrappedControl$inner.validate) || wrappedControl.validate;
  }
  render() {
    const {
      collection,
      entry,
      fields,
      fieldsMetaData,
      fieldsErrors,
      onChange,
      onValidate,
      t
    } = this.props;
    if (!collection || !fields) {
      return null;
    }
    if (entry.size === 0 || entry.get('partial') === true) {
      return null;
    }
    const {
      locales,
      defaultLocale
    } = (0, _i18n.getI18nInfo)(collection);
    const locale = this.state.selectedLocale;
    const i18n = locales && {
      currentLocale: locale,
      locales,
      defaultLocale
    };
    return (0, _react2.jsx)(ControlPaneContainer, null, locales && (0, _react2.jsx)(LocaleRowWrapper, null, (0, _react2.jsx)(LocaleDropdown, {
      locales: locales,
      dropdownText: t('editor.editorControlPane.i18n.writingInLocale', {
        locale: locale.toUpperCase()
      }),
      onLocaleChange: this.handleLocaleChange
    }), (0, _react2.jsx)(LocaleDropdown, {
      locales: locales.filter(l => l !== locale),
      dropdownText: t('editor.editorControlPane.i18n.copyFromLocale'),
      onLocaleChange: this.copyFromOtherLocale({
        targetLocale: locale,
        t
      })
    })), fields.filter(f => f.get('widget') !== 'hidden').map((field, i) => {
      const isTranslatable = (0, _i18n.isFieldTranslatable)(field, locale, defaultLocale);
      const isDuplicate = (0, _i18n.isFieldDuplicate)(field, locale, defaultLocale);
      const isHidden = (0, _i18n.isFieldHidden)(field, locale, defaultLocale);
      const key = i18n ? `${locale}_${i}` : i;
      return (0, _react2.jsx)(_EditorControl.default, {
        key: key,
        field: field,
        value: getFieldValue({
          field,
          entry,
          locale,
          isTranslatable
        }),
        fieldsMetaData: fieldsMetaData,
        fieldsErrors: fieldsErrors,
        onChange: (field, newValue, newMetadata) => {
          onChange(field, newValue, newMetadata, i18n);
        },
        onValidate: onValidate,
        processControlRef: this.controlRef.bind(this),
        controlRef: this.controlRef,
        entry: entry,
        collection: collection,
        isDisabled: isDuplicate,
        isHidden: isHidden,
        isFieldDuplicate: field => (0, _i18n.isFieldDuplicate)(field, locale, defaultLocale),
        isFieldHidden: field => (0, _i18n.isFieldHidden)(field, locale, defaultLocale),
        locale: locale
      });
    }));
  }
}
exports.default = ControlPane;
ControlPane.propTypes = {
  collection: _reactImmutableProptypes.default.map.isRequired,
  entry: _reactImmutableProptypes.default.map.isRequired,
  fields: _reactImmutableProptypes.default.list.isRequired,
  fieldsMetaData: _reactImmutableProptypes.default.map.isRequired,
  fieldsErrors: _reactImmutableProptypes.default.map.isRequired,
  onChange: _propTypes.default.func.isRequired,
  onValidate: _propTypes.default.func.isRequired,
  locale: _propTypes.default.string
};