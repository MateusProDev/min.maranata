"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _reactHotLoader = require("react-hot-loader");
var _reactPolyglot = require("react-polyglot");
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _reactTopbarProgressIndicator = _interopRequireDefault(require("react-topbar-progress-indicator"));
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _auth = require("../../actions/auth");
var _backend = require("../../backend");
var _collections = require("../../actions/collections");
var _mediaLibrary = require("../../actions/mediaLibrary");
var _MediaLibrary = _interopRequireDefault(require("../MediaLibrary/MediaLibrary"));
var _UI = require("../UI");
var _history = require("../../routing/history");
var _publishModes = require("../../constants/publishModes");
var _Collection = _interopRequireDefault(require("../Collection/Collection"));
var _Workflow = _interopRequireDefault(require("../Workflow/Workflow"));
var _Editor = _interopRequireDefault(require("../Editor/Editor"));
var _NotFoundPage = _interopRequireDefault(require("./NotFoundPage"));
var _Header = _interopRequireDefault(require("./Header"));
var _react2 = require("@emotion/react");
const _excluded = ["collections", "render"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
_reactTopbarProgressIndicator.default.config({
  barColors: {
    0: _decapCmsUiDefault.colors.active,
    '1.0': _decapCmsUiDefault.colors.active
  },
  shadowBlur: 0,
  barThickness: 2
});
const AppMainContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "eh2m33j2",
  label: "AppMainContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "y0stlg",
  styles: "min-width:800px;max-width:1440px;margin:0 auto"
} : {
  name: "y0stlg",
  styles: "min-width:800px;max-width:1440px;margin:0 auto",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC9BcHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0NtQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BcHAvQXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBob3QgfSBmcm9tICdyZWFjdC1ob3QtbG9hZGVyJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgUm91dGUsIFN3aXRjaCwgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBUb3BCYXJQcm9ncmVzcyBmcm9tICdyZWFjdC10b3BiYXItcHJvZ3Jlc3MtaW5kaWNhdG9yJztcbmltcG9ydCB7IExvYWRlciwgY29sb3JzIH0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5pbXBvcnQgeyBsb2dpblVzZXIsIGxvZ291dFVzZXIgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2F1dGgnO1xuaW1wb3J0IHsgY3VycmVudEJhY2tlbmQgfSBmcm9tICcuLi8uLi9iYWNrZW5kJztcbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQgeyBvcGVuTWVkaWFMaWJyYXJ5IH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9tZWRpYUxpYnJhcnknO1xuaW1wb3J0IE1lZGlhTGlicmFyeSBmcm9tICcuLi9NZWRpYUxpYnJhcnkvTWVkaWFMaWJyYXJ5JztcbmltcG9ydCB7IE5vdGlmaWNhdGlvbnMgfSBmcm9tICcuLi9VSSc7XG5pbXBvcnQgeyBoaXN0b3J5IH0gZnJvbSAnLi4vLi4vcm91dGluZy9oaXN0b3J5JztcbmltcG9ydCB7IFNJTVBMRSwgRURJVE9SSUFMX1dPUktGTE9XIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgQ29sbGVjdGlvbiBmcm9tICcuLi9Db2xsZWN0aW9uL0NvbGxlY3Rpb24nO1xuaW1wb3J0IFdvcmtmbG93IGZyb20gJy4uL1dvcmtmbG93L1dvcmtmbG93JztcbmltcG9ydCBFZGl0b3IgZnJvbSAnLi4vRWRpdG9yL0VkaXRvcic7XG5pbXBvcnQgTm90Rm91bmRQYWdlIGZyb20gJy4vTm90Rm91bmRQYWdlJztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9IZWFkZXInO1xuXG5Ub3BCYXJQcm9ncmVzcy5jb25maWcoe1xuICBiYXJDb2xvcnM6IHtcbiAgICAwOiBjb2xvcnMuYWN0aXZlLFxuICAgICcxLjAnOiBjb2xvcnMuYWN0aXZlLFxuICB9LFxuICBzaGFkb3dCbHVyOiAwLFxuICBiYXJUaGlja25lc3M6IDIsXG59KTtcblxuY29uc3QgQXBwTWFpbkNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIG1pbi13aWR0aDogODAwcHg7XG4gIG1heC13aWR0aDogMTQ0MHB4O1xuICBtYXJnaW46IDAgYXV0bztcbmA7XG5cbmNvbnN0IEVycm9yQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luOiAyMHB4O1xuYDtcblxuY29uc3QgRXJyb3JDb2RlQmxvY2sgPSBzdHlsZWQucHJlYFxuICBtYXJnaW4tbGVmdDogMjBweDtcbiAgZm9udC1zaXplOiAxNXB4O1xuICBsaW5lLWhlaWdodDogMS41O1xuYDtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdFBhdGgoY29sbGVjdGlvbnMpIHtcbiAgY29uc3QgZmlyc3QgPSBjb2xsZWN0aW9ucy5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnaGlkZScpICE9PSB0cnVlKS5maXJzdCgpO1xuICBpZiAoZmlyc3QpIHtcbiAgICByZXR1cm4gYC9jb2xsZWN0aW9ucy8ke2ZpcnN0LmdldCgnbmFtZScpfWA7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBhIG5vbiBoaWRkZW4gY29sbGVjdGlvbicpO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJvdXRlSW5Db2xsZWN0aW9uKHsgY29sbGVjdGlvbnMsIHJlbmRlciwgLi4ucHJvcHMgfSkge1xuICBjb25zdCBkZWZhdWx0UGF0aCA9IGdldERlZmF1bHRQYXRoKGNvbGxlY3Rpb25zKTtcbiAgcmV0dXJuIChcbiAgICA8Um91dGVcbiAgICAgIHsuLi5wcm9wc31cbiAgICAgIHJlbmRlcj17cm91dGVQcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb25FeGlzdHMgPSBjb2xsZWN0aW9ucy5nZXQocm91dGVQcm9wcy5tYXRjaC5wYXJhbXMubmFtZSk7XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uRXhpc3RzID8gcmVuZGVyKHJvdXRlUHJvcHMpIDogPFJlZGlyZWN0IHRvPXtkZWZhdWx0UGF0aH0gLz47XG4gICAgICB9fVxuICAgIC8+XG4gICk7XG59XG5cbmNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgYXV0aDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNvbmZpZzogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgbG9naW5Vc2VyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGxvZ291dFVzZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdXNlcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBpc0ZldGNoaW5nOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIHB1Ymxpc2hNb2RlOiBQcm9wVHlwZXMub25lT2YoW1NJTVBMRSwgRURJVE9SSUFMX1dPUktGTE9XXSksXG4gICAgc2l0ZUlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHVzZU1lZGlhTGlicmFyeTogUHJvcFR5cGVzLmJvb2wsXG4gICAgb3Blbk1lZGlhTGlicmFyeTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzaG93TWVkaWFCdXR0b246IFByb3BUeXBlcy5ib29sLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29uZmlnRXJyb3IoY29uZmlnKSB7XG4gICAgY29uc3QgdCA9IHRoaXMucHJvcHMudDtcbiAgICByZXR1cm4gKFxuICAgICAgPEVycm9yQ29udGFpbmVyPlxuICAgICAgICA8aDE+e3QoJ2FwcC5hcHAuZXJyb3JIZWFkZXInKX08L2gxPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxzdHJvbmc+e3QoJ2FwcC5hcHAuY29uZmlnRXJyb3JzJyl9Ojwvc3Ryb25nPlxuICAgICAgICAgIDxFcnJvckNvZGVCbG9jaz57Y29uZmlnLmVycm9yfTwvRXJyb3JDb2RlQmxvY2s+XG4gICAgICAgICAgPHNwYW4+e3QoJ2FwcC5hcHAuY2hlY2tDb25maWdZbWwnKX08L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9FcnJvckNvbnRhaW5lcj5cbiAgICApO1xuICB9XG5cbiAgaGFuZGxlTG9naW4oY3JlZGVudGlhbHMpIHtcbiAgICB0aGlzLnByb3BzLmxvZ2luVXNlcihjcmVkZW50aWFscyk7XG4gIH1cblxuICBhdXRoZW50aWNhdGluZygpIHtcbiAgICBjb25zdCB7IGF1dGgsIHQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgYmFja2VuZCA9IGN1cnJlbnRCYWNrZW5kKHRoaXMucHJvcHMuY29uZmlnKTtcblxuICAgIGlmIChiYWNrZW5kID09IG51bGwpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGgxPnt0KCdhcHAuYXBwLndhaXRpbmdCYWNrZW5kJyl9PC9oMT5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8Tm90aWZpY2F0aW9ucyAvPlxuICAgICAgICB7UmVhY3QuY3JlYXRlRWxlbWVudChiYWNrZW5kLmF1dGhDb21wb25lbnQoKSwge1xuICAgICAgICAgIG9uTG9naW46IHRoaXMuaGFuZGxlTG9naW4uYmluZCh0aGlzKSxcbiAgICAgICAgICBlcnJvcjogYXV0aC5lcnJvcixcbiAgICAgICAgICBpblByb2dyZXNzOiBhdXRoLmlzRmV0Y2hpbmcsXG4gICAgICAgICAgc2l0ZUlkOiB0aGlzLnByb3BzLmNvbmZpZy5iYWNrZW5kLnNpdGVfZG9tYWluLFxuICAgICAgICAgIGJhc2VfdXJsOiB0aGlzLnByb3BzLmNvbmZpZy5iYWNrZW5kLmJhc2VfdXJsLFxuICAgICAgICAgIGF1dGhFbmRwb2ludDogdGhpcy5wcm9wcy5jb25maWcuYmFja2VuZC5hdXRoX2VuZHBvaW50LFxuICAgICAgICAgIGNvbmZpZzogdGhpcy5wcm9wcy5jb25maWcsXG4gICAgICAgICAgY2xlYXJIYXNoOiAoKSA9PiBoaXN0b3J5LnJlcGxhY2UoJy8nKSxcbiAgICAgICAgICB0LFxuICAgICAgICB9KX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICBoYW5kbGVMaW5rQ2xpY2soZXZlbnQsIGhhbmRsZXIsIC4uLmFyZ3MpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGhhbmRsZXIoLi4uYXJncyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdXNlcixcbiAgICAgIGNvbmZpZyxcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgbG9nb3V0VXNlcixcbiAgICAgIGlzRmV0Y2hpbmcsXG4gICAgICBwdWJsaXNoTW9kZSxcbiAgICAgIHVzZU1lZGlhTGlicmFyeSxcbiAgICAgIG9wZW5NZWRpYUxpYnJhcnksXG4gICAgICB0LFxuICAgICAgc2hvd01lZGlhQnV0dG9uLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGNvbmZpZyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5lcnJvcikge1xuICAgICAgcmV0dXJuIHRoaXMuY29uZmlnRXJyb3IoY29uZmlnKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmlzRmV0Y2hpbmcpIHtcbiAgICAgIHJldHVybiA8TG9hZGVyIGFjdGl2ZT57dCgnYXBwLmFwcC5sb2FkaW5nQ29uZmlnJyl9PC9Mb2FkZXI+O1xuICAgIH1cblxuICAgIGlmICh1c2VyID09IG51bGwpIHtcbiAgICAgIHJldHVybiB0aGlzLmF1dGhlbnRpY2F0aW5nKHQpO1xuICAgIH1cblxuICAgIGNvbnN0IGRlZmF1bHRQYXRoID0gZ2V0RGVmYXVsdFBhdGgoY29sbGVjdGlvbnMpO1xuICAgIGNvbnN0IGhhc1dvcmtmbG93ID0gcHVibGlzaE1vZGUgPT09IEVESVRPUklBTF9XT1JLRkxPVztcblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8Tm90aWZpY2F0aW9ucyAvPlxuICAgICAgICA8SGVhZGVyXG4gICAgICAgICAgdXNlcj17dXNlcn1cbiAgICAgICAgICBjb2xsZWN0aW9ucz17Y29sbGVjdGlvbnN9XG4gICAgICAgICAgb25DcmVhdGVFbnRyeUNsaWNrPXtjcmVhdGVOZXdFbnRyeX1cbiAgICAgICAgICBvbkxvZ291dENsaWNrPXtsb2dvdXRVc2VyfVxuICAgICAgICAgIG9wZW5NZWRpYUxpYnJhcnk9e29wZW5NZWRpYUxpYnJhcnl9XG4gICAgICAgICAgaGFzV29ya2Zsb3c9e2hhc1dvcmtmbG93fVxuICAgICAgICAgIGRpc3BsYXlVcmw9e2NvbmZpZy5kaXNwbGF5X3VybH1cbiAgICAgICAgICBpc1Rlc3RSZXBvPXtjb25maWcuYmFja2VuZC5uYW1lID09PSAndGVzdC1yZXBvJ31cbiAgICAgICAgICBzaG93TWVkaWFCdXR0b249e3Nob3dNZWRpYUJ1dHRvbn1cbiAgICAgICAgLz5cbiAgICAgICAgPEFwcE1haW5Db250YWluZXI+XG4gICAgICAgICAge2lzRmV0Y2hpbmcgJiYgPFRvcEJhclByb2dyZXNzIC8+fVxuICAgICAgICAgIDxTd2l0Y2g+XG4gICAgICAgICAgICA8UmVkaXJlY3QgZXhhY3QgZnJvbT1cIi9cIiB0bz17ZGVmYXVsdFBhdGh9IC8+XG4gICAgICAgICAgICA8UmVkaXJlY3QgZXhhY3QgZnJvbT1cIi9zZWFyY2gvXCIgdG89e2RlZmF1bHRQYXRofSAvPlxuICAgICAgICAgICAgPFJvdXRlSW5Db2xsZWN0aW9uXG4gICAgICAgICAgICAgIGV4YWN0XG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICAgICAgcGF0aD1cIi9jb2xsZWN0aW9ucy86bmFtZS9zZWFyY2gvXCJcbiAgICAgICAgICAgICAgcmVuZGVyPXsoeyBtYXRjaCB9KSA9PiA8UmVkaXJlY3QgdG89e2AvY29sbGVjdGlvbnMvJHttYXRjaC5wYXJhbXMubmFtZX1gfSAvPn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8UmVkaXJlY3RcbiAgICAgICAgICAgICAgLy8gVGhpcyBoYXBwZW5zIG9uIElkZW50aXR5ICsgSW52aXRlIE9ubHkgKyBFeHRlcm5hbCBQcm92aWRlciBlbWFpbCBub3QgbWF0Y2hpbmdcbiAgICAgICAgICAgICAgLy8gdGhlIHJlZ2lzdGVyZWQgdXNlclxuICAgICAgICAgICAgICBmcm9tPVwiL2Vycm9yPWFjY2Vzc19kZW5pZWQmZXJyb3JfZGVzY3JpcHRpb249U2lnbnVwcytub3QrYWxsb3dlZCtmb3IrdGhpcytpbnN0YW5jZVwiXG4gICAgICAgICAgICAgIHRvPXtkZWZhdWx0UGF0aH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7aGFzV29ya2Zsb3cgPyA8Um91dGUgcGF0aD1cIi93b3JrZmxvd1wiIGNvbXBvbmVudD17V29ya2Zsb3d9IC8+IDogbnVsbH1cbiAgICAgICAgICAgIDxSb3V0ZUluQ29sbGVjdGlvblxuICAgICAgICAgICAgICBleGFjdFxuICAgICAgICAgICAgICBjb2xsZWN0aW9ucz17Y29sbGVjdGlvbnN9XG4gICAgICAgICAgICAgIHBhdGg9XCIvY29sbGVjdGlvbnMvOm5hbWVcIlxuICAgICAgICAgICAgICByZW5kZXI9e3Byb3BzID0+IDxDb2xsZWN0aW9uIHsuLi5wcm9wc30gLz59XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFJvdXRlSW5Db2xsZWN0aW9uXG4gICAgICAgICAgICAgIHBhdGg9XCIvY29sbGVjdGlvbnMvOm5hbWUvbmV3XCJcbiAgICAgICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICByZW5kZXI9e3Byb3BzID0+IDxFZGl0b3Igey4uLnByb3BzfSBuZXdSZWNvcmQgLz59XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFJvdXRlSW5Db2xsZWN0aW9uXG4gICAgICAgICAgICAgIHBhdGg9XCIvY29sbGVjdGlvbnMvOm5hbWUvZW50cmllcy8qXCJcbiAgICAgICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICByZW5kZXI9e3Byb3BzID0+IDxFZGl0b3Igey4uLnByb3BzfSAvPn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Um91dGVJbkNvbGxlY3Rpb25cbiAgICAgICAgICAgICAgcGF0aD1cIi9jb2xsZWN0aW9ucy86bmFtZS9zZWFyY2gvOnNlYXJjaFRlcm1cIlxuICAgICAgICAgICAgICBjb2xsZWN0aW9ucz17Y29sbGVjdGlvbnN9XG4gICAgICAgICAgICAgIHJlbmRlcj17cHJvcHMgPT4gPENvbGxlY3Rpb24gey4uLnByb3BzfSBpc1NlYXJjaFJlc3VsdHMgaXNTaW5nbGVTZWFyY2hSZXN1bHQgLz59XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFJvdXRlSW5Db2xsZWN0aW9uXG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICAgICAgcGF0aD1cIi9jb2xsZWN0aW9ucy86bmFtZS9maWx0ZXIvOmZpbHRlclRlcm0qXCJcbiAgICAgICAgICAgICAgcmVuZGVyPXtwcm9wcyA9PiA8Q29sbGVjdGlvbiB7Li4ucHJvcHN9IC8+fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxSb3V0ZVxuICAgICAgICAgICAgICBwYXRoPVwiL3NlYXJjaC86c2VhcmNoVGVybVwiXG4gICAgICAgICAgICAgIHJlbmRlcj17cHJvcHMgPT4gPENvbGxlY3Rpb24gey4uLnByb3BzfSBpc1NlYXJjaFJlc3VsdHMgLz59XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFJvdXRlSW5Db2xsZWN0aW9uXG4gICAgICAgICAgICAgIHBhdGg9XCIvZWRpdC86bmFtZS86ZW50cnlOYW1lXCJcbiAgICAgICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICByZW5kZXI9eyh7IG1hdGNoIH0pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG5hbWUsIGVudHJ5TmFtZSB9ID0gbWF0Y2gucGFyYW1zO1xuICAgICAgICAgICAgICAgIHJldHVybiA8UmVkaXJlY3QgdG89e2AvY29sbGVjdGlvbnMvJHtuYW1lfS9lbnRyaWVzLyR7ZW50cnlOYW1lfWB9IC8+O1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxSb3V0ZSBjb21wb25lbnQ9e05vdEZvdW5kUGFnZX0gLz5cbiAgICAgICAgICA8L1N3aXRjaD5cbiAgICAgICAgICB7dXNlTWVkaWFMaWJyYXJ5ID8gPE1lZGlhTGlicmFyeSAvPiA6IG51bGx9XG4gICAgICAgIDwvQXBwTWFpbkNvbnRhaW5lcj5cbiAgICAgIDwvPlxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7XG4gIGNvbnN0IHsgYXV0aCwgY29uZmlnLCBjb2xsZWN0aW9ucywgZ2xvYmFsVUksIG1lZGlhTGlicmFyeSB9ID0gc3RhdGU7XG4gIGNvbnN0IHVzZXIgPSBhdXRoLnVzZXI7XG4gIGNvbnN0IGlzRmV0Y2hpbmcgPSBnbG9iYWxVSS5pc0ZldGNoaW5nO1xuICBjb25zdCBwdWJsaXNoTW9kZSA9IGNvbmZpZy5wdWJsaXNoX21vZGU7XG4gIGNvbnN0IHVzZU1lZGlhTGlicmFyeSA9ICFtZWRpYUxpYnJhcnkuZ2V0KCdleHRlcm5hbExpYnJhcnknKTtcbiAgY29uc3Qgc2hvd01lZGlhQnV0dG9uID0gbWVkaWFMaWJyYXJ5LmdldCgnc2hvd01lZGlhQnV0dG9uJyk7XG4gIHJldHVybiB7XG4gICAgYXV0aCxcbiAgICBjb25maWcsXG4gICAgY29sbGVjdGlvbnMsXG4gICAgdXNlcixcbiAgICBpc0ZldGNoaW5nLFxuICAgIHB1Ymxpc2hNb2RlLFxuICAgIHNob3dNZWRpYUJ1dHRvbixcbiAgICB1c2VNZWRpYUxpYnJhcnksXG4gIH07XG59XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcbiAgb3Blbk1lZGlhTGlicmFyeSxcbiAgbG9naW5Vc2VyLFxuICBsb2dvdXRVc2VyLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgaG90KG1vZHVsZSkoY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykodHJhbnNsYXRlKCkoQXBwKSkpO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ErrorContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "eh2m33j1",
  label: "ErrorContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "3zy121",
  styles: "margin:20px"
} : {
  name: "3zy121",
  styles: "margin:20px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ErrorCodeBlock = /*#__PURE__*/(0, _base.default)("pre", {
  target: "eh2m33j0",
  label: "ErrorCodeBlock"
})(process.env.NODE_ENV === "production" ? {
  name: "1dps4tx",
  styles: "margin-left:20px;font-size:15px;line-height:1.5"
} : {
  name: "1dps4tx",
  styles: "margin-left:20px;font-size:15px;line-height:1.5",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
function getDefaultPath(collections) {
  const first = collections.filter(collection => collection.get('hide') !== true).first();
  if (first) {
    return `/collections/${first.get('name')}`;
  } else {
    throw new Error('Could not find a non hidden collection');
  }
}
function RouteInCollection(_ref) {
  let {
      collections,
      render
    } = _ref,
    props = _objectWithoutProperties(_ref, _excluded);
  const defaultPath = getDefaultPath(collections);
  return (0, _react2.jsx)(_reactRouterDom.Route, _extends({}, props, {
    render: routeProps => {
      const collectionExists = collections.get(routeProps.match.params.name);
      return collectionExists ? render(routeProps) : (0, _react2.jsx)(_reactRouterDom.Redirect, {
        to: defaultPath
      });
    }
  }));
}
class App extends _react.default.Component {
  configError(config) {
    const t = this.props.t;
    return (0, _react2.jsx)(ErrorContainer, null, (0, _react2.jsx)("h1", null, t('app.app.errorHeader')), (0, _react2.jsx)("div", null, (0, _react2.jsx)("strong", null, t('app.app.configErrors'), ":"), (0, _react2.jsx)(ErrorCodeBlock, null, config.error), (0, _react2.jsx)("span", null, t('app.app.checkConfigYml'))));
  }
  handleLogin(credentials) {
    this.props.loginUser(credentials);
  }
  authenticating() {
    const {
      auth,
      t
    } = this.props;
    const backend = (0, _backend.currentBackend)(this.props.config);
    if (backend == null) {
      return (0, _react2.jsx)("div", null, (0, _react2.jsx)("h1", null, t('app.app.waitingBackend')));
    }
    return (0, _react2.jsx)("div", null, (0, _react2.jsx)(_UI.Notifications, null), /*#__PURE__*/_react.default.createElement(backend.authComponent(), {
      onLogin: this.handleLogin.bind(this),
      error: auth.error,
      inProgress: auth.isFetching,
      siteId: this.props.config.backend.site_domain,
      base_url: this.props.config.backend.base_url,
      authEndpoint: this.props.config.backend.auth_endpoint,
      config: this.props.config,
      clearHash: () => _history.history.replace('/'),
      t
    }));
  }
  handleLinkClick(event, handler, ...args) {
    event.preventDefault();
    handler(...args);
  }
  render() {
    const {
      user,
      config,
      collections,
      logoutUser,
      isFetching,
      publishMode,
      useMediaLibrary,
      openMediaLibrary,
      t,
      showMediaButton
    } = this.props;
    if (config === null) {
      return null;
    }
    if (config.error) {
      return this.configError(config);
    }
    if (config.isFetching) {
      return (0, _react2.jsx)(_decapCmsUiDefault.Loader, {
        active: true
      }, t('app.app.loadingConfig'));
    }
    if (user == null) {
      return this.authenticating(t);
    }
    const defaultPath = getDefaultPath(collections);
    const hasWorkflow = publishMode === _publishModes.EDITORIAL_WORKFLOW;
    return (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(_UI.Notifications, null), (0, _react2.jsx)(_Header.default, {
      user: user,
      collections: collections,
      onCreateEntryClick: _collections.createNewEntry,
      onLogoutClick: logoutUser,
      openMediaLibrary: openMediaLibrary,
      hasWorkflow: hasWorkflow,
      displayUrl: config.display_url,
      isTestRepo: config.backend.name === 'test-repo',
      showMediaButton: showMediaButton
    }), (0, _react2.jsx)(AppMainContainer, null, isFetching && (0, _react2.jsx)(_reactTopbarProgressIndicator.default, null), (0, _react2.jsx)(_reactRouterDom.Switch, null, (0, _react2.jsx)(_reactRouterDom.Redirect, {
      exact: true,
      from: "/",
      to: defaultPath
    }), (0, _react2.jsx)(_reactRouterDom.Redirect, {
      exact: true,
      from: "/search/",
      to: defaultPath
    }), (0, _react2.jsx)(RouteInCollection, {
      exact: true,
      collections: collections,
      path: "/collections/:name/search/",
      render: ({
        match
      }) => (0, _react2.jsx)(_reactRouterDom.Redirect, {
        to: `/collections/${match.params.name}`
      })
    }), (0, _react2.jsx)(_reactRouterDom.Redirect
    // This happens on Identity + Invite Only + External Provider email not matching
    // the registered user
    , {
      from: "/error=access_denied&error_description=Signups+not+allowed+for+this+instance",
      to: defaultPath
    }), hasWorkflow ? (0, _react2.jsx)(_reactRouterDom.Route, {
      path: "/workflow",
      component: _Workflow.default
    }) : null, (0, _react2.jsx)(RouteInCollection, {
      exact: true,
      collections: collections,
      path: "/collections/:name",
      render: props => (0, _react2.jsx)(_Collection.default, props)
    }), (0, _react2.jsx)(RouteInCollection, {
      path: "/collections/:name/new",
      collections: collections,
      render: props => (0, _react2.jsx)(_Editor.default, _extends({}, props, {
        newRecord: true
      }))
    }), (0, _react2.jsx)(RouteInCollection, {
      path: "/collections/:name/entries/*",
      collections: collections,
      render: props => (0, _react2.jsx)(_Editor.default, props)
    }), (0, _react2.jsx)(RouteInCollection, {
      path: "/collections/:name/search/:searchTerm",
      collections: collections,
      render: props => (0, _react2.jsx)(_Collection.default, _extends({}, props, {
        isSearchResults: true,
        isSingleSearchResult: true
      }))
    }), (0, _react2.jsx)(RouteInCollection, {
      collections: collections,
      path: "/collections/:name/filter/:filterTerm*",
      render: props => (0, _react2.jsx)(_Collection.default, props)
    }), (0, _react2.jsx)(_reactRouterDom.Route, {
      path: "/search/:searchTerm",
      render: props => (0, _react2.jsx)(_Collection.default, _extends({}, props, {
        isSearchResults: true
      }))
    }), (0, _react2.jsx)(RouteInCollection, {
      path: "/edit/:name/:entryName",
      collections: collections,
      render: ({
        match
      }) => {
        const {
          name,
          entryName
        } = match.params;
        return (0, _react2.jsx)(_reactRouterDom.Redirect, {
          to: `/collections/${name}/entries/${entryName}`
        });
      }
    }), (0, _react2.jsx)(_reactRouterDom.Route, {
      component: _NotFoundPage.default
    })), useMediaLibrary ? (0, _react2.jsx)(_MediaLibrary.default, null) : null));
  }
}
_defineProperty(App, "propTypes", {
  auth: _propTypes.default.object.isRequired,
  config: _propTypes.default.object.isRequired,
  collections: _reactImmutableProptypes.default.map.isRequired,
  loginUser: _propTypes.default.func.isRequired,
  logoutUser: _propTypes.default.func.isRequired,
  user: _propTypes.default.object,
  isFetching: _propTypes.default.bool.isRequired,
  publishMode: _propTypes.default.oneOf([_publishModes.SIMPLE, _publishModes.EDITORIAL_WORKFLOW]),
  siteId: _propTypes.default.string,
  useMediaLibrary: _propTypes.default.bool,
  openMediaLibrary: _propTypes.default.func.isRequired,
  showMediaButton: _propTypes.default.bool,
  t: _propTypes.default.func.isRequired
});
function mapStateToProps(state) {
  const {
    auth,
    config,
    collections,
    globalUI,
    mediaLibrary
  } = state;
  const user = auth.user;
  const isFetching = globalUI.isFetching;
  const publishMode = config.publish_mode;
  const useMediaLibrary = !mediaLibrary.get('externalLibrary');
  const showMediaButton = mediaLibrary.get('showMediaButton');
  return {
    auth,
    config,
    collections,
    user,
    isFetching,
    publishMode,
    showMediaButton,
    useMediaLibrary
  };
}
const mapDispatchToProps = {
  openMediaLibrary: _mediaLibrary.openMediaLibrary,
  loginUser: _auth.loginUser,
  logoutUser: _auth.logoutUser
};
var _default = exports.default = (0, _reactHotLoader.hot)(module)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)((0, _reactPolyglot.translate)()(App)));